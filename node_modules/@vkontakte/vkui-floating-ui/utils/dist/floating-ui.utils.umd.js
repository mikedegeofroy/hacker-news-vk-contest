"use strict";
var _object_spread = require("@swc/helpers/_/_object_spread");
var _object_spread_props = require("@swc/helpers/_/_object_spread_props");
(function(global, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define([
        "exports"
    ], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.FloatingUIUtils = {}));
})(void 0, function(exports1) {
    "use strict";
    /**
   * Custom positioning reference element.
   * @see https://floating-ui.com/docs/virtual-elements
   */ var sides = [
        "top",
        "right",
        "bottom",
        "left"
    ];
    var alignments = [
        "start",
        "end"
    ];
    var placements = /*#__PURE__*/ sides.reduce(function(acc, side) {
        return acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]);
    }, []);
    var min = Math.min;
    var max = Math.max;
    var round = Math.round;
    var floor = Math.floor;
    var createCoords = function(v) {
        return {
            x: v,
            y: v
        };
    };
    var oppositeSideMap = {
        left: "right",
        right: "left",
        bottom: "top",
        top: "bottom"
    };
    var oppositeAlignmentMap = {
        start: "end",
        end: "start"
    };
    function clamp(start, value, end) {
        return max(start, min(value, end));
    }
    function evaluate(value, param) {
        return typeof value === "function" ? value(param) : value;
    }
    function getSide(placement) {
        return placement.split("-")[0];
    }
    function getAlignment(placement) {
        return placement.split("-")[1];
    }
    function getOppositeAxis(axis) {
        return axis === "x" ? "y" : "x";
    }
    function getAxisLength(axis) {
        return axis === "y" ? "height" : "width";
    }
    function getSideAxis(placement) {
        return [
            "top",
            "bottom"
        ].includes(getSide(placement)) ? "y" : "x";
    }
    function getAlignmentAxis(placement) {
        return getOppositeAxis(getSideAxis(placement));
    }
    function getAlignmentSides(placement, rects, rtl) {
        if (rtl === void 0) {
            rtl = false;
        }
        var alignment = getAlignment(placement);
        var alignmentAxis = getAlignmentAxis(placement);
        var length = getAxisLength(alignmentAxis);
        var mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
        if (rects.reference[length] > rects.floating[length]) {
            mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
        }
        return [
            mainAlignmentSide,
            getOppositePlacement(mainAlignmentSide)
        ];
    }
    function getExpandedPlacements(placement) {
        var oppositePlacement = getOppositePlacement(placement);
        return [
            getOppositeAlignmentPlacement(placement),
            oppositePlacement,
            getOppositeAlignmentPlacement(oppositePlacement)
        ];
    }
    function getOppositeAlignmentPlacement(placement) {
        return placement.replace(/start|end/g, function(alignment) {
            return oppositeAlignmentMap[alignment];
        });
    }
    function getSideList(side, isStart, rtl) {
        var lr = [
            "left",
            "right"
        ];
        var rl = [
            "right",
            "left"
        ];
        var tb = [
            "top",
            "bottom"
        ];
        var bt = [
            "bottom",
            "top"
        ];
        switch(side){
            case "top":
            case "bottom":
                if (rtl) return isStart ? rl : lr;
                return isStart ? lr : rl;
            case "left":
            case "right":
                return isStart ? tb : bt;
            default:
                return [];
        }
    }
    function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
        var alignment = getAlignment(placement);
        var list = getSideList(getSide(placement), direction === "start", rtl);
        if (alignment) {
            list = list.map(function(side) {
                return side + "-" + alignment;
            });
            if (flipAlignment) {
                list = list.concat(list.map(getOppositeAlignmentPlacement));
            }
        }
        return list;
    }
    function getOppositePlacement(placement) {
        return placement.replace(/left|right|bottom|top/g, function(side) {
            return oppositeSideMap[side];
        });
    }
    function expandPaddingObject(padding) {
        return _object_spread._({
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
        }, padding);
    }
    function getPaddingObject(padding) {
        return typeof padding !== "number" ? expandPaddingObject(padding) : {
            top: padding,
            right: padding,
            bottom: padding,
            left: padding
        };
    }
    function rectToClientRect(rect) {
        return _object_spread_props._(_object_spread._({}, rect), {
            top: rect.y,
            left: rect.x,
            right: rect.x + rect.width,
            bottom: rect.y + rect.height
        });
    }
    exports1.alignments = alignments;
    exports1.clamp = clamp;
    exports1.createCoords = createCoords;
    exports1.evaluate = evaluate;
    exports1.expandPaddingObject = expandPaddingObject;
    exports1.floor = floor;
    exports1.getAlignment = getAlignment;
    exports1.getAlignmentAxis = getAlignmentAxis;
    exports1.getAlignmentSides = getAlignmentSides;
    exports1.getAxisLength = getAxisLength;
    exports1.getExpandedPlacements = getExpandedPlacements;
    exports1.getOppositeAlignmentPlacement = getOppositeAlignmentPlacement;
    exports1.getOppositeAxis = getOppositeAxis;
    exports1.getOppositeAxisPlacements = getOppositeAxisPlacements;
    exports1.getOppositePlacement = getOppositePlacement;
    exports1.getPaddingObject = getPaddingObject;
    exports1.getSide = getSide;
    exports1.getSideAxis = getSideAxis;
    exports1.max = max;
    exports1.min = min;
    exports1.placements = placements;
    exports1.rectToClientRect = rectToClientRect;
    exports1.round = round;
    exports1.sides = sides;
});
