import { _ as _async_to_generator } from "@swc/helpers/_/_async_to_generator";
import { _ as _define_property } from "@swc/helpers/_/_define_property";
import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { _ as _object_spread_props } from "@swc/helpers/_/_object_spread_props";
import { _ as _object_without_properties } from "@swc/helpers/_/_object_without_properties";
import { _ as _to_consumable_array } from "@swc/helpers/_/_to_consumable_array";
import { _ as _ts_generator } from "@swc/helpers/_/_ts_generator";
import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '../../utils/dist/floating-ui.utils.esm.js';
export { rectToClientRect } from '../../utils/dist/floating-ui.utils.esm.js';
function computeCoordsFromPlacement(_ref, placement, rtl) {
    var reference = _ref.reference, floating = _ref.floating;
    var sideAxis = getSideAxis(placement);
    var alignmentAxis = getAlignmentAxis(placement);
    var alignLength = getAxisLength(alignmentAxis);
    var side = getSide(placement);
    var isVertical = sideAxis === "y";
    var commonX = reference.x + reference.width / 2 - floating.width / 2;
    var commonY = reference.y + reference.height / 2 - floating.height / 2;
    var commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    var coords;
    switch(side){
        case "top":
            coords = {
                x: commonX,
                y: reference.y - floating.height
            };
            break;
        case "bottom":
            coords = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case "right":
            coords = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case "left":
            coords = {
                x: reference.x - floating.width,
                y: commonY
            };
            break;
        default:
            coords = {
                x: reference.x,
                y: reference.y
            };
    }
    switch(getAlignment(placement)){
        case "start":
            coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
            break;
        case "end":
            coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
            break;
    }
    return coords;
}
/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a given reference element.
 *
 * This export does not have any `platform` interface logic. You will need to
 * write one for the platform you are using Floating UI with.
 */ var computePosition = function() {
    var _ref = _async_to_generator(function(reference, floating, config) {
        var _config_placement, placement, _config_strategy, strategy, _config_middleware, middleware, platform, validMiddleware, rtl, rects, _computeCoordsFromPlacement, x, y, statefulPlacement, middlewareData, resetCount, i, _validMiddleware_i, name, fn, _ref, nextX, nextY, data, reset, _tmp, ref;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _config_placement = config.placement, placement = _config_placement === void 0 ? "bottom" : _config_placement, _config_strategy = config.strategy, strategy = _config_strategy === void 0 ? "absolute" : _config_strategy, _config_middleware = config.middleware, middleware = _config_middleware === void 0 ? [] : _config_middleware, platform = config.platform;
                    validMiddleware = middleware.filter(Boolean);
                    return [
                        4,
                        platform.isRTL == null ? void 0 : platform.isRTL(floating)
                    ];
                case 1:
                    rtl = _state.sent();
                    return [
                        4,
                        platform.getElementRects({
                            reference: reference,
                            floating: floating,
                            strategy: strategy
                        })
                    ];
                case 2:
                    rects = _state.sent();
                    _computeCoordsFromPlacement = computeCoordsFromPlacement(rects, placement, rtl), x = _computeCoordsFromPlacement.x, y = _computeCoordsFromPlacement.y;
                    statefulPlacement = placement;
                    middlewareData = {};
                    resetCount = 0;
                    i = 0;
                    _state.label = 3;
                case 3:
                    if (!(i < validMiddleware.length)) return [
                        3,
                        11
                    ];
                    _validMiddleware_i = validMiddleware[i], name = _validMiddleware_i.name, fn = _validMiddleware_i.fn;
                    return [
                        4,
                        fn({
                            x: x,
                            y: y,
                            initialPlacement: placement,
                            placement: statefulPlacement,
                            strategy: strategy,
                            middlewareData: middlewareData,
                            rects: rects,
                            platform: platform,
                            elements: {
                                reference: reference,
                                floating: floating
                            }
                        })
                    ];
                case 4:
                    _ref = _state.sent(), nextX = _ref.x, nextY = _ref.y, data = _ref.data, reset = _ref.reset;
                    x = nextX != null ? nextX : x;
                    y = nextY != null ? nextY : y;
                    middlewareData = _object_spread_props(_object_spread({}, middlewareData), _define_property({}, name, _object_spread({}, middlewareData[name], data)));
                    if (!(reset && resetCount <= 50)) return [
                        3,
                        10
                    ];
                    resetCount++;
                    if (!(typeof reset === "object")) return [
                        3,
                        9
                    ];
                    if (reset.placement) {
                        statefulPlacement = reset.placement;
                    }
                    if (!reset.rects) return [
                        3,
                        8
                    ];
                    if (!(reset.rects === true)) return [
                        3,
                        6
                    ];
                    return [
                        4,
                        platform.getElementRects({
                            reference: reference,
                            floating: floating,
                            strategy: strategy
                        })
                    ];
                case 5:
                    _tmp = _state.sent();
                    return [
                        3,
                        7
                    ];
                case 6:
                    _tmp = reset.rects;
                    _state.label = 7;
                case 7:
                    rects = _tmp;
                    _state.label = 8;
                case 8:
                    ref = computeCoordsFromPlacement(rects, statefulPlacement, rtl), x = ref.x, y = ref.y, ref;
                    _state.label = 9;
                case 9:
                    i = -1;
                    _state.label = 10;
                case 10:
                    i++;
                    return [
                        3,
                        3
                    ];
                case 11:
                    return [
                        2,
                        {
                            x: x,
                            y: y,
                            placement: statefulPlacement,
                            strategy: strategy,
                            middlewareData: middlewareData
                        }
                    ];
            }
        });
    });
    return function computePosition(reference, floating, config) {
        return _ref.apply(this, arguments);
    };
}();
function detectOverflow(state, options) {
    return _detectOverflow.apply(this, arguments);
}
function _detectOverflow() {
    _detectOverflow = /**
 * Resolves with an object of overflow side offsets that determine how much the
 * element is overflowing a given clipping boundary on each side.
 * - positive = overflowing the boundary by that number of pixels
 * - negative = how many pixels left before it will overflow
 * - 0 = lies flush with the boundary
 * @see https://floating-ui.com/docs/detectOverflow
 */ _async_to_generator(function(state, options) {
        var _await$platform$isEle, x, y, platform, rects, elements, strategy, _evaluate, _evaluate_boundary, boundary, _evaluate_rootBoundary, rootBoundary, _evaluate_elementContext, elementContext, _evaluate_altBoundary, altBoundary, _evaluate_padding, padding, paddingObject, altContext, element, clippingClientRect, _, _tmp, _tmp1, _tmp2, rect, offsetParent, offsetScale, _tmp3, elementClientRect, _tmp4;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (options === void 0) {
                        options = {};
                    }
                    x = state.x, y = state.y, platform = state.platform, rects = state.rects, elements = state.elements, strategy = state.strategy;
                    _evaluate = evaluate(options, state), _evaluate_boundary = _evaluate.boundary, boundary = _evaluate_boundary === void 0 ? "clippingAncestors" : _evaluate_boundary, _evaluate_rootBoundary = _evaluate.rootBoundary, rootBoundary = _evaluate_rootBoundary === void 0 ? "viewport" : _evaluate_rootBoundary, _evaluate_elementContext = _evaluate.elementContext, elementContext = _evaluate_elementContext === void 0 ? "floating" : _evaluate_elementContext, _evaluate_altBoundary = _evaluate.altBoundary, altBoundary = _evaluate_altBoundary === void 0 ? false : _evaluate_altBoundary, _evaluate_padding = _evaluate.padding, padding = _evaluate_padding === void 0 ? 0 : _evaluate_padding;
                    paddingObject = getPaddingObject(padding);
                    altContext = elementContext === "floating" ? "reference" : "floating";
                    element = elements[altBoundary ? altContext : elementContext];
                    _ = platform.getClippingRect;
                    _tmp = {};
                    return [
                        4,
                        platform.isElement == null ? void 0 : platform.isElement(element)
                    ];
                case 1:
                    if (!((_await$platform$isEle = _state.sent()) != null ? _await$platform$isEle : true)) return [
                        3,
                        2
                    ];
                    _tmp1 = element;
                    return [
                        3,
                        5
                    ];
                case 2:
                    _tmp2 = element.contextElement;
                    if (_tmp2) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating)
                    ];
                case 3:
                    _tmp2 = _state.sent();
                    _state.label = 4;
                case 4:
                    _tmp1 = _tmp2;
                    _state.label = 5;
                case 5:
                    return [
                        4,
                        _.apply(platform, [
                            (_tmp.element = _tmp1, _tmp.boundary = boundary, _tmp.rootBoundary = rootBoundary, _tmp.strategy = strategy, _tmp)
                        ])
                    ];
                case 6:
                    clippingClientRect = rectToClientRect.apply(void 0, [
                        _state.sent()
                    ]);
                    rect = elementContext === "floating" ? _object_spread_props(_object_spread({}, rects.floating), {
                        x: x,
                        y: y
                    }) : rects.reference;
                    return [
                        4,
                        platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)
                    ];
                case 7:
                    offsetParent = _state.sent();
                    return [
                        4,
                        platform.isElement == null ? void 0 : platform.isElement(offsetParent)
                    ];
                case 8:
                    if (!_state.sent()) return [
                        3,
                        10
                    ];
                    return [
                        4,
                        platform.getScale == null ? void 0 : platform.getScale(offsetParent)
                    ];
                case 9:
                    _tmp3 = _state.sent() || {
                        x: 1,
                        y: 1
                    };
                    return [
                        3,
                        11
                    ];
                case 10:
                    _tmp3 = {
                        x: 1,
                        y: 1
                    };
                    _state.label = 11;
                case 11:
                    offsetScale = _tmp3;
                    if (!platform.convertOffsetParentRelativeRectToViewportRelativeRect) return [
                        3,
                        13
                    ];
                    return [
                        4,
                        platform.convertOffsetParentRelativeRectToViewportRelativeRect({
                            elements: elements,
                            rect: rect,
                            offsetParent: offsetParent,
                            strategy: strategy
                        })
                    ];
                case 12:
                    _tmp4 = _state.sent();
                    return [
                        3,
                        14
                    ];
                case 13:
                    _tmp4 = rect;
                    _state.label = 14;
                case 14:
                    elementClientRect = rectToClientRect.apply(void 0, [
                        _tmp4
                    ]);
                    return [
                        2,
                        {
                            top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
                            bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
                            left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
                            right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
                        }
                    ];
            }
        });
    });
    return _detectOverflow.apply(this, arguments);
}
/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * @see https://floating-ui.com/docs/arrow
 */ var arrow = function(options) {
    return {
        name: "arrow",
        options: options,
        fn: function fn(state) {
            return _async_to_generator(function() {
                var x, y, placement, rects, platform, elements, middlewareData, _ref, element, _ref_padding, padding, paddingObject, coords, axis, length, arrowDimensions, isYAxis, minProp, maxProp, clientProp, endDiff, startDiff, arrowOffsetParent, clientSize, _tmp, centerToReference, largestPossiblePadding, minPadding, maxPadding, min$1, max, center, offset, shouldAddOffset, alignmentOffset, _obj, _obj1;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            x = state.x, y = state.y, placement = state.placement, rects = state.rects, platform = state.platform, elements = state.elements, middlewareData = state.middlewareData;
                            // Since `element` is required, we don't Partial<> the type.
                            _ref = evaluate(options, state) || {}, element = _ref.element, _ref_padding = _ref.padding, padding = _ref_padding === void 0 ? 0 : _ref_padding;
                            if (element == null) {
                                return [
                                    2,
                                    {}
                                ];
                            }
                            paddingObject = getPaddingObject(padding);
                            coords = {
                                x: x,
                                y: y
                            };
                            axis = getAlignmentAxis(placement);
                            length = getAxisLength(axis);
                            return [
                                4,
                                platform.getDimensions(element)
                            ];
                        case 1:
                            arrowDimensions = _state.sent();
                            isYAxis = axis === "y";
                            minProp = isYAxis ? "top" : "left";
                            maxProp = isYAxis ? "bottom" : "right";
                            clientProp = isYAxis ? "clientHeight" : "clientWidth";
                            endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
                            startDiff = coords[axis] - rects.reference[axis];
                            return [
                                4,
                                platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element)
                            ];
                        case 2:
                            arrowOffsetParent = _state.sent();
                            clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
                            _tmp = !clientSize;
                            if (_tmp) return [
                                3,
                                4
                            ];
                            return [
                                4,
                                platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)
                            ];
                        case 3:
                            _tmp = !_state.sent();
                            _state.label = 4;
                        case 4:
                            // DOM platform can return `window` as the `offsetParent`.
                            if (_tmp) {
                                clientSize = elements.floating[clientProp] || rects.floating[length];
                            }
                            centerToReference = endDiff / 2 - startDiff / 2;
                            // If the padding is large enough that it causes the arrow to no longer be
                            // centered, modify the padding so that it is centered.
                            largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
                            minPadding = min(paddingObject[minProp], largestPossiblePadding);
                            maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
                            // Make sure the arrow doesn't overflow the floating element if the center
                            // point is outside the floating element's bounds.
                            min$1 = minPadding;
                            max = clientSize - arrowDimensions[length] - maxPadding;
                            center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
                            offset = clamp(min$1, center, max);
                            // If the reference is small enough that the arrow's padding causes it to
                            // to point to nothing for an aligned placement, adjust the offset of the
                            // floating element itself. To ensure `shift()` continues to take action,
                            // a single reset is performed when this is true.
                            shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
                            alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;
                            return [
                                2,
                                (_obj1 = {}, _define_property(_obj1, axis, coords[axis] + alignmentOffset), _define_property(_obj1, "data", _object_spread((_obj = {}, _define_property(_obj, axis, offset), _define_property(_obj, "centerOffset", center - offset - alignmentOffset), _obj), shouldAddOffset && {
                                    alignmentOffset: alignmentOffset
                                })), _define_property(_obj1, "reset", shouldAddOffset), _obj1)
                            ];
                    }
                });
            })();
        }
    };
};
function getPlacementList(alignment, autoAlignment, allowedPlacements) {
    var allowedPlacementsSortedByAlignment = alignment ? _to_consumable_array(allowedPlacements.filter(function(placement) {
        return getAlignment(placement) === alignment;
    })).concat(_to_consumable_array(allowedPlacements.filter(function(placement) {
        return getAlignment(placement) !== alignment;
    }))) : allowedPlacements.filter(function(placement) {
        return getSide(placement) === placement;
    });
    return allowedPlacementsSortedByAlignment.filter(function(placement) {
        if (alignment) {
            return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
        }
        return true;
    });
}
/**
 * Optimizes the visibility of the floating element by choosing the placement
 * that has the most space available automatically, without needing to specify a
 * preferred placement. Alternative to `flip`.
 * @see https://floating-ui.com/docs/autoPlacement
 */ var autoPlacement = function autoPlacement(options) {
    if (options === void 0) {
        options = {};
    }
    return {
        name: "autoPlacement",
        options: options,
        fn: function fn(state) {
            return _async_to_generator(function() {
                var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE, rects, middlewareData, placement, platform, elements, _evaluate, _evaluate_crossAxis, crossAxis, alignment, _evaluate_allowedPlacements, allowedPlacements, _evaluate_autoAlignment, autoAlignment, detectOverflowOptions, placements$1, overflow, currentIndex, currentPlacement, alignmentSides, _tmp, currentOverflows, allOverflows, nextPlacement, placementsSortedByMostSpace, placementsThatFitOnEachSide, resetPlacement;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            rects = state.rects, middlewareData = state.middlewareData, placement = state.placement, platform = state.platform, elements = state.elements;
                            _evaluate = evaluate(options, state), _evaluate_crossAxis = _evaluate.crossAxis, crossAxis = _evaluate_crossAxis === void 0 ? false : _evaluate_crossAxis, alignment = _evaluate.alignment, _evaluate_allowedPlacements = _evaluate.allowedPlacements, allowedPlacements = _evaluate_allowedPlacements === void 0 ? placements : _evaluate_allowedPlacements, _evaluate_autoAlignment = _evaluate.autoAlignment, autoAlignment = _evaluate_autoAlignment === void 0 ? true : _evaluate_autoAlignment, detectOverflowOptions = _object_without_properties(_evaluate, [
                                "crossAxis",
                                "alignment",
                                "allowedPlacements",
                                "autoAlignment"
                            ]);
                            placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;
                            return [
                                4,
                                detectOverflow(state, detectOverflowOptions)
                            ];
                        case 1:
                            overflow = _state.sent();
                            currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;
                            currentPlacement = placements$1[currentIndex];
                            if (currentPlacement == null) {
                                return [
                                    2,
                                    {}
                                ];
                            }
                            _tmp = [
                                currentPlacement,
                                rects
                            ];
                            return [
                                4,
                                platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)
                            ];
                        case 2:
                            alignmentSides = getAlignmentSides.apply(void 0, _tmp.concat([
                                _state.sent()
                            ]));
                            // Make `computeCoords` start from the right place.
                            if (placement !== currentPlacement) {
                                return [
                                    2,
                                    {
                                        reset: {
                                            placement: placements$1[0]
                                        }
                                    }
                                ];
                            }
                            currentOverflows = [
                                overflow[getSide(currentPlacement)],
                                overflow[alignmentSides[0]],
                                overflow[alignmentSides[1]]
                            ];
                            allOverflows = _to_consumable_array(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []).concat([
                                {
                                    placement: currentPlacement,
                                    overflows: currentOverflows
                                }
                            ]);
                            nextPlacement = placements$1[currentIndex + 1];
                            // There are more placements to check.
                            if (nextPlacement) {
                                return [
                                    2,
                                    {
                                        data: {
                                            index: currentIndex + 1,
                                            overflows: allOverflows
                                        },
                                        reset: {
                                            placement: nextPlacement
                                        }
                                    }
                                ];
                            }
                            placementsSortedByMostSpace = allOverflows.map(function(d) {
                                var alignment = getAlignment(d.placement);
                                return [
                                    d.placement,
                                    alignment && crossAxis ? // Check along the mainAxis and main crossAxis side.
                                    d.overflows.slice(0, 2).reduce(function(acc, v) {
                                        return acc + v;
                                    }, 0) : // Check only the mainAxis.
                                    d.overflows[0],
                                    d.overflows
                                ];
                            }).sort(function(a, b) {
                                return a[1] - b[1];
                            });
                            placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(function(d) {
                                return d[2].slice(0, // Aligned placements should not check their opposite crossAxis
                                // side.
                                getAlignment(d[0]) ? 2 : 3).every(function(v) {
                                    return v <= 0;
                                });
                            });
                            resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];
                            if (resetPlacement !== placement) {
                                return [
                                    2,
                                    {
                                        data: {
                                            index: currentIndex + 1,
                                            overflows: allOverflows
                                        },
                                        reset: {
                                            placement: resetPlacement
                                        }
                                    }
                                ];
                            }
                            return [
                                2,
                                {}
                            ];
                    }
                });
            })();
        }
    };
};
/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */ var flip = function flip(options) {
    if (options === void 0) {
        options = {};
    }
    return {
        name: "flip",
        options: options,
        fn: function fn(state) {
            return _async_to_generator(function() {
                var _middlewareData$arrow, _middlewareData$flip, placement, middlewareData, rects, initialPlacement, platform, elements, _evaluate, tmp, checkMainAxis, tmp1, checkCrossAxis, specifiedFallbackPlacements, _evaluate_fallbackStrategy, fallbackStrategy, _evaluate_fallbackAxisSideDirection, fallbackAxisSideDirection, _evaluate_flipAlignment, flipAlignment, detectOverflowOptions, side, isBasePlacement, rtl, fallbackPlacements, _fallbackPlacements, placements, overflow, overflows, overflowsData, sides, _middlewareData$flip2, _overflowsData$filter, nextIndex, nextPlacement, resetPlacement, _overflowsData$map$so, placement1;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            placement = state.placement, middlewareData = state.middlewareData, rects = state.rects, initialPlacement = state.initialPlacement, platform = state.platform, elements = state.elements;
                            _evaluate = evaluate(options, state), tmp = _evaluate.mainAxis, checkMainAxis = tmp === void 0 ? true : tmp, tmp1 = _evaluate.crossAxis, checkCrossAxis = tmp1 === void 0 ? true : tmp1, specifiedFallbackPlacements = _evaluate.fallbackPlacements, _evaluate_fallbackStrategy = _evaluate.fallbackStrategy, fallbackStrategy = _evaluate_fallbackStrategy === void 0 ? "bestFit" : _evaluate_fallbackStrategy, _evaluate_fallbackAxisSideDirection = _evaluate.fallbackAxisSideDirection, fallbackAxisSideDirection = _evaluate_fallbackAxisSideDirection === void 0 ? "none" : _evaluate_fallbackAxisSideDirection, _evaluate_flipAlignment = _evaluate.flipAlignment, flipAlignment = _evaluate_flipAlignment === void 0 ? true : _evaluate_flipAlignment, detectOverflowOptions = _object_without_properties(_evaluate, [
                                "mainAxis",
                                "crossAxis",
                                "fallbackPlacements",
                                "fallbackStrategy",
                                "fallbackAxisSideDirection",
                                "flipAlignment"
                            ]);
                            // If a reset by the arrow was caused due to an alignment offset being
                            // added, we should skip any logic now since `flip()` has already done its
                            // work.
                            // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643
                            if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
                                return [
                                    2,
                                    {}
                                ];
                            }
                            side = getSide(placement);
                            isBasePlacement = getSide(initialPlacement) === initialPlacement;
                            return [
                                4,
                                platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)
                            ];
                        case 1:
                            rtl = _state.sent();
                            fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [
                                getOppositePlacement(initialPlacement)
                            ] : getExpandedPlacements(initialPlacement));
                            if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
                                ;
                                (_fallbackPlacements = fallbackPlacements).push.apply(_fallbackPlacements, _to_consumable_array(getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl)));
                            }
                            placements = [
                                initialPlacement
                            ].concat(_to_consumable_array(fallbackPlacements));
                            return [
                                4,
                                detectOverflow(state, detectOverflowOptions)
                            ];
                        case 2:
                            overflow = _state.sent();
                            overflows = [];
                            overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
                            if (checkMainAxis) {
                                overflows.push(overflow[side]);
                            }
                            if (checkCrossAxis) {
                                sides = getAlignmentSides(placement, rects, rtl);
                                overflows.push(overflow[sides[0]], overflow[sides[1]]);
                            }
                            overflowsData = _to_consumable_array(overflowsData).concat([
                                {
                                    placement: placement,
                                    overflows: overflows
                                }
                            ]);
                            // One or more sides is overflowing.
                            if (!overflows.every(function(side) {
                                return side <= 0;
                            })) {
                                ;
                                nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
                                nextPlacement = placements[nextIndex];
                                if (nextPlacement) {
                                    // Try next placement and re-run the lifecycle.
                                    return [
                                        2,
                                        {
                                            data: {
                                                index: nextIndex,
                                                overflows: overflowsData
                                            },
                                            reset: {
                                                placement: nextPlacement
                                            }
                                        }
                                    ];
                                }
                                // First, find the candidates that fit on the mainAxis side of overflow,
                                // then find the placement that fits the best on the main crossAxis side.
                                resetPlacement = (_overflowsData$filter = overflowsData.filter(function(d) {
                                    return d.overflows[0] <= 0;
                                }).sort(function(a, b) {
                                    return a.overflows[1] - b.overflows[1];
                                })[0]) == null ? void 0 : _overflowsData$filter.placement;
                                // Otherwise fallback.
                                if (!resetPlacement) {
                                    switch(fallbackStrategy){
                                        case "bestFit":
                                            {
                                                ;
                                                placement1 = (_overflowsData$map$so = overflowsData.map(function(d) {
                                                    return [
                                                        d.placement,
                                                        d.overflows.filter(function(overflow) {
                                                            return overflow > 0;
                                                        }).reduce(function(acc, overflow) {
                                                            return acc + overflow;
                                                        }, 0)
                                                    ];
                                                }).sort(function(a, b) {
                                                    return a[1] - b[1];
                                                })[0]) == null ? void 0 : _overflowsData$map$so[0];
                                                if (placement1) {
                                                    resetPlacement = placement1;
                                                }
                                                break;
                                            }
                                        case "initialPlacement":
                                            resetPlacement = initialPlacement;
                                            break;
                                    }
                                }
                                if (placement !== resetPlacement) {
                                    return [
                                        2,
                                        {
                                            reset: {
                                                placement: resetPlacement
                                            }
                                        }
                                    ];
                                }
                            }
                            return [
                                2,
                                {}
                            ];
                    }
                });
            })();
        }
    };
};
function getSideOffsets(overflow, rect) {
    return {
        top: overflow.top - rect.height,
        right: overflow.right - rect.width,
        bottom: overflow.bottom - rect.height,
        left: overflow.left - rect.width
    };
}
function isAnySideFullyClipped(overflow) {
    return sides.some(function(side) {
        return overflow[side] >= 0;
    });
}
/**
 * Provides data to hide the floating element in applicable situations, such as
 * when it is not in the same clipping context as the reference element.
 * @see https://floating-ui.com/docs/hide
 */ var hide = function hide(options) {
    if (options === void 0) {
        options = {};
    }
    return {
        name: "hide",
        options: options,
        fn: function fn(state) {
            return _async_to_generator(function() {
                var rects, _evaluate, _evaluate_strategy, strategy, detectOverflowOptions, overflow, offsets, overflow1, offsets1;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            rects = state.rects;
                            _evaluate = evaluate(options, state), _evaluate_strategy = _evaluate.strategy, strategy = _evaluate_strategy === void 0 ? "referenceHidden" : _evaluate_strategy, detectOverflowOptions = _object_without_properties(_evaluate, [
                                "strategy"
                            ]);
                            switch(strategy){
                                case "referenceHidden":
                                    return [
                                        3,
                                        1
                                    ];
                                case "escaped":
                                    return [
                                        3,
                                        3
                                    ];
                            }
                            return [
                                3,
                                5
                            ];
                        case 1:
                            return [
                                4,
                                detectOverflow(state, _object_spread_props(_object_spread({}, detectOverflowOptions), {
                                    elementContext: "reference"
                                }))
                            ];
                        case 2:
                            overflow = _state.sent();
                            offsets = getSideOffsets(overflow, rects.reference);
                            return [
                                2,
                                {
                                    data: {
                                        referenceHiddenOffsets: offsets,
                                        referenceHidden: isAnySideFullyClipped(offsets)
                                    }
                                }
                            ];
                        case 3:
                            return [
                                4,
                                detectOverflow(state, _object_spread_props(_object_spread({}, detectOverflowOptions), {
                                    altBoundary: true
                                }))
                            ];
                        case 4:
                            overflow1 = _state.sent();
                            offsets1 = getSideOffsets(overflow1, rects.floating);
                            return [
                                2,
                                {
                                    data: {
                                        escapedOffsets: offsets1,
                                        escaped: isAnySideFullyClipped(offsets1)
                                    }
                                }
                            ];
                        case 5:
                            {
                                return [
                                    2,
                                    {}
                                ];
                            }
                            _state.label = 6;
                        case 6:
                            return [
                                2
                            ];
                    }
                });
            })();
        }
    };
};
function getBoundingRect(rects) {
    var minX = min.apply(void 0, _to_consumable_array(rects.map(function(rect) {
        return rect.left;
    })));
    var minY = min.apply(void 0, _to_consumable_array(rects.map(function(rect) {
        return rect.top;
    })));
    var maxX = max.apply(void 0, _to_consumable_array(rects.map(function(rect) {
        return rect.right;
    })));
    var maxY = max.apply(void 0, _to_consumable_array(rects.map(function(rect) {
        return rect.bottom;
    })));
    return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
    };
}
function getRectsByLine(rects) {
    var sortedRects = rects.slice().sort(function(a, b) {
        return a.y - b.y;
    });
    var groups = [];
    var prevRect = null;
    for(var i = 0; i < sortedRects.length; i++){
        var rect = sortedRects[i];
        if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {
            groups.push([
                rect
            ]);
        } else {
            groups[groups.length - 1].push(rect);
        }
        prevRect = rect;
    }
    return groups.map(function(rect) {
        return rectToClientRect(getBoundingRect(rect));
    });
}
/**
 * Provides improved positioning for inline reference elements that can span
 * over multiple lines, such as hyperlinks or range selections.
 * @see https://floating-ui.com/docs/inline
 */ var inline = function inline(options) {
    if (options === void 0) {
        options = {};
    }
    return {
        name: "inline",
        options: options,
        fn: function fn(state) {
            return _async_to_generator(function() {
                var placement, elements, rects, platform, strategy, _evaluate, _evaluate_padding, padding, x, y, nativeClientRects, _, clientRects, fallback, paddingObject, resetRects;
                function getBoundingClientRect() {
                    // There are two rects and they are disjoined.
                    if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {
                        // Find the first rect in which the point is fully inside.
                        return clientRects.find(function(rect) {
                            return x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom;
                        }) || fallback;
                    }
                    // There are 2 or more connected rects.
                    if (clientRects.length >= 2) {
                        if (getSideAxis(placement) === "y") {
                            var firstRect = clientRects[0];
                            var lastRect = clientRects[clientRects.length - 1];
                            var isTop = getSide(placement) === "top";
                            var top = firstRect.top;
                            var bottom = lastRect.bottom;
                            var left = isTop ? firstRect.left : lastRect.left;
                            var right = isTop ? firstRect.right : lastRect.right;
                            var width = right - left;
                            var height = bottom - top;
                            return {
                                top: top,
                                bottom: bottom,
                                left: left,
                                right: right,
                                width: width,
                                height: height,
                                x: left,
                                y: top
                            };
                        }
                        var isLeftSide = getSide(placement) === "left";
                        var maxRight = max.apply(void 0, _to_consumable_array(clientRects.map(function(rect) {
                            return rect.right;
                        })));
                        var minLeft = min.apply(void 0, _to_consumable_array(clientRects.map(function(rect) {
                            return rect.left;
                        })));
                        var measureRects = clientRects.filter(function(rect) {
                            return isLeftSide ? rect.left === minLeft : rect.right === maxRight;
                        });
                        var top1 = measureRects[0].top;
                        var bottom1 = measureRects[measureRects.length - 1].bottom;
                        var left1 = minLeft;
                        var right1 = maxRight;
                        var width1 = right1 - left1;
                        var height1 = bottom1 - top1;
                        return {
                            top: top1,
                            bottom: bottom1,
                            left: left1,
                            right: right1,
                            width: width1,
                            height: height1,
                            x: left1,
                            y: top1
                        };
                    }
                    return fallback;
                }
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            placement = state.placement, elements = state.elements, rects = state.rects, platform = state.platform, strategy = state.strategy;
                            // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a
                            // ClientRect's bounds, despite the event listener being triggered. A
                            // padding of 2 seems to handle this issue.
                            _evaluate = evaluate(options, state), _evaluate_padding = _evaluate.padding, padding = _evaluate_padding === void 0 ? 2 : _evaluate_padding, x = _evaluate.x, y = _evaluate.y;
                            _ = Array.from;
                            return [
                                4,
                                platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference)
                            ];
                        case 1:
                            nativeClientRects = _.apply(Array, [
                                _state.sent() || []
                            ]);
                            clientRects = getRectsByLine(nativeClientRects);
                            fallback = rectToClientRect(getBoundingRect(nativeClientRects));
                            paddingObject = getPaddingObject(padding);
                            return [
                                4,
                                platform.getElementRects({
                                    reference: {
                                        getBoundingClientRect: getBoundingClientRect
                                    },
                                    floating: elements.floating,
                                    strategy: strategy
                                })
                            ];
                        case 2:
                            resetRects = _state.sent();
                            if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
                                return [
                                    2,
                                    {
                                        reset: {
                                            rects: resetRects
                                        }
                                    }
                                ];
                            }
                            return [
                                2,
                                {}
                            ];
                    }
                });
            })();
        }
    };
};
function convertValueToCoords(state, options) {
    return _convertValueToCoords.apply(this, arguments);
}
function _convertValueToCoords() {
    _convertValueToCoords = // For type backwards-compatibility, the `OffsetOptions` type was also
    // Derivable.
    _async_to_generator(function(state, options) {
        var placement, platform, elements, rtl, side, alignment, isVertical, mainAxisMulti, crossAxisMulti, rawValue, _ref, mainAxis, crossAxis, alignmentAxis;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    placement = state.placement, platform = state.platform, elements = state.elements;
                    return [
                        4,
                        platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)
                    ];
                case 1:
                    rtl = _state.sent();
                    side = getSide(placement);
                    alignment = getAlignment(placement);
                    isVertical = getSideAxis(placement) === "y";
                    mainAxisMulti = [
                        "left",
                        "top"
                    ].includes(side) ? -1 : 1;
                    crossAxisMulti = rtl && isVertical ? -1 : 1;
                    rawValue = evaluate(options, state);
                    _ref = typeof rawValue === "number" ? {
                        mainAxis: rawValue,
                        crossAxis: 0,
                        alignmentAxis: null
                    } : _object_spread({
                        mainAxis: 0,
                        crossAxis: 0,
                        alignmentAxis: null
                    }, rawValue), mainAxis = _ref.mainAxis, crossAxis = _ref.crossAxis, alignmentAxis = _ref.alignmentAxis;
                    if (alignment && typeof alignmentAxis === "number") {
                        crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
                    }
                    return [
                        2,
                        isVertical ? {
                            x: crossAxis * crossAxisMulti,
                            y: mainAxis * mainAxisMulti
                        } : {
                            x: mainAxis * mainAxisMulti,
                            y: crossAxis * crossAxisMulti
                        }
                    ];
            }
        });
    });
    return _convertValueToCoords.apply(this, arguments);
}
/**
 * Modifies the placement by translating the floating element along the
 * specified axes.
 * A number (shorthand for `mainAxis` or distance), or an axes configuration
 * object may be passed.
 * @see https://floating-ui.com/docs/offset
 */ var offset = function offset(options) {
    if (options === void 0) {
        options = 0;
    }
    return {
        name: "offset",
        options: options,
        fn: function fn(state) {
            return _async_to_generator(function() {
                var _middlewareData$offse, _middlewareData$arrow, x, y, placement, middlewareData, diffCoords;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            x = state.x, y = state.y, placement = state.placement, middlewareData = state.middlewareData;
                            return [
                                4,
                                convertValueToCoords(state, options)
                            ];
                        case 1:
                            diffCoords = _state.sent();
                            // If the placement is the same and the arrow caused an alignment offset
                            // then we don't need to change the positioning coordinates.
                            if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
                                return [
                                    2,
                                    {}
                                ];
                            }
                            return [
                                2,
                                {
                                    x: x + diffCoords.x,
                                    y: y + diffCoords.y,
                                    data: _object_spread_props(_object_spread({}, diffCoords), {
                                        placement: placement
                                    })
                                }
                            ];
                    }
                });
            })();
        }
    };
};
/**
 * Optimizes the visibility of the floating element by shifting it in order to
 * keep it in view when it will overflow the clipping boundary.
 * @see https://floating-ui.com/docs/shift
 */ var shift = function shift(options) {
    if (options === void 0) {
        options = {};
    }
    return {
        name: "shift",
        options: options,
        fn: function fn(state) {
            return _async_to_generator(function() {
                var x, y, placement, _evaluate, tmp, checkMainAxis, tmp1, checkCrossAxis, _evaluate_limiter, limiter, detectOverflowOptions, coords, overflow, crossAxis, mainAxis, mainAxisCoord, crossAxisCoord, minSide, maxSide, min, max, minSide1, maxSide1, min1, max1, _obj, limitedCoords;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            x = state.x, y = state.y, placement = state.placement;
                            _evaluate = evaluate(options, state), tmp = _evaluate.mainAxis, checkMainAxis = tmp === void 0 ? true : tmp, tmp1 = _evaluate.crossAxis, checkCrossAxis = tmp1 === void 0 ? false : tmp1, _evaluate_limiter = _evaluate.limiter, limiter = _evaluate_limiter === void 0 ? {
                                fn: function(_ref) {
                                    var x = _ref.x, y = _ref.y;
                                    return {
                                        x: x,
                                        y: y
                                    };
                                }
                            } : _evaluate_limiter, detectOverflowOptions = _object_without_properties(_evaluate, [
                                "mainAxis",
                                "crossAxis",
                                "limiter"
                            ]);
                            coords = {
                                x: x,
                                y: y
                            };
                            return [
                                4,
                                detectOverflow(state, detectOverflowOptions)
                            ];
                        case 1:
                            overflow = _state.sent();
                            crossAxis = getSideAxis(getSide(placement));
                            mainAxis = getOppositeAxis(crossAxis);
                            mainAxisCoord = coords[mainAxis];
                            crossAxisCoord = coords[crossAxis];
                            if (checkMainAxis) {
                                minSide = mainAxis === "y" ? "top" : "left";
                                maxSide = mainAxis === "y" ? "bottom" : "right";
                                min = mainAxisCoord + overflow[minSide];
                                max = mainAxisCoord - overflow[maxSide];
                                mainAxisCoord = clamp(min, mainAxisCoord, max);
                            }
                            if (checkCrossAxis) {
                                minSide1 = crossAxis === "y" ? "top" : "left";
                                maxSide1 = crossAxis === "y" ? "bottom" : "right";
                                min1 = crossAxisCoord + overflow[minSide1];
                                max1 = crossAxisCoord - overflow[maxSide1];
                                crossAxisCoord = clamp(min1, crossAxisCoord, max1);
                            }
                            limitedCoords = limiter.fn(_object_spread_props(_object_spread({}, state), (_obj = {}, _define_property(_obj, mainAxis, mainAxisCoord), _define_property(_obj, crossAxis, crossAxisCoord), _obj)));
                            return [
                                2,
                                _object_spread_props(_object_spread({}, limitedCoords), {
                                    data: {
                                        x: limitedCoords.x - x,
                                        y: limitedCoords.y - y
                                    }
                                })
                            ];
                    }
                });
            })();
        }
    };
};
/**
 * Built-in `limiter` that will stop `shift()` at a certain point.
 */ var limitShift = function limitShift(options) {
    if (options === void 0) {
        options = {};
    }
    return {
        options: options,
        fn: function fn(state) {
            var x = state.x, y = state.y, placement = state.placement, rects = state.rects, middlewareData = state.middlewareData;
            var _evaluate = evaluate(options, state), _evaluate_offset = _evaluate.offset, offset = _evaluate_offset === void 0 ? 0 : _evaluate_offset, tmp = _evaluate.mainAxis, checkMainAxis = tmp === void 0 ? true : tmp, tmp1 = _evaluate.crossAxis, checkCrossAxis = tmp1 === void 0 ? true : tmp1;
            var coords = {
                x: x,
                y: y
            };
            var crossAxis = getSideAxis(placement);
            var mainAxis = getOppositeAxis(crossAxis);
            var mainAxisCoord = coords[mainAxis];
            var crossAxisCoord = coords[crossAxis];
            var rawOffset = evaluate(offset, state);
            var computedOffset = typeof rawOffset === "number" ? {
                mainAxis: rawOffset,
                crossAxis: 0
            } : _object_spread({
                mainAxis: 0,
                crossAxis: 0
            }, rawOffset);
            if (checkMainAxis) {
                var len = mainAxis === "y" ? "height" : "width";
                var limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
                var limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
                if (mainAxisCoord < limitMin) {
                    mainAxisCoord = limitMin;
                } else if (mainAxisCoord > limitMax) {
                    mainAxisCoord = limitMax;
                }
            }
            if (checkCrossAxis) {
                var _middlewareData$offse, _middlewareData$offse2;
                var len1 = mainAxis === "y" ? "width" : "height";
                var isOriginSide = [
                    "top",
                    "left"
                ].includes(getSide(placement));
                var limitMin1 = rects.reference[crossAxis] - rects.floating[len1] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
                var limitMax1 = rects.reference[crossAxis] + rects.reference[len1] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
                if (crossAxisCoord < limitMin1) {
                    crossAxisCoord = limitMin1;
                } else if (crossAxisCoord > limitMax1) {
                    crossAxisCoord = limitMax1;
                }
            }
            var _obj;
            return _obj = {}, _define_property(_obj, mainAxis, mainAxisCoord), _define_property(_obj, crossAxis, crossAxisCoord), _obj;
        }
    };
};
/**
 * Provides data that allows you to change the size of the floating element —
 * for instance, prevent it from overflowing the clipping boundary or match the
 * width of the reference element.
 * @see https://floating-ui.com/docs/size
 */ var size = function size(options) {
    if (options === void 0) {
        options = {};
    }
    return {
        name: "size",
        options: options,
        fn: function fn(state) {
            return _async_to_generator(function() {
                var placement, rects, platform, elements, _evaluate, _evaluate_apply, apply, detectOverflowOptions, overflow, side, alignment, isYAxis, _rects_floating, width, height, heightSide, widthSide, overflowAvailableHeight, overflowAvailableWidth, noShift, availableHeight, availableWidth, maximumClippingWidth, maximumClippingHeight, xMin, xMax, yMin, yMax, nextDimensions;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            placement = state.placement, rects = state.rects, platform = state.platform, elements = state.elements;
                            _evaluate = evaluate(options, state), _evaluate_apply = _evaluate.apply, apply = _evaluate_apply === void 0 ? function() {} : _evaluate_apply, detectOverflowOptions = _object_without_properties(_evaluate, [
                                "apply"
                            ]);
                            return [
                                4,
                                detectOverflow(state, detectOverflowOptions)
                            ];
                        case 1:
                            overflow = _state.sent();
                            side = getSide(placement);
                            alignment = getAlignment(placement);
                            isYAxis = getSideAxis(placement) === "y";
                            _rects_floating = rects.floating, width = _rects_floating.width, height = _rects_floating.height;
                            if (!(side === "top" || side === "bottom")) return [
                                3,
                                3
                            ];
                            heightSide = side;
                            return [
                                4,
                                platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)
                            ];
                        case 2:
                            widthSide = alignment === (_state.sent() ? "start" : "end") ? "left" : "right";
                            return [
                                3,
                                4
                            ];
                        case 3:
                            widthSide = side;
                            heightSide = alignment === "end" ? "top" : "bottom";
                            _state.label = 4;
                        case 4:
                            overflowAvailableHeight = height - overflow[heightSide];
                            overflowAvailableWidth = width - overflow[widthSide];
                            noShift = !state.middlewareData.shift;
                            availableHeight = overflowAvailableHeight;
                            availableWidth = overflowAvailableWidth;
                            if (isYAxis) {
                                maximumClippingWidth = width - overflow.left - overflow.right;
                                availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
                            } else {
                                maximumClippingHeight = height - overflow.top - overflow.bottom;
                                availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
                            }
                            if (noShift && !alignment) {
                                xMin = max(overflow.left, 0);
                                xMax = max(overflow.right, 0);
                                yMin = max(overflow.top, 0);
                                yMax = max(overflow.bottom, 0);
                                if (isYAxis) {
                                    availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
                                } else {
                                    availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
                                }
                            }
                            return [
                                4,
                                apply(_object_spread_props(_object_spread({}, state), {
                                    availableWidth: availableWidth,
                                    availableHeight: availableHeight
                                }))
                            ];
                        case 5:
                            _state.sent();
                            return [
                                4,
                                platform.getDimensions(elements.floating)
                            ];
                        case 6:
                            nextDimensions = _state.sent();
                            if (width !== nextDimensions.width || height !== nextDimensions.height) {
                                return [
                                    2,
                                    {
                                        reset: {
                                            rects: true
                                        }
                                    }
                                ];
                            }
                            return [
                                2,
                                {}
                            ];
                    }
                });
            })();
        }
    };
};
export { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };
