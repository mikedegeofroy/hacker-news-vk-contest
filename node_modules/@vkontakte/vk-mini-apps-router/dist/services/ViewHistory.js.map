{"version":3,"file":"ViewHistory.js","sourceRoot":"","sources":["../../src/services/ViewHistory.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action, RouterState } from '@remix-run/router';\nimport { getRouteContext } from '../utils/utils';\nimport { STATE_KEY_SHOW_POPOUT } from '../const';\nimport { ViewNavigationRecord } from './ViewNavigationRecord.type';\n\nexport class ViewHistory {\n  private history: ViewNavigationRecord[] = [];\n  private positionInternal = -1;\n\n  updateNavigation(state: RouterState): void {\n    const record = this.getViewRecordFromState(state);\n    if (!record) {\n      return;\n    }\n    switch (state.historyAction) {\n      case Action.Push:\n        this.push(record);\n        break;\n      case Action.Pop:\n        if (this.hasKey(record.locationKey)) {\n          this.pop(record);\n        } else {\n          // В случае, если пользователь введет в адресную строку новый хэш, мы поймаем POP событие с новой локацией.\n          this.push(record);\n        }\n        break;\n      case Action.Replace:\n        this.replace(record);\n        break;\n    }\n  }\n\n  get isFirstPage(): boolean {\n    return this.positionInternal < 1;\n  }\n\n  get panelsHistory(): string[] {\n    if (this.positionInternal < 0) {\n      return [];\n    }\n    const currentView = this.history[this.positionInternal].view;\n    const reversedClone = this.history.slice(0, this.positionInternal + 1).reverse();\n    const rightLimit = reversedClone.findIndex((item) => item.view !== currentView);\n    const historyCopy = reversedClone\n      .slice(0, rightLimit > -1 ? rightLimit : reversedClone.length)\n      .filter((item) => !item.modal && !item.popout)\n      .reverse();\n    return historyCopy.map(({ panel }) => panel);\n  }\n\n  get position(): number {\n    return this.positionInternal;\n  }\n\n  isPopForward(historyAction: Action, key: string): boolean {\n    const newPosition = this.history.findIndex(({ locationKey }) => locationKey === key);\n    return historyAction === Action.Pop && newPosition > this.position;\n  }\n\n  isPopBackward(historyAction: Action, key: string): boolean {\n    const newPosition = this.history.findIndex(({ locationKey }) => locationKey === key);\n    return historyAction === Action.Pop && newPosition <= this.position;\n  }\n\n  resetHistory() {\n    this.positionInternal = -1;\n    this.history = [];\n  }\n\n  private push(record: ViewNavigationRecord): void {\n    this.history = this.history.slice(0, this.positionInternal + 1);\n    this.history.push(record);\n    this.positionInternal = this.history.length - 1;\n  }\n\n  private replace(record: ViewNavigationRecord): void {\n    this.history[this.positionInternal] = record;\n  }\n\n  private pop(record: ViewNavigationRecord): void {\n    this.positionInternal = this.history.findIndex(\n      ({ locationKey }) => locationKey === record.locationKey,\n    );\n  }\n\n  private hasKey(key: string): boolean {\n    return Boolean(this.history.find(({ locationKey }) => locationKey === key));\n  }\n\n  private getViewRecordFromState(state: RouterState): ViewNavigationRecord | undefined {\n    const context = getRouteContext(state);\n    if (!context.match) {\n      return undefined;\n    }\n    const { route } = context.match;\n    return {\n      view: route.view,\n      panel: route.panel,\n      modal: 'modal' in route ? route.modal : undefined,\n      popout: state.location.state?.[STATE_KEY_SHOW_POPOUT],\n      locationKey: state.location.key,\n    };\n  }\n}\n"]}