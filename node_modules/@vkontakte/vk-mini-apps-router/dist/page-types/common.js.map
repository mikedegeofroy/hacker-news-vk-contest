{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/page-types/common.ts"],"names":[],"mappings":"AAqCA,MAAM,UAAU,SAAS,CAAmC,MAAW,EAAE,GAAM;IAC7E,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QACnD,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;YAC9B,MAAM,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC;YAC/B,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAsB,CAAC;SACjH;KACF;IACD,OAAO,GAAwB,CAAC;AAClC,CAAC","sourcesContent":["export type WithChildren<Target extends {}, Children extends {}> = Target & {\n  [key in keyof Children]: Children[key];\n};\n\nexport interface HasId<T extends string = string> {\n  id: T;\n}\n\nexport interface HasChildren<T extends {}> {\n  get children(): T[];\n}\n\nexport interface RepresentsRoutes<T> {\n  getRoutes(): T[];\n}\n\nexport type GetId<Obj extends HasId> = Obj extends { id: infer X } ? X : never;\n\nexport type AddChild<Target extends {}, V extends HasId> = WithChildren<Target, { [key in UniqueKey<Target, GetId<V>>]: V }>;\n\nexport interface Page {\n  path: string;\n  hasParams: false;\n}\n\nexport type WithParams<T extends string> = {\n  paramKeys: readonly T[];\n};\n\nexport interface PageWithParams<T extends string> extends WithParams<T> {\n  path: string;\n  hasParams: true;\n}\n\ntype UniqueKey<Obj extends {}, K extends string> = '' extends K ? K :\n  (K extends keyof Obj ? (`${K}_0` extends keyof Obj ? `${UniqueKey<Obj, `${K}_0`>}` : `${K}_0`) : K);\n\nexport function uniqueKey<Obj extends {}, K extends string>(target: Obj, key: K): UniqueKey<Obj, K> {\n  if (key && key.length && typeof target === 'object') {\n    if (target.hasOwnProperty(key)) {\n      const extendedKey = `${key}_0`;\n      return (target.hasOwnProperty(extendedKey) ? uniqueKey(target, extendedKey) : extendedKey) as UniqueKey<Obj, K>;\n    }\n  }\n  return key as UniqueKey<Obj, K>;\n}\n"]}