import { uniqueKey } from './common';
class BasePanelPage {
    constructor(id, path, modals) {
        this.id = id;
        this.path = path;
        this.modals = modals;
        modals.forEach((modal) => {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            this[uniqueKey(this, modal.id)] = modal;
        });
    }
    getRoutes() {
        return this.modals
            .map((modalOrTab) => modalOrTab.getRoutes())
            .flat()
            .map((route) => ({ ...route, panel: this.id }))
            .concat({
            path: this.path,
            panel: this.id,
        });
    }
}
export class PanelPage extends BasePanelPage {
    constructor(id, path, modals = []) {
        super(id, path, modals);
        this.path = path;
        this.hasParams = false;
    }
}
export class PanelPageWithParams extends BasePanelPage {
    constructor(id, path, paramKeys, modals = []) {
        super(id, path, modals);
        this.id = id;
        this.path = path;
        this.paramKeys = paramKeys;
        this.hasParams = true;
    }
}
export function createPanel(id, path, modals, paramKeys) {
    if (paramKeys) {
        return new PanelPageWithParams(id, path, paramKeys, modals ?? []);
    }
    return new PanelPage(id, path, modals ?? []);
}
//# sourceMappingURL=PanelPage.js.map