{"version":3,"file":"useSearchParams.js","sourceRoot":"","sources":["../../src/hooks/useSearchParams.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,SAAS,CAAC;AAEtC,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AACjE,OAAO,EACL,kBAAkB,EAClB,0BAA0B,GAE3B,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAczC;;;GAGG;AACH,MAAM,UAAU,eAAe,CAC7B,WAAiC;IAEjC,OAAO,CACL,OAAO,eAAe,KAAK,WAAW,EACtC,uEAAuE;QACrE,mEAAmE;QACnE,wDAAwD;QACxD,gDAAgD;QAChD,qEAAqE;QACrE,wEAAwE;QACxE,wEAAwE;QACxE,OAAO,CACV,CAAC;IAEF,IAAI,sBAAsB,GAAG,MAAM,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;IACrE,IAAI,qBAAqB,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IAE1C,IAAI,QAAQ,GAAG,WAAW,EAAE,CAAC;IAC7B,IAAI,YAAY,GAAG,OAAO,CACxB,GAAG,EAAE;IACH,uEAAuE;IACvE,0EAA0E;IAC1E,qEAAqE;IACrE,0BAA0B,CACxB,QAAQ,CAAC,MAAM,EACf,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,sBAAsB,CAAC,OAAO,CACtE,EACH,CAAC,QAAQ,CAAC,MAAM,CAAC,CAClB,CAAC;IAEF,IAAI,MAAM,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC;IAC9C,IAAI,eAAe,GAAG,WAAW,CAC/B,CAAC,QAAQ,EAAE,eAAe,EAAE,EAAE;QAC5B,MAAM,eAAe,GAAG,kBAAkB,CACxC,OAAO,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ,CACnE,CAAC;QACF,qBAAqB,CAAC,OAAO,GAAG,IAAI,CAAC;QACrC,MAAM,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,QAAQ,IAAI,eAAe,EAAE,EAAE,eAAe,CAAC,CAAC;IAC9E,CAAC,EACD,CAAC,MAAM,EAAE,YAAY,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAC1C,CAAC;IAEF,OAAO,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;AACzC,CAAC","sourcesContent":["import { useLocation } from './hooks';\nimport { RelativeRoutingType } from '@remix-run/router';\nimport { useCallback, useContext, useMemo, useRef } from 'react';\nimport {\n  createSearchParams,\n  getSearchParamsForLocation,\n  URLSearchParamsInit,\n} from '../utils/createSearchParams';\nimport { RouterContext } from '../contexts';\nimport { warning } from '../utils/utils';\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\nexport type SetURLSearchParams = (\n  nextInit?: URLSearchParamsInit | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions,\n) => void;\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit,\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== 'undefined',\n    'You cannot use the `useSearchParams` hook in a browser that does not ' +\n      'support the URLSearchParams API. If you need to support Internet ' +\n      'Explorer 11, we recommend you load a polyfill such as ' +\n      'https://github.com/ungap/url-search-params\\n\\n' +\n      \"If you're unsure how to load polyfills, we recommend you check out \" +\n      'https://polyfill.io/v3/ which provides some recommendations about how ' +\n      'to load polyfills only for users that need them, instead of for every ' +\n      'user.',\n  );\n\n  let defaultSearchParamsRef = useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = useRef(false);\n\n  let location = useLocation();\n  let searchParams = useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current,\n      ),\n    [location.search],\n  );\n\n  let router = useContext(RouterContext).router;\n  let setSearchParams = useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === 'function' ? nextInit(searchParams) : nextInit,\n      );\n      hasSetSearchParamsRef.current = true;\n      router.navigate(`${location.pathname}?${newSearchParams}`, navigateOptions);\n    },\n    [router, searchParams, location.pathname],\n  );\n\n  return [searchParams, setSearchParams];\n}\n"]}