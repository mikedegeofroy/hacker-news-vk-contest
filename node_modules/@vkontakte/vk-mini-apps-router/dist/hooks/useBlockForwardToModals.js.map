{"version":3,"file":"useBlockForwardToModals.js","sourceRoot":"","sources":["../../src/hooks/useBlockForwardToModals.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAElC,OAAO,EACL,kCAAkC,EAClC,oBAAoB,EACpB,qBAAqB,GACtB,MAAM,UAAU,CAAC;AAIlB,MAAM,aAAa,GAAa,EAAE,CAAC;AAEnC,MAAM,UAAU,uBAAuB,CACrC,MAAc,EACd,WAAwB,EACxB,cAA8B;IAE9B,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,eAAe,GAAoB,CAAC,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE;YAC3E,MAAM,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC,aAAa,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;YAC/E,MAAM,YAAY,GAAG,YAAY,IAAI,YAAY,CAAC,GAAG,KAAK,SAAS,CAAC;YACpE,OAAO,OAAO,CAAC,YAAY,IAAI,YAAY,CAAC,KAAK,EAAE,CAAC,kCAAkC,CAAC,CAAC,CAAC;QAC3F,CAAC,CAAC;QACF,MAAM,UAAU,GAAG,cAAc,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAEzD,OAAO,GAAG,EAAE,CAAC,UAAU,EAAE,CAAC;IAC5B,CAAC,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC;IAElC,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;YACzB,MAAM,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC/B,MAAM,aAAa,GAAG,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;YAC1E,IACE,aAAa;gBACb,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,kCAAkC,CAAC;gBAC1D,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,EAC5B;gBACA,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxB,MAAM,YAAY,GAAG,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBACjD,IAAI,YAAY,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,EAAE;oBAC5C,YAAY,CAAC,GAAG,GAAG,EAAE,GAAG,YAAY,CAAC,GAAG,EAAE,CAAC;oBAC3C,OAAO,YAAY,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,CAAC;oBAChD,OAAO,YAAY,CAAC,GAAG,EAAE,CAAC,kCAAkC,CAAC,CAAC;iBAC/D;gBACD,IAAI,YAAY,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,EAAE;oBAC7C,YAAY,CAAC,GAAG,GAAG,EAAE,GAAG,YAAY,CAAC,GAAG,EAAE,CAAC;oBAC3C,OAAO,YAAY,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,CAAC;oBACjD,OAAO,YAAY,CAAC,GAAG,EAAE,CAAC,kCAAkC,CAAC,CAAC;iBAC/D;gBACD,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;gBAC9C,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAC5B,aAAa,CAAC,MAAM,CAClB,aAAa,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,GAAG,CAAC,EAC/C,CAAC,CACF,CACF,CAAC;aACH;QACH,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;AAC5B,CAAC","sourcesContent":["import { useEffect } from 'react';\nimport { BlockerFunction, Router } from '@remix-run/router';\nimport {\n  STATE_KEY_BLOCK_FORWARD_NAVIGATION,\n  STATE_KEY_SHOW_MODAL,\n  STATE_KEY_SHOW_POPOUT,\n} from '../const';\nimport { ViewHistory } from '../services/ViewHistory';\nimport { RouteNavigator } from '../services/RouteNavigator.type';\n\nconst processedKeys: string[] = [];\n\nexport function useBlockForwardToModals(\n  router: Router,\n  viewHistory: ViewHistory,\n  routeNavigator: RouteNavigator,\n) {\n  useEffect(() => {\n    const blockerFunction: BlockerFunction = ({ historyAction, nextLocation }) => {\n      const isPopForward = viewHistory.isPopForward(historyAction, nextLocation.key);\n      const blockEnabled = isPopForward && nextLocation.key !== 'default';\n      return Boolean(blockEnabled && nextLocation.state?.[STATE_KEY_BLOCK_FORWARD_NAVIGATION]);\n    };\n    const unbblocker = routeNavigator.block(blockerFunction);\n\n    return () => unbblocker();\n  }, [routeNavigator, viewHistory]);\n\n  useEffect(() => {\n    router.subscribe((state) => {\n      const key = state.location.key;\n      const isPopBackward = viewHistory.isPopBackward(state.historyAction, key);\n      if (\n        isPopBackward &&\n        state.location.state?.[STATE_KEY_BLOCK_FORWARD_NAVIGATION] &&\n        !processedKeys.includes(key)\n      ) {\n        processedKeys.push(key);\n        const replaceState = { ...window.history.state };\n        if (replaceState.usr?.[STATE_KEY_SHOW_MODAL]) {\n          replaceState.usr = { ...replaceState.usr };\n          delete replaceState.usr?.[STATE_KEY_SHOW_MODAL];\n          delete replaceState.usr?.[STATE_KEY_BLOCK_FORWARD_NAVIGATION];\n        }\n        if (replaceState.usr?.[STATE_KEY_SHOW_POPOUT]) {\n          replaceState.usr = { ...replaceState.usr };\n          delete replaceState.usr?.[STATE_KEY_SHOW_POPOUT];\n          delete replaceState.usr?.[STATE_KEY_BLOCK_FORWARD_NAVIGATION];\n        }\n        window.history.replaceState(replaceState, '');\n        router.navigate(-1).then(() =>\n          processedKeys.splice(\n            processedKeys.findIndex((name) => name === key),\n            1,\n          ),\n        );\n      }\n    });\n  }, [router, viewHistory]);\n}\n"]}