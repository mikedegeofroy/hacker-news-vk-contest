{"version":3,"file":"useResolvedPath.js","sourceRoot":"","sources":["../../src/hooks/useResolvedPath.ts"],"names":[],"mappings":"AAAA,OAAO,EAA6B,SAAS,EAA0B,MAAM,mBAAmB,CAAC;AACjG,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAC5C,OAAO,EAAE,WAAW,EAAE,MAAM,SAAS,CAAC;AAEtC;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,SAAS,0BAA0B,CACjC,OAAY;IAEZ,OAAO,OAAO,CAAC,MAAM,CACnB,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CACnF,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAC7B,EAAM,EACN,EAAE,QAAQ,KAAyC,EAAE;IAErD,MAAM,EACJ,MAAM,EAAE,EACN,KAAK,EAAE,EAAE,OAAO,EAAE,GACnB,GACF,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;IAC9B,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,GAAG,WAAW,EAAE,CAAC;IAErD,MAAM,kBAAkB,GAAG,IAAI,CAAC,SAAS,CACvC,0BAA0B,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,CACvE,CAAC;IAEF,OAAO,OAAO,CACZ,GAAG,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE,gBAAgB,EAAE,QAAQ,KAAK,MAAM,CAAC,EAC1F,CAAC,EAAE,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CACrD,CAAC;AACJ,CAAC","sourcesContent":["import { Path, RelativeRoutingType, resolveTo, To, AgnosticRouteMatch } from '@remix-run/router';\nimport { RouterContext } from '../contexts';\nimport { useContext, useMemo } from 'react';\nimport { useLocation } from './hooks';\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches<T extends AgnosticRouteMatch = AgnosticRouteMatch>(\n  matches: T[],\n) {\n  return matches.filter(\n    (match, index) => index === 0 || (match.route.path && match.route.path.length > 0),\n  );\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {},\n): Path {\n  const {\n    router: {\n      state: { matches },\n    },\n  } = useContext(RouterContext);\n  const { pathname: locationPathname } = useLocation();\n\n  const routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase),\n  );\n\n  return useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === 'path'),\n    [to, routePathnamesJson, locationPathname, relative],\n  );\n}\n"]}