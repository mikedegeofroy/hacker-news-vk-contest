import { PopoutContext, RouteContext, RouterContext } from '../contexts';
import { useThrottledContext } from './useThrottledContext';
import { invariant } from '../utils/utils';
export function useRouteNavigator() {
    const [routerContext] = useThrottledContext(RouterContext);
    invariant(routerContext, 'You can not use useNavigator hook outside of RouterContext. Make sure calling it inside RouterProvider.');
    return routerContext.routeNavigator;
}
export function useParams(id) {
    const [routeContext, prevRouteContext] = useThrottledContext(RouteContext);
    invariant(routeContext, 'You can not use useParams hook outside of RouteContext. Make sure calling it inside RouterProvider.');
    const match = id &&
        prevRouteContext &&
        Object.keys(id).every((key) => (routeContext.match?.route)[key] !== id[key]) &&
        Object.keys(id).every((key) => (prevRouteContext.match?.route)[key] === id[key])
        ? prevRouteContext.match
        : routeContext.match;
    return match?.params;
}
export function useLocation() {
    const [routeContext] = useThrottledContext(RouteContext);
    invariant(routeContext, 'You can not use useLocation hook outside of RouteContext. Make sure calling it inside RouterProvider.');
    return routeContext.state.location;
}
export function usePopout() {
    const [popoutContext] = useThrottledContext(PopoutContext);
    return popoutContext.popout;
}
//# sourceMappingURL=hooks.js.map