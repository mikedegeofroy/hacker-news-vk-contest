{"version":3,"file":"useThrottledContext.js","sourceRoot":"","sources":["../../src/hooks/useThrottledContext.ts"],"names":[],"mappings":"AAAA,OAAO,EAAW,WAAW,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACtF,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAG/C,gEAAgE;AAChE,MAAM,cAAc,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;AAEhC,MAAM,UAAU,mBAAmB,CAAI,OAAmB;IACxD,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,GAAG,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAC7E,MAAM,SAAS,GAAG,MAAM,CAAW,IAAI,CAAC,CAAC;IACzC,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;IAClC,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAM,cAAc,GAAG,MAAM,CAAmB,IAAI,CAAC,CAAC;IACtD,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,QAAQ,CAAI,KAAK,CAAC,CAAC;IAE/D,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC;QACrC,SAAS,CAAC,OAAO,GAAG,KAAK,CAAC;QAC1B,OAAO,CAAC,KAAK,EAAE,UAAU,EAAE,cAAc,CAAC,CAAC;KAC5C;IAED,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC;QAC9C,MAAM,aAAa,GAAG,QAAQ,GAAG,QAAQ,CAAC;QAC1C,MAAM,YAAY,GAAG,aAAa,IAAI,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/D,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;QACpD,SAAS,CAAC,OAAO,GAAG,cAAc,CAAC;QAEnC,IAAI,KAAK,IAAI,CAAC,EAAE;YACd,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,iBAAiB,CAAC,KAAK,CAAC,CAAC;SAC1B;aAAM;YACL,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAClC,cAAc,CAAC,OAAO,GAAG,GAAG,EAAE;gBAC5B,cAAc,CAAC,OAAO,GAAG,IAAI,CAAC;gBAC9B,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAC7B,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC,CAAC;YACF,WAAW,CAAC,OAAO,GAAG,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;SACjE;QAED,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,MAAM,eAAe,GAAG,WAAW,CAAC,GAAG,EAAE;QACvC,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC;QACpB,IAAI,cAAc,CAAC,OAAO,EAAE;YAC1B,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAClC,WAAW,CAAC,OAAO,GAAG,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;SAC7D;QACD,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC;IACrC,OAAO,CAAC,cAAc,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;AACvD,CAAC","sourcesContent":["import { Context, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { ThrottledContext } from '../contexts';\n\ntype NullableFunction = (() => void) | null;\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst EMPTY_FUNCTION = () => {};\n\nexport function useThrottledContext<T>(context: Context<T>): [T, T | null, () => void] {\n  const { enabled, interval, firstActionDelay } = useContext(ThrottledContext);\n  const prevValue = useRef<T | null>(null);\n  const value = useContext(context);\n  const updated = useRef(0);\n  const updateTimer = useRef(0);\n  const updateCallback = useRef<NullableFunction>(null);\n  const [throttledValue, setThrottledValue] = useState<T>(value);\n\n  if (!enabled) {\n    const returnPrev = prevValue.current;\n    prevValue.current = value;\n    return [value, returnPrev, EMPTY_FUNCTION];\n  }\n\n  useEffect(() => {\n    const timeDiff = Date.now() - updated.current;\n    const throttleDelay = interval - timeDiff;\n    const initialDelay = throttleDelay <= 0 ? firstActionDelay : 0;\n    const delay = Math.max(initialDelay, throttleDelay);\n    prevValue.current = throttledValue;\n\n    if (delay <= 0) {\n      updated.current = Date.now();\n      setThrottledValue(value);\n    } else {\n      clearTimeout(updateTimer.current);\n      updateCallback.current = () => {\n        updateCallback.current = null;\n        updated.current = Date.now();\n        setThrottledValue(value);\n      };\n      updateTimer.current = setTimeout(updateCallback.current, delay);\n    }\n\n    return () => clearTimeout(updateTimer.current);\n  }, [value]);\n\n  const onTransitionEnd = useCallback(() => {\n    updated.current = 0;\n    if (updateCallback.current) {\n      clearTimeout(updateTimer.current);\n      updateTimer.current = setTimeout(updateCallback.current, 1);\n    }\n    return () => clearTimeout(updateTimer.current);\n  }, []);\n\n  const returnPrev = prevValue.current;\n  return [throttledValue, returnPrev, onTransitionEnd];\n}\n"]}