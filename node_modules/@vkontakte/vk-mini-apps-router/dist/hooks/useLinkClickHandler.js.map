{"version":3,"file":"useLinkClickHandler.js","sourceRoot":"","sources":["../../src/hooks/useLinkClickHandler.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAA2B,MAAM,mBAAmB,CAAC;AACxE,OAAO,EAA4D,WAAW,EAAE,MAAM,OAAO,CAAC;AAC9F,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AACzD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAIpD,SAAS,eAAe,CAAC,KAAwB;IAC/C,OAAO,OAAO,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;AACnF,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,KAAwB,EAAE,MAAe;IAC9E,OAAO,CACL,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,oCAAoC;QAC1D,CAAC,CAAC,MAAM,IAAI,MAAM,KAAK,OAAO,CAAC,IAAI,0CAA0C;QAC7E,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,mCAAmC;KAC5D,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mBAAmB,CACjC,EAAM,EACN,EACE,MAAM,EACN,OAAO,EAAE,WAAW,EACpB,kBAAkB,EAClB,QAAQ,MAMN,EAAE;IAEN,MAAM,SAAS,GAAG,iBAAiB,EAAE,CAAC;IACtC,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;IAC/B,MAAM,IAAI,GAAG,eAAe,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAE/C,OAAO,WAAW,CAChB,CAAC,KAAyB,EAAE,EAAE;QAC5B,IAAI,sBAAsB,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;YACzC,KAAK,CAAC,cAAc,EAAE,CAAC;YAEvB,wEAAwE;YACxE,wEAAwE;YACxE,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,OAAO,GAAG,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,MAAM,CAAC;YAE1F,IAAI,OAAO,EAAE;gBACX,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aAC3B;iBAAM;gBACL,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACxB;SACF;IACH,CAAC,EACD,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,EAAE,EAAE,kBAAkB,EAAE,QAAQ,CAAC,CACnF,CAAC;AACJ,CAAC","sourcesContent":["import { createPath, RelativeRoutingType, To } from '@remix-run/router';\nimport { HTMLAttributeAnchorTarget, MouseEvent as ReactMouseEvent, useCallback } from 'react';\nimport { useLocation, useRouteNavigator } from './hooks';\nimport { useResolvedPath } from './useResolvedPath';\n\ntype LimitedMouseEvent = Pick<MouseEvent, 'button' | 'metaKey' | 'altKey' | 'ctrlKey' | 'shiftKey'>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent): boolean {\n  return Boolean(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(event: LimitedMouseEvent, target?: string): boolean {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === '_self') && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {},\n): (event: ReactMouseEvent<E>) => void {\n  const navigator = useRouteNavigator();\n  const location = useLocation();\n  const path = useResolvedPath(to, { relative });\n\n  return useCallback(\n    (event: ReactMouseEvent<E>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        const toPath = createPath(path);\n        const replace = replaceProp !== undefined ? replaceProp : createPath(location) === toPath;\n\n        if (replace) {\n          navigator.replace(toPath);\n        } else {\n          navigator.push(toPath);\n        }\n      }\n    },\n    [location, navigator, path, replaceProp, target, to, preventScrollReset, relative],\n  );\n}\n"]}