{"version":3,"file":"buildPanelPathFromModalMatch.js","sourceRoot":"","sources":["../../src/utils/buildPanelPathFromModalMatch.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,kBAAkB,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AAE3D,MAAM,UAAU,4BAA4B,CAC1C,KAA6B,EAC7B,MAAc;IAEd,MAAM,KAAK,GAAG,KAAK,CAAC,KAA4C,CAAC;IACjE,SAAS,YAAY,CAAC,KAAwB;QAC5C,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;aAC7B,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;aAC9D,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;IAC1C,CAAC;IACD,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM;SAC7B,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE;QACf,MAAM,SAAS,GAAG,IAA2C,CAAC;QAC9D,MAAM,UAAU,GAAG,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;QACvF,OAAO,CACL,CAAC,SAAS,CAAC,KAAK;YAChB,SAAS,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG;YAC3B,SAAS,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK;YAC/B,SAAS,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;YAC7B,SAAS,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;YAC7B,UAAU,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CACvE,CAAC;IACJ,CAAC,CAAC;SACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;SACjD,GAAG,EAAE,CAAC;IACT,OAAO,UAAU,IAAI,kBAAkB,CAAC,UAAU,CAAC,IAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;AAC1E,CAAC","sourcesContent":["import { AgnosticDataRouteMatch, Router } from '@remix-run/router';\nimport { InternalRouteConfig, ModalWithRoot } from '../type';\nimport { fillParamsIntoPath, getParamKeys } from './utils';\n\nexport function buildPanelPathFromModalMatch(\n  match: AgnosticDataRouteMatch,\n  router: Router,\n): string | undefined {\n  const route = match.route as ModalWithRoot & InternalRouteConfig;\n  function rateByParams(route: { path?: string }): number {\n    return Object.keys(match.params)\n      .map((key) => Number(Boolean(route.path?.includes(`:${key}`))))\n      .reduce((acc, item) => acc + item, 0);\n  }\n  const panelRoute = router.routes\n    .filter((item) => {\n      const itemTyped = item as ModalWithRoot & InternalRouteConfig;\n      const parameters = getParamKeys(itemTyped.path).map((param) => param.replace(':', ''));\n      return (\n        !itemTyped.modal &&\n        itemTyped.tab === route.tab &&\n        itemTyped.panel === route.panel &&\n        itemTyped.view === route.view &&\n        itemTyped.root === route.root &&\n        parameters.every((param) => Object.keys(match.params).includes(param))\n      );\n    })\n    .sort((a, b) => rateByParams(a) - rateByParams(b))\n    .pop();\n  return panelRoute && fillParamsIntoPath(panelRoute.path!, match.params);\n}\n"]}