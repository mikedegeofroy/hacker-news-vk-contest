{"version":3,"file":"getUrlBasedHistory.js","sourceRoot":"","sources":["../../../src/utils/react-router-override/getUrlBasedHistory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAyB,MAAM,mBAAmB,CAAC;AAG9E,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AAErC,MAAM,iBAAiB,GAAG,UAAU,CAAC;AAErC,4DAA4D;AAC5D,MAAM,UAAU,kBAAkB,CAChC,WAA2E,EAC3E,UAA8C,EAC9C,gBAAyE,EACzE,UAA6B,EAAE;IAE/B,MAAM,EAAE,MAAM,GAAG,QAAQ,CAAC,WAAY,EAAE,QAAQ,GAAG,KAAK,EAAE,GAAG,OAAO,CAAC;IACrE,MAAM,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC;IACrC,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;IACxB,IAAI,QAAQ,GAAoB,IAAI,CAAC;IAErC,IAAI,KAAK,GAAG,QAAQ,EAAG,CAAC;IACxB,yEAAyE;IACzE,2EAA2E;IAC3E,0DAA0D;IAC1D,uEAAuE;IACvE,IAAI,KAAK,IAAI,IAAI,EAAE;QACjB,KAAK,GAAG,CAAC,CAAC;QACV,aAAa,CAAC,YAAY,CAAC,EAAE,GAAG,aAAa,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;KACxE;IAED,SAAS,QAAQ;QACf,MAAM,KAAK,GAAG,aAAa,CAAC,KAAK,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;QACnD,OAAO,KAAK,CAAC,GAAG,CAAC;IACnB,CAAC;IAED,SAAS,SAAS;QAChB,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;QACpB,MAAM,SAAS,GAAG,QAAQ,EAAE,CAAC;QAC7B,uEAAuE;QACvE,MAAM,KAAK,GAAG,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3D,KAAK,GAAG,SAAS,CAAC;QAClB,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;SACzD;IACH,CAAC;IAED,SAAS,IAAI,CAAC,EAAM,EAAE,KAAW;QAC/B,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;QACrB,MAAM,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAC7D,IAAI,gBAAgB;YAAE,gBAAgB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAErD,KAAK,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC;QACvB,MAAM,YAAY,GAAG,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACtD,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAEzC,8DAA8D;QAC9D,IAAI;YACF,aAAa,CAAC,SAAS,CAAC,YAAY,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;SAChD;QAAC,OAAO,KAAK,EAAE;YACd,4EAA4E;YAC5E,qEAAqE;YACrE,uGAAuG;YACvG,0FAA0F;YAC1F,IAAI,KAAK,YAAY,YAAY,IAAI,KAAK,CAAC,IAAI,KAAK,gBAAgB,EAAE;gBACpE,MAAM,KAAK,CAAC;aACb;YACD,0DAA0D;YAC1D,2DAA2D;YAC3D,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC7B;QAED,IAAI,QAAQ,IAAI,QAAQ,EAAE;YACxB,QAAQ,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;SAC5D;IACH,CAAC;IAED,SAAS,OAAO,CAAC,EAAM,EAAE,KAAW;QAClC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;QACxB,MAAM,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAC7D,IAAI,gBAAgB;YAAE,gBAAgB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAErD,KAAK,GAAG,QAAQ,EAAE,CAAC;QACnB,MAAM,YAAY,GAAG,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACtD,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACzC,aAAa,CAAC,YAAY,CAAC,YAAY,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QAElD,IAAI,QAAQ,IAAI,QAAQ,EAAE;YACxB,QAAQ,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;SAC5D;IACH,CAAC;IAED,SAAS,SAAS,CAAC,EAAM;QACvB,yEAAyE;QACzE,wEAAwE;QACxE,0DAA0D;QAC1D,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;QAE/F,MAAM,IAAI,GAAG,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAC1D,SAAS,CAAC,IAAI,EAAE,sEAAsE,IAAI,EAAE,CAAC,CAAC;QAC9F,OAAO,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,MAAM,OAAO,GAAY;QACvB,IAAI,MAAM;YACR,OAAO,MAAM,CAAC;QAChB,CAAC;QACD,IAAI,QAAQ;YACV,OAAO,WAAW,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAC5C,CAAC;QACD,MAAM,CAAC,EAAY;YACjB,IAAI,QAAQ,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;aAC/D;YACD,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;YACtD,QAAQ,GAAG,EAAE,CAAC;YAEd,OAAO,GAAG,EAAE;gBACV,MAAM,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;gBACzD,QAAQ,GAAG,IAAI,CAAC;YAClB,CAAC,CAAC;QACJ,CAAC;QACD,UAAU,CAAC,EAAE;YACX,OAAO,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAChC,CAAC;QACD,SAAS;QACT,cAAc,CAAC,EAAE;YACf,uDAAuD;YACvD,MAAM,GAAG,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;YAC1B,OAAO;gBACL,QAAQ,EAAE,GAAG,CAAC,QAAQ;gBACtB,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC;QACJ,CAAC;QACD,IAAI;QACJ,OAAO;QACP,EAAE,CAAC,CAAC;YACF,OAAO,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC;KACF,CAAC;IAEF,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { Action, createPath, History, Location, To } from '@remix-run/router';\nimport { UrlHistoryOptions } from './UrlHistoryOptions.type';\nimport { Listener } from '@remix-run/router/dist/history';\nimport { createLocation } from './createLocation';\nimport { getHistoryState } from './getHistoryState';\nimport { invariant } from '../utils';\n\nconst PopStateEventType = 'popstate';\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\nexport function getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window['history']) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Readonly<Location>, to: To) => void) | null,\n  options: UrlHistoryOptions = {},\n): History {\n  const { window = document.defaultView!, v5Compat = false } = options;\n  const globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, '');\n  }\n\n  function getIndex(): number {\n    const state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    const nextIndex = getIndex();\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    const location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    const historyState = getHistoryState(location, index);\n    const url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, '', url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, const that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === 'DataCloneError') {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    const location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    const historyState = getHistoryState(location, index);\n    const url = history.createHref(location);\n    globalHistory.replaceState(historyState, '', url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    const base = window.location.origin !== 'null' ? window.location.origin : window.location.href;\n\n    const href = typeof to === 'string' ? to : createPath(to);\n    invariant(base, `No window.location.(origin|href) available to create URL for href: ${href}`);\n    return new URL(href, base);\n  }\n\n  const history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error('A history only accepts one active listener');\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      const url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n"]}