import * as React from 'react';
import { type SimulateReactInputTargetState } from '../../lib/react';
import type { ChipOption, ChipOptionValue, GetNewOptionData, GetOptionLabel, GetOptionValue, UseChipsInputBaseProps } from '../ChipsInputBase/types';
export declare const transformValue: <O extends ChipOption>(value: O[], getOptionValue: GetOptionValue<O>, getOptionLabel: GetOptionLabel<O>) => (O & {
    label: import("../ChipsInputBase/types").ChipOptionLabel;
    value: ChipOptionValue;
})[];
export interface UseChipsInputProps<O extends ChipOption = ChipOption> extends UseChipsInputBaseProps<O> {
    /**
     * Селектор значения.
     */
    getOptionValue?: GetOptionValue<O>;
    /**
     * Селектор пользовательского представления.
     */
    getOptionLabel?: GetOptionLabel<O>;
    /**
     * Функция для создания новой опции.
     */
    getNewOptionData?: GetNewOptionData<O>;
}
export declare const useChipsInput: <O extends ChipOption>({ value: valueProp, defaultValue, onChange, getOptionLabel, getOptionValue, getNewOptionData, inputValue: inputValueProp, defaultInputValue, onInputChange, disabled, }: UseChipsInputProps<O>) => {
    value: O[];
    addOption: (newValue: string | O) => void;
    addOptionFromInput: (inputValue: string) => void;
    removeOption: (newValue: ChipOptionValue | O) => void;
    inputRef: React.RefObject<HTMLInputElement & SimulateReactInputTargetState>;
    inputValue: string;
    onInputChange: (e: React.ChangeEvent<HTMLInputElement>) => any;
    clearInput: () => void;
};
//# sourceMappingURL=useChipsInput.d.ts.map