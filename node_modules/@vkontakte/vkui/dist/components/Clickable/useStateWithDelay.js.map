{"version":3,"sources":["../../../src/components/Clickable/useStateWithDelay.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype DispatchWithDelay<S> = (value: S, delay?: number) => void;\n\n/**\n * Возвращает значение с состоянием и функции на обновление состояния\n * без и с задержкой.\n *\n * # Пример\n *\n * ```ts\n * const [count, setCount] = useStateWithDelay(initialState);\n *\n * const click = () => {\n *   setCount(count + 1, 500)\n * }\n * ```\n */\nexport function useStateWithDelay<S>(\n  initialState: S | (() => S),\n  defaultDelay = 0,\n): [S, DispatchWithDelay<React.SetStateAction<S>>] {\n  const [value, setValue] = React.useState(initialState);\n  const timeout = React.useRef<ReturnType<typeof setTimeout>>();\n\n  const setValueWithDelay = React.useCallback(\n    (newValue: React.SetStateAction<S>, delay: number = defaultDelay) => {\n      clearTimeout(timeout.current);\n      if (delay === 0) {\n        setValue(newValue);\n        return;\n      }\n\n      timeout.current = setTimeout(() => setValue(newValue), delay);\n    },\n    [defaultDelay],\n  );\n\n  return [value, setValueWithDelay];\n}\n"],"names":["React","useStateWithDelay","initialState","defaultDelay","value","setValue","useState","timeout","useRef","setValueWithDelay","useCallback","newValue","delay","clearTimeout","current","setTimeout"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAI/B;;;;;;;;;;;;;CAaC,GACD,OAAO,SAASC,kBACdC,YAA2B,EAC3BC,eAAe,CAAC;IAEhB,MAAM,CAACC,OAAOC,SAAS,GAAGL,MAAMM,QAAQ,CAACJ;IACzC,MAAMK,UAAUP,MAAMQ,MAAM;IAE5B,MAAMC,oBAAoBT,MAAMU,WAAW,CACzC,CAACC,UAAmCC,QAAgBT,YAAY;QAC9DU,aAAaN,QAAQO,OAAO;QAC5B,IAAIF,UAAU,GAAG;YACfP,SAASM;YACT;QACF;QAEAJ,QAAQO,OAAO,GAAGC,WAAW,IAAMV,SAASM,WAAWC;IACzD,GACA;QAACT;KAAa;IAGhB,OAAO;QAACC;QAAOK;KAAkB;AACnC"}