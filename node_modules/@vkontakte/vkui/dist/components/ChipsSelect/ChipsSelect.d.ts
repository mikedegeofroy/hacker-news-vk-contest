import * as React from 'react';
import type { ChipOption, ChipsInputBaseProps } from '../ChipsInputBase/types';
import { type CustomSelectOptionProps } from '../CustomSelectOption/CustomSelectOption';
import type { FormFieldProps } from '../FormField/FormField';
import { type UseChipsSelectProps } from './useChipsSelect';
export interface ChipsSelectProps<O extends ChipOption> extends ChipsInputBaseProps<O>, UseChipsSelectProps<O>, Pick<FormFieldProps, 'status' | 'mode' | 'before'> {
    placement?: 'top' | 'bottom';
    /**
     * Отрисовка Spinner вместо списка опций в выпадающем списке
     */
    fetching?: boolean;
    /**
     * Закрытие выпадающего списка после выбора элемента
     */
    closeAfterSelect?: boolean;
    /**
     * Ширина раскрывающегося списка зависит от контента
     */
    dropdownAutoWidth?: boolean;
    /**
     * Принудительно использовать портал.
     */
    forceDropdownPortal?: boolean;
    /**
     * Передача `data-testid`.
     */
    dropdownTestId?: string;
    /**
     * Иконка раскрывающегося списка
     */
    icon?: React.ReactNode;
    /**
     * Добавляет значение в список на событие `onBlur` (использовать вместе с `creatable`)
     */
    addOnBlur?: boolean;
    /**
     * Отключает максимальную высоту по умолчанию
     */
    noMaxHeight?: boolean;
    renderOption?(props: CustomSelectOptionProps, option: O): React.ReactNode;
    /**
     * Событие срабатывающее перед onChange
     */
    onChangeStart?(event: React.MouseEvent | React.KeyboardEvent, option: O): void;
}
/**
 * @see https://vkcom.github.io/VKUI/#/ChipsSelect
 */
export declare const ChipsSelect: <Option extends ChipOption>({ id: labelledbyId, getRootRef, className, status, icon: dropdownIconProp, onChangeStart, options: optionsProp, placement: placementProp, closeAfterSelect, selectedBehavior, emptyText, creatable, fetching, dropdownAutoWidth, forceDropdownPortal, noMaxHeight, filterFn, dropdownTestId, getRef, value: valueProp, defaultValue, inputValue: inputValueProp, defaultInputValue, disabled, readOnly, getOptionValue, getOptionLabel, getNewOptionData, renderChip, renderOption, onChange, onFocus: onFocusProp, onInputChange: onInputChangeProp, onBlur: onBlurProp, onKeyDown: onKeyDownProp, ...restProps }: ChipsSelectProps<Option>) => React.JSX.Element;
//# sourceMappingURL=ChipsSelect.d.ts.map