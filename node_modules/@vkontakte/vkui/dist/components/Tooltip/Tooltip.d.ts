import * as React from 'react';
import { type FloatingComponentProps } from '../../lib/floating';
import { type TooltipBaseProps } from '../TooltipBase/TooltipBase';
type AllowedFloatingComponentProps = Pick<FloatingComponentProps, 'arrowHeight' | 'arrowPadding' | 'hoverDelay' | 'placement' | 'offsetByMainAxis' | 'offsetByCrossAxis' | 'defaultShown' | 'onShownChange' | 'hideWhenReferenceHidden' | 'children' | 'zIndex' | 'usePortal' | 'onPlacementChange'>;
type AllowedTooltipBaseProps = Omit<TooltipBaseProps, 'arrowProps'>;
export interface TooltipProps extends AllowedFloatingComponentProps, AllowedTooltipBaseProps {
    /**
     * Передача `boolean` позволяет контролировать состояния показа и скрытия вручную. Используйте
     * совместно с `onShawnChange`.
     *
     * > Если нужно разово инициировать показ тултипа при первом рендере, то используйте `defaultShown`.
     */
    shown?: boolean;
    /**
     * Добавляет возможность наводить на тултип.
     */
    enableInteractive?: boolean;
    /**
     * Скрывает стрелку, указывающую на якорный элемент.
     */
    disableArrow?: boolean;
    /**
     * Отключает закрытие по клику.
     */
    disableCloseAfterClick?: boolean;
}
/**
 * @see https://vkcom.github.io/VKUI/#/Tooltip
 */
export declare const Tooltip: ({ placement: placementProp, arrowPadding, arrowHeight, offsetByMainAxis, offsetByCrossAxis, hideWhenReferenceHidden, defaultShown, shown: shownProp, onShownChange, hoverDelay, enableInteractive, disableArrow, disableCloseAfterClick, children, usePortal, id: idProp, getRootRef, text, header, appearance, style: styleProp, className, zIndex, onPlacementChange, ...popperProps }: TooltipProps) => React.JSX.Element;
export {};
//# sourceMappingURL=Tooltip.d.ts.map