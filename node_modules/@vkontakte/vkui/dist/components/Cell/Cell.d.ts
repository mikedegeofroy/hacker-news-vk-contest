import * as React from 'react';
import type { SwappedItemRange } from '../../hooks/useDraggableWithDomApi';
import { HasRootRef } from '../../types';
import { RemovableProps } from '../Removable/Removable';
import { SimpleCellProps } from '../SimpleCell/SimpleCell';
import { CellCheckboxProps } from './CellCheckbox/CellCheckbox';
export interface CellProps extends Omit<SimpleCellProps, 'getRootRef'>, RemovableProps, HasRootRef<HTMLDivElement> {
    mode?: 'removable' | 'selectable';
    /**
     * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет
     */
    draggable?: boolean;
    /**
     * Имя для input в режиме selectable
     */
    name?: string;
    /**
     * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения
     */
    checked?: boolean;
    /**
     * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент
     */
    defaultChecked?: boolean;
    /**
     * Коллбэк срабатывает при завершении перетаскивания.
     * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.
     * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице
     * есть рабочий пример с обработкой этих чисел и перерисовкой списка.
     */
    onDragFinish?(swappedItemRange: SwappedItemRange): void;
    /**
     * Текст для кнопки перетаскивания ячейки
     */
    draggerLabel?: string;
}
/**
 * @see https://vkcom.github.io/VKUI/#/Cell
 */
export declare const Cell: {
    ({ mode, onRemove, removePlaceholder, onDragFinish, before, after, disabled, draggable, Component: ComponentProps, onChange, name, value, checked, defaultChecked, getRootRef, draggerLabel, className, style, toggleButtonTestId, removeButtonTestId, ...restProps }: CellProps): React.JSX.Element;
    Checkbox: ({ getRootRef, getRef, className, style, type, ...restProps }: CellCheckboxProps) => React.JSX.Element;
};
//# sourceMappingURL=Cell.d.ts.map