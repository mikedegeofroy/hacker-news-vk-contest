{"version":3,"sources":["../../../../src/components/AppRoot/AppRootPortal.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useAppearance } from '../../hooks/useAppearance';\nimport { useIsClient } from '../../hooks/useIsClient';\nimport { createPortal } from '../../lib/createPortal';\nimport { isRefObject } from '../../lib/isRefObject';\nimport { HasChildren } from '../../types';\nimport { AppearanceProvider } from '../AppearanceProvider/AppearanceProvider';\nimport { AppRootContext, type AppRootContextInterface } from './AppRootContext';\n\nexport interface AppRootPortalProps extends HasChildren {\n  /**\n   * - При передаче `true` будет использовать `portalRoot` из контекста `AppRoot`.\n   * - При передаче элемента будут игнорироваться `portalRoot` и `disablePortal` из контекста `AppRoot`.\n   */\n  usePortal?: boolean | HTMLElement | React.RefObject<HTMLElement> | null;\n}\n\nexport const AppRootPortal = ({ children, usePortal }: AppRootPortalProps) => {\n  const { portalRoot, mode, disablePortal } = React.useContext(AppRootContext);\n  const appearance = useAppearance();\n\n  const isClient = useIsClient();\n  if (!isClient) {\n    return null;\n  }\n\n  const portalContainer = resolvePortalContainer(usePortal, portalRoot.current);\n  if (!portalContainer || shouldDisablePortal(usePortal, mode, Boolean(disablePortal))) {\n    return <React.Fragment>{children}</React.Fragment>;\n  }\n\n  return createPortal(\n    <AppearanceProvider value={appearance}>{children}</AppearanceProvider>,\n    portalContainer,\n  );\n};\n\nfunction shouldDisablePortal(\n  usePortal: AppRootPortalProps['usePortal'],\n  mode: AppRootContextInterface['mode'],\n  disablePortal: boolean,\n) {\n  if (usePortal !== undefined) {\n    if (typeof usePortal !== 'boolean') {\n      return false;\n    }\n    return disablePortal || usePortal !== true;\n  }\n  // fallback\n  return disablePortal || mode === 'full';\n}\n\nfunction resolvePortalContainer<PortalRootFromContext extends HTMLElement | null | undefined>(\n  usePortal: AppRootPortalProps['usePortal'],\n  portalRootFromContext: PortalRootFromContext,\n) {\n  if (usePortal === true || !usePortal) {\n    return portalRootFromContext ? portalRootFromContext : null;\n  }\n\n  return isRefObject(usePortal) ? usePortal.current : usePortal;\n}\n"],"names":["AppRootPortal","children","usePortal","portalRoot","mode","disablePortal","React","useContext","AppRootContext","appearance","useAppearance","isClient","useIsClient","portalContainer","resolvePortalContainer","current","shouldDisablePortal","Boolean","Fragment","createPortal","AppearanceProvider","value","undefined","portalRootFromContext","isRefObject"],"mappings":";;;;+BAiBaA;;;eAAAA;;;;iEAjBU;+BACO;6BACF;8BACC;6BACD;oCAEO;gCAC0B;AAUtD,MAAMA,gBAAgB,CAAC,EAAEC,QAAQ,EAAEC,SAAS,EAAsB;IACvE,MAAM,EAAEC,UAAU,EAAEC,IAAI,EAAEC,aAAa,EAAE,GAAGC,OAAMC,UAAU,CAACC,8BAAc;IAC3E,MAAMC,aAAaC,IAAAA,4BAAa;IAEhC,MAAMC,WAAWC,IAAAA,wBAAW;IAC5B,IAAI,CAACD,UAAU;QACb,OAAO;IACT;IAEA,MAAME,kBAAkBC,uBAAuBZ,WAAWC,WAAWY,OAAO;IAC5E,IAAI,CAACF,mBAAmBG,oBAAoBd,WAAWE,MAAMa,QAAQZ,iBAAiB;QACpF,qBAAO,qBAACC,OAAMY,QAAQ,QAAEjB;IAC1B;IAEA,OAAOkB,IAAAA,0BAAY,gBACjB,qBAACC,sCAAkB;QAACC,OAAOZ;OAAaR,WACxCY;AAEJ;AAEA,SAASG,oBACPd,SAA0C,EAC1CE,IAAqC,EACrCC,aAAsB;IAEtB,IAAIH,cAAcoB,WAAW;QAC3B,IAAI,OAAOpB,cAAc,WAAW;YAClC,OAAO;QACT;QACA,OAAOG,iBAAiBH,cAAc;IACxC;IACA,WAAW;IACX,OAAOG,iBAAiBD,SAAS;AACnC;AAEA,SAASU,uBACPZ,SAA0C,EAC1CqB,qBAA4C;IAE5C,IAAIrB,cAAc,QAAQ,CAACA,WAAW;QACpC,OAAOqB,wBAAwBA,wBAAwB;IACzD;IAEA,OAAOC,IAAAA,wBAAW,EAACtB,aAAaA,UAAUa,OAAO,GAAGb;AACtD"}