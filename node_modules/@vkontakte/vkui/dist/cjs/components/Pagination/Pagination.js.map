{"version":3,"sources":["../../../../src/components/Pagination/Pagination.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icon24ChevronCompactLeft, Icon24ChevronCompactRight } from '@vkontakte/icons';\nimport { PaginationPageType, usePagination } from '../../hooks/usePagination';\nimport type { HasComponent, HTMLAttributesWithRootRef } from '../../types';\nimport { Button } from '../Button/Button';\nimport { RootComponent } from '../RootComponent/RootComponent';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden';\nimport { PaginationPageButton } from './PaginationPage/PaginationPageButton';\nimport { PaginationPageEllipsis } from './PaginationPage/PaginationPageEllipsis';\nimport { getPageLabelDefault } from './utils';\nimport styles from './Pagination.module.css';\n\nexport interface PaginationProps extends Omit<HTMLAttributesWithRootRef<HTMLElement>, 'onChange'> {\n  /**\n   * Текущая страница.\n   */\n  currentPage?: number;\n  /**\n   * Кол-во всегда видимых страниц по краям текущей страницы.\n   */\n  siblingCount?: number;\n  /**\n   * Кол-во всегда видимых страниц в начале и в конце.\n   */\n  boundaryCount?: number;\n  /**\n   * Общее кол-во страниц.\n   */\n  totalPages?: number;\n  /**\n   * Блокировка всех кнопок.\n   */\n  disabled?: boolean;\n  /**\n   * Переопределение текста для обозначения блока навигации.\n   * По умолчанию используется текст на \"ru_RU\".\n   */\n  navigationLabel?: string;\n  navigationLabelComponent?: HasComponent['Component'];\n  /**\n   * Переопределение текста для кнопки навигации назад.\n   * По умолчанию используется текст на \"ru_RU\".\n   */\n  prevButtonLabel?: string;\n  /**\n   * Переопределение текста для кнопки навигации вперёд.\n   * По умолчанию используется текст на \"ru_RU\".\n   */\n  nextButtonLabel?: string;\n  /**\n   * Функция для переопределения и/или локализации текста кнопки страницы.\n   * По умолчанию используется текст на \"ru_RU\".\n   */\n  getPageLabel?(isCurrent: boolean): string;\n  onChange?(page: number): void;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Pagination\n */\nexport const Pagination = ({\n  currentPage = 1,\n  siblingCount = 1,\n  boundaryCount = 1,\n  totalPages = 1,\n  disabled,\n  getPageLabel = getPageLabelDefault,\n  navigationLabel = 'Навигация по страницам',\n  navigationLabelComponent = 'h2',\n  prevButtonLabel = 'Перейти на предыдущую страницу',\n  nextButtonLabel = 'Перейти на следующую страницу',\n  onChange,\n  ...resetProps\n}: PaginationProps) => {\n  const pages = usePagination({\n    currentPage,\n    totalPages,\n    siblingCount,\n    boundaryCount,\n  });\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === totalPages;\n\n  const handlePrevClick = React.useCallback(() => {\n    if (onChange && !isFirstPage) {\n      onChange(currentPage - 1);\n    }\n  }, [currentPage, isFirstPage, onChange]);\n\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      const page: string = event.currentTarget.dataset.page || '1';\n      onChange?.(Number(page));\n    },\n    [onChange],\n  );\n\n  const handleNextClick = React.useCallback(() => {\n    if (onChange && !isLastPage) {\n      onChange(currentPage + 1);\n    }\n  }, [currentPage, isLastPage, onChange]);\n\n  const renderPages = React.useCallback(\n    (page: PaginationPageType) => {\n      switch (page) {\n        case 'start-ellipsis':\n        case 'end-ellipsis':\n          return (\n            <li key={page}>\n              <PaginationPageEllipsis disabled={disabled} />\n            </li>\n          );\n        default: {\n          const isCurrent = page === currentPage;\n          return (\n            <li key={page}>\n              <PaginationPageButton\n                getPageLabel={getPageLabel}\n                isCurrent={isCurrent}\n                onClick={handleClick}\n                disabled={disabled}\n              >\n                {page}\n              </PaginationPageButton>\n            </li>\n          );\n        }\n      }\n    },\n    [currentPage, disabled, getPageLabel, handleClick],\n  );\n\n  return (\n    <RootComponent Component=\"nav\" role=\"navigation\" {...resetProps}>\n      <VisuallyHidden Component={navigationLabelComponent}>{navigationLabel}</VisuallyHidden>\n      <ul className={styles['Pagination__list']}>\n        <li className={styles['Pagination__prevButtonContainer']}>\n          <Button\n            size=\"l\"\n            before={\n              <>\n                <VisuallyHidden>{prevButtonLabel}</VisuallyHidden>{' '}\n                <Icon24ChevronCompactLeft width={24} />\n              </>\n            }\n            appearance=\"accent\"\n            mode=\"tertiary\"\n            disabled={isFirstPage || disabled}\n            onClick={handlePrevClick}\n          />\n        </li>\n        {pages.map(renderPages)}\n        <li className={styles['Pagination__nextButtonContainer']}>\n          <Button\n            size=\"l\"\n            after={\n              <>\n                <VisuallyHidden>{nextButtonLabel}</VisuallyHidden>\n                <Icon24ChevronCompactRight width={24} />\n              </>\n            }\n            appearance=\"accent\"\n            mode=\"tertiary\"\n            disabled={isLastPage || disabled}\n            onClick={handleNextClick}\n          />\n        </li>\n      </ul>\n    </RootComponent>\n  );\n};\n"],"names":["Pagination","currentPage","siblingCount","boundaryCount","totalPages","disabled","getPageLabel","getPageLabelDefault","navigationLabel","navigationLabelComponent","prevButtonLabel","nextButtonLabel","onChange","resetProps","pages","usePagination","isFirstPage","isLastPage","handlePrevClick","React","useCallback","handleClick","event","page","currentTarget","dataset","Number","handleNextClick","renderPages","li","key","PaginationPageEllipsis","isCurrent","PaginationPageButton","onClick","RootComponent","Component","role","VisuallyHidden","ul","className","Button","size","before","Icon24ChevronCompactLeft","width","appearance","mode","map","after","Icon24ChevronCompactRight"],"mappings":";;;;+BA4DaA;;;eAAAA;;;;;;iEA5DU;uBAC6C;+BAClB;wBAE3B;+BACO;gCACC;sCACM;wCACE;uBACH;AAmD7B,MAAMA,aAAa;QAAC,EACzBC,cAAc,CAAC,EACfC,eAAe,CAAC,EAChBC,gBAAgB,CAAC,EACjBC,aAAa,CAAC,EACdC,QAAQ,EACRC,eAAeC,0BAAmB,EAClCC,kBAAkB,wBAAwB,EAC1CC,2BAA2B,IAAI,EAC/BC,kBAAkB,gCAAgC,EAClDC,kBAAkB,+BAA+B,EACjDC,QAAQ,EAEQ,WADbC;QAXHZ;QACAC;QACAC;QACAC;QACAC;QACAC;QACAE;QACAC;QACAC;QACAC;QACAC;;IAGA,MAAME,QAAQC,IAAAA,4BAAa,EAAC;QAC1Bd;QACAG;QACAF;QACAC;IACF;IACA,MAAMa,cAAcf,gBAAgB;IACpC,MAAMgB,aAAahB,gBAAgBG;IAEnC,MAAMc,kBAAkBC,OAAMC,WAAW,CAAC;QACxC,IAAIR,YAAY,CAACI,aAAa;YAC5BJ,SAASX,cAAc;QACzB;IACF,GAAG;QAACA;QAAae;QAAaJ;KAAS;IAEvC,MAAMS,cAAcF,OAAMC,WAAW,CACnC,CAACE;QACC,MAAMC,OAAeD,MAAME,aAAa,CAACC,OAAO,CAACF,IAAI,IAAI;QACzDX,qBAAAA,+BAAAA,SAAWc,OAAOH;IACpB,GACA;QAACX;KAAS;IAGZ,MAAMe,kBAAkBR,OAAMC,WAAW,CAAC;QACxC,IAAIR,YAAY,CAACK,YAAY;YAC3BL,SAASX,cAAc;QACzB;IACF,GAAG;QAACA;QAAagB;QAAYL;KAAS;IAEtC,MAAMgB,cAAcT,OAAMC,WAAW,CACnC,CAACG;QACC,OAAQA;YACN,KAAK;YACL,KAAK;gBACH,qBACE,qBAACM;oBAAGC,KAAKP;iCACP,qBAACQ,8CAAsB;oBAAC1B,UAAUA;;YAGxC;gBAAS;oBACP,MAAM2B,YAAYT,SAAStB;oBAC3B,qBACE,qBAAC4B;wBAAGC,KAAKP;qCACP,qBAACU,0CAAoB;wBACnB3B,cAAcA;wBACd0B,WAAWA;wBACXE,SAASb;wBACThB,UAAUA;uBAETkB;gBAIT;QACF;IACF,GACA;QAACtB;QAAaI;QAAUC;QAAce;KAAY;IAGpD,qBACE,qBAACc,4BAAa;QAACC,WAAU;QAAMC,MAAK;OAAiBxB,2BACnD,qBAACyB,8BAAc;QAACF,WAAW3B;OAA2BD,gCACtD,qBAAC+B;QAAGC,SAAS;qBACX,qBAACX;QAAGW,SAAS;qBACX,qBAACC,cAAM;QACLC,MAAK;QACLC,sBACE,0DACE,qBAACL,8BAAc,QAAE5B,kBAAkC,mBACnD,qBAACkC,+BAAwB;YAACC,OAAO;;QAGrCC,YAAW;QACXC,MAAK;QACL1C,UAAUW,eAAeX;QACzB6B,SAAShB;SAGZJ,MAAMkC,GAAG,CAACpB,4BACX,qBAACC;QAAGW,SAAS;qBACX,qBAACC,cAAM;QACLC,MAAK;QACLO,qBACE,0DACE,qBAACX,8BAAc,QAAE3B,gCACjB,qBAACuC,gCAAyB;YAACL,OAAO;;QAGtCC,YAAW;QACXC,MAAK;QACL1C,UAAUY,cAAcZ;QACxB6B,SAASP;;AAMrB"}