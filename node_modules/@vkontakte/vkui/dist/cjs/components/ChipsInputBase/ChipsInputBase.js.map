{"version":3,"sources":["../../../../src/components/ChipsInputBase/ChipsInputBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { isHTMLElement } from '@vkontakte/vkui-floating-ui/utils/dom';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { getHorizontalFocusGoTo, Keys } from '../../lib/accessibility';\nimport {\n  contains as checkTargetIsInputEl,\n  contains,\n  getActiveElementByAnotherElement,\n} from '../../lib/dom';\nimport { FormField } from '../FormField/FormField';\nimport { Text } from '../Typography/Text/Text';\nimport { DEFAULT_INPUT_VALUE, DEFAULT_VALUE, renderChipDefault } from './constants';\nimport {\n  getChipOptionIndexByHTMLElement,\n  getChipOptionIndexByValueProp,\n  getChipOptionValueByHTMLElement,\n  getNextChipOptionIndexByNavigateToProp,\n  isInputValueEmpty,\n} from './helpers';\nimport type { ChipOption, ChipOptionValue, ChipsInputBasePrivateProps, NavigateTo } from './types';\nimport styles from './ChipsInputBase.module.css';\n\nconst sizeYClassNames = {\n  none: styles['ChipsInputBase--sizeY-none'],\n  compact: styles['ChipsInputBase--sizeY-compact'],\n} as const;\n\nexport const ChipsInputBase = <O extends ChipOption>({\n  // FormFieldProps\n  getRootRef,\n  style,\n  className,\n  before,\n  after,\n  status,\n  mode,\n\n  // option\n  value = DEFAULT_VALUE,\n  onAddChipOption,\n  onRemoveChipOption: onRemoveChipOptionProp,\n  renderChip = renderChipDefault,\n\n  // input\n  getRef,\n  id: idProp,\n  inputValue = DEFAULT_INPUT_VALUE,\n  placeholder,\n  disabled,\n  readOnly,\n  addOnBlur,\n  onBlur,\n  onInputChange,\n  ...restProps\n}: ChipsInputBasePrivateProps<O>) => {\n  const { sizeY = 'none' } = useAdaptivity();\n  const idGenerated = React.useId();\n  const inputRef = useExternRef(getRef);\n  const listboxRef = React.useRef<HTMLDivElement>(null);\n\n  const valueLength = value.length;\n  const withPlaceholder = valueLength === 0;\n  const [lastFocusedChipOptionIndex, setLastFocusedChipOptionIndex] = React.useState(0);\n\n  const resetChipOptionFocusToInputEl = (inputEl: HTMLInputElement) => {\n    setLastFocusedChipOptionIndex(0);\n    inputEl.focus();\n  };\n\n  const moveFocusToChipOption = (\n    currentIndex: number,\n    navigateTo: NavigateTo,\n    listboxEl: HTMLElement,\n  ) => {\n    const index = getNextChipOptionIndexByNavigateToProp(currentIndex, navigateTo, valueLength);\n    // eslint-disable-next-line no-restricted-properties\n    const foundEl = listboxEl.querySelector<HTMLElement>(`[data-index=\"${index}\"]`);\n\n    if (foundEl) {\n      setLastFocusedChipOptionIndex(index);\n      foundEl.focus();\n    }\n  };\n\n  const removeChipOption = (o: O | ChipOptionValue, index: number) => {\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (!inputRef.current || !listboxRef.current) {\n      return;\n    }\n\n    if (valueLength > 1) {\n      if (index === valueLength - 1) {\n        moveFocusToChipOption(index, 'prev', listboxRef.current);\n      } else {\n        moveFocusToChipOption(index, 'next', listboxRef.current);\n      }\n    } else {\n      resetChipOptionFocusToInputEl(inputRef.current);\n    }\n\n    onRemoveChipOptionProp(o);\n  };\n\n  const handleListboxKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const targetEl = event.target;\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (event.defaultPrevented || !listboxRef.current || !isHTMLElement(targetEl)) {\n      return;\n    }\n\n    switch (event.key) {\n      case Keys.ENTER: {\n        if (\n          !readOnly &&\n          checkTargetIsInputEl(targetEl, inputRef.current) &&\n          inputRef.current &&\n          !isInputValueEmpty(inputRef.current)\n        ) {\n          event.preventDefault();\n          onAddChipOption(inputRef.current.value);\n        }\n        break;\n      }\n      case Keys.DELETE:\n      case Keys.BACKSPACE: {\n        if (!readOnly && valueLength > 0) {\n          if (!checkTargetIsInputEl(targetEl, inputRef.current)) {\n            event.preventDefault();\n            removeChipOption(\n              getChipOptionValueByHTMLElement(targetEl),\n              getChipOptionIndexByHTMLElement(targetEl),\n            );\n          } else if (event.key === Keys.BACKSPACE && isInputValueEmpty(inputRef.current)) {\n            event.preventDefault();\n            moveFocusToChipOption(\n              getChipOptionIndexByHTMLElement(targetEl),\n              'last',\n              listboxRef.current,\n            );\n          }\n        }\n        break;\n      }\n      case Keys.ARROW_UP:\n      case Keys.ARROW_LEFT:\n      case Keys.ARROW_DOWN:\n      case Keys.ARROW_RIGHT: {\n        if (valueLength !== 0 && !checkTargetIsInputEl(targetEl, inputRef.current)) {\n          event.preventDefault();\n          moveFocusToChipOption(\n            getChipOptionIndexByHTMLElement(targetEl),\n            getHorizontalFocusGoTo(event.key),\n            listboxRef.current,\n          );\n        }\n        break;\n      }\n    }\n  };\n\n  const handleInputBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (addOnBlur && !event.defaultPrevented && inputRef.current) {\n      onAddChipOption(inputRef.current.value);\n    }\n  };\n\n  const handleChipRemove = (event: React.MouseEvent, v: ChipOptionValue) => {\n    event.preventDefault();\n    event.stopPropagation();\n    removeChipOption(v, getChipOptionIndexByValueProp(v, value));\n  };\n\n  const handleRootClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (contains(event.currentTarget, getActiveElementByAnotherElement(event.currentTarget))) {\n      return;\n    }\n\n    if (valueLength > 0 && listboxRef.current) {\n      moveFocusToChipOption(0, 'first', listboxRef.current);\n    } else if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <FormField\n      Component=\"div\"\n      getRootRef={getRootRef}\n      style={style}\n      disabled={disabled}\n      before={before}\n      after={after}\n      status={status}\n      mode={mode}\n      className={className}\n      onClick={disabled ? undefined : handleRootClick}\n    >\n      <div\n        className={classNames(\n          styles['ChipsInputBase'],\n          sizeY !== 'regular' && sizeYClassNames[sizeY],\n          withPlaceholder && styles['ChipsInputBase--hasPlaceholder'],\n        )}\n        // для a11y\n        ref={listboxRef}\n        role=\"listbox\"\n        aria-orientation=\"horizontal\"\n        aria-disabled={disabled}\n        aria-readonly={readOnly}\n        onKeyDown={disabled ? undefined : handleListboxKeyDown}\n      >\n        {value.map((option, index) => (\n          <React.Fragment key={`${typeof option.value}-${option.label}`}>\n            {renderChip(\n              {\n                'Component': 'div',\n                'value': option.value,\n                'label': option.label,\n                'disabled': disabled,\n                'readOnly': readOnly,\n                'className': styles['ChipsInputBase__chip'],\n                'onRemove': handleChipRemove,\n                // чтобы можно было легче найти этот чип в DOM\n                'data-index': index,\n                'data-value': option.value,\n                // для a11y\n                'tabIndex': lastFocusedChipOptionIndex === index ? 0 : -1,\n                'role': 'option',\n                'aria-selected': true,\n                'aria-posinset': index + 1,\n                'aria-setsize': valueLength,\n              },\n              option,\n            )}\n          </React.Fragment>\n        ))}\n        <Text\n          autoCapitalize=\"none\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          {...restProps}\n          Component=\"input\"\n          type=\"text\"\n          id={idProp || `chips-input-base-generated-id-${idGenerated}`}\n          getRootRef={inputRef}\n          className={styles['ChipsInputBase__el']}\n          disabled={disabled}\n          readOnly={readOnly}\n          placeholder={withPlaceholder ? placeholder : undefined}\n          value={inputValue}\n          onChange={onInputChange}\n          onBlur={handleInputBlur}\n        />\n      </div>\n    </FormField>\n  );\n};\n"],"names":["ChipsInputBase","sizeYClassNames","none","compact","getRootRef","style","className","before","after","status","mode","value","DEFAULT_VALUE","onAddChipOption","onRemoveChipOption","onRemoveChipOptionProp","renderChip","renderChipDefault","getRef","id","idProp","inputValue","DEFAULT_INPUT_VALUE","placeholder","disabled","readOnly","addOnBlur","onBlur","onInputChange","restProps","sizeY","useAdaptivity","idGenerated","React","useId","inputRef","useExternRef","listboxRef","useRef","valueLength","length","withPlaceholder","lastFocusedChipOptionIndex","setLastFocusedChipOptionIndex","useState","resetChipOptionFocusToInputEl","inputEl","focus","moveFocusToChipOption","currentIndex","navigateTo","listboxEl","index","getNextChipOptionIndexByNavigateToProp","foundEl","querySelector","removeChipOption","o","current","handleListboxKeyDown","event","targetEl","target","defaultPrevented","isHTMLElement","key","Keys","ENTER","checkTargetIsInputEl","isInputValueEmpty","preventDefault","DELETE","BACKSPACE","getChipOptionValueByHTMLElement","getChipOptionIndexByHTMLElement","ARROW_UP","ARROW_LEFT","ARROW_DOWN","ARROW_RIGHT","getHorizontalFocusGoTo","handleInputBlur","handleChipRemove","v","stopPropagation","getChipOptionIndexByValueProp","handleRootClick","contains","currentTarget","getActiveElementByAnotherElement","FormField","Component","onClick","undefined","div","classNames","ref","role","aria-orientation","aria-disabled","aria-readonly","onKeyDown","map","option","Fragment","label","Text","autoCapitalize","autoComplete","autoCorrect","spellCheck","type","onChange"],"mappings":"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"}