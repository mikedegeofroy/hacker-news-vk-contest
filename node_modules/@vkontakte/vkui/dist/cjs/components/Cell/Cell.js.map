{"version":3,"sources":["../../../../src/components/Cell/Cell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport type { SwappedItemRange } from '../../hooks/useDraggableWithDomApi';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { HasRootRef } from '../../types';\nimport { Removable, RemovableProps } from '../Removable/Removable';\nimport { SimpleCell, SimpleCellProps } from '../SimpleCell/SimpleCell';\nimport { CellCheckbox, CellCheckboxProps } from './CellCheckbox/CellCheckbox';\nimport { CellDragger } from './CellDragger/CellDragger';\nimport { DEFAULT_DRAGGABLE_LABEL } from './constants';\nimport styles from './Cell.module.css';\n\nexport interface CellProps\n  extends Omit<SimpleCellProps, 'getRootRef'>,\n    RemovableProps,\n    HasRootRef<HTMLDivElement> {\n  mode?: 'removable' | 'selectable';\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?(swappedItemRange: SwappedItemRange): void;\n  /**\n   * Текст для кнопки перетаскивания ячейки\n   */\n  draggerLabel?: string;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\nexport const Cell = ({\n  mode,\n  onRemove = noop,\n  removePlaceholder = 'Удалить',\n  onDragFinish,\n  before,\n  after,\n  disabled,\n  draggable,\n  Component: ComponentProps,\n  onChange,\n  name,\n  value,\n  checked,\n  defaultChecked,\n  getRootRef,\n  draggerLabel = DEFAULT_DRAGGABLE_LABEL,\n  className,\n  style,\n  toggleButtonTestId,\n  removeButtonTestId,\n  ...restProps\n}: CellProps) => {\n  const [dragging, setDragging] = React.useState(false);\n  const selectable = mode === 'selectable';\n  const removable = mode === 'removable';\n  const Component = selectable ? 'label' : ComponentProps;\n\n  const platform = usePlatform();\n\n  const rootElRef = useExternRef(getRootRef);\n\n  const dragger = draggable ? (\n    <CellDragger\n      elRef={rootElRef}\n      className={styles['Cell__dragger']}\n      disabled={disabled}\n      onDragStateChange={setDragging}\n      onDragFinish={onDragFinish}\n    >\n      {draggerLabel}\n    </CellDragger>\n  ) : null;\n\n  let checkbox;\n  if (selectable) {\n    const checkboxProps: CellCheckboxProps = {\n      name,\n      value,\n      defaultChecked,\n      checked,\n      disabled,\n      onChange,\n    };\n    checkbox = <CellCheckbox className={styles['Cell__checkbox']} {...checkboxProps} />;\n  }\n\n  const simpleCellDisabled =\n    (draggable && !selectable) || (removable && !restProps.onClick) || disabled;\n  const hasActive = !simpleCellDisabled && !dragging;\n\n  const cellClasses = classNames(\n    styles['Cell'],\n    dragging && styles['Cell--dragging'],\n    platform === 'ios' && styles['Cell--ios'],\n    removable && styles['Cell--removable'],\n    Component === 'label' && styles['Cell--selectable'],\n    disabled && styles['Cell--disabled'],\n  );\n\n  const simpleCellProps: SimpleCellProps = {\n    hasActive: hasActive,\n    hasHover: hasActive && !removable,\n    ...restProps,\n    className: styles['Cell__content'],\n    Component: Component,\n    before: (\n      <React.Fragment>\n        {draggable && platform !== 'ios' && dragger}\n        {selectable && checkbox}\n        {before}\n      </React.Fragment>\n    ),\n    after: (\n      <React.Fragment>\n        {draggable && platform === 'ios' && dragger}\n        {after}\n      </React.Fragment>\n    ),\n  };\n\n  if (restProps.onClick) {\n    simpleCellProps.disabled = simpleCellDisabled;\n  }\n\n  if (removable) {\n    return (\n      <Removable\n        className={classNames(cellClasses, className)}\n        style={style}\n        getRootRef={rootElRef}\n        removePlaceholder={removePlaceholder}\n        onRemove={(e) => onRemove(e, rootElRef.current)}\n        toggleButtonTestId={toggleButtonTestId}\n        removeButtonTestId={removeButtonTestId}\n      >\n        {platform === 'ios' ? (\n          ({ isRemoving }) => {\n            if (simpleCellProps.onClick) {\n              simpleCellProps.disabled = isRemoving || !simpleCellProps.disabled;\n            }\n            return <SimpleCell {...simpleCellProps} />;\n          }\n        ) : (\n          <SimpleCell {...simpleCellProps} />\n        )}\n      </Removable>\n    );\n  }\n\n  return (\n    <div className={classNames(cellClasses, className)} style={style} ref={rootElRef}>\n      <SimpleCell {...simpleCellProps} />\n    </div>\n  );\n};\n\nCell.Checkbox = CellCheckbox;\n"],"names":["Cell","mode","onRemove","noop","removePlaceholder","onDragFinish","before","after","disabled","draggable","Component","ComponentProps","onChange","name","value","checked","defaultChecked","getRootRef","draggerLabel","DEFAULT_DRAGGABLE_LABEL","className","style","toggleButtonTestId","removeButtonTestId","restProps","dragging","setDragging","React","useState","selectable","removable","platform","usePlatform","rootElRef","useExternRef","dragger","CellDragger","elRef","onDragStateChange","checkbox","checkboxProps","CellCheckbox","simpleCellDisabled","onClick","hasActive","cellClasses","classNames","simpleCellProps","hasHover","Fragment","Removable","e","current","isRemoving","SimpleCell","div","ref","Checkbox"],"mappings":";;;;+BAkDaA;;;eAAAA;;;;;;;iEAlDU;sBACU;8BAEJ;6BACD;2BAEc;4BACE;8BACI;6BACpB;2BACY;AAwCjC,MAAMA,OAAO;QAAC,EACnBC,IAAI,EACJC,WAAWC,UAAI,EACfC,oBAAoB,SAAS,EAC7BC,YAAY,EACZC,MAAM,EACNC,KAAK,EACLC,QAAQ,EACRC,SAAS,EACTC,WAAWC,cAAc,EACzBC,QAAQ,EACRC,IAAI,EACJC,KAAK,EACLC,OAAO,EACPC,cAAc,EACdC,UAAU,EACVC,eAAeC,kCAAuB,EACtCC,SAAS,EACTC,KAAK,EACLC,kBAAkB,EAClBC,kBAAkB,EAER,WADPC;QApBHvB;QACAC;QACAE;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAE;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAE;QACAC;QACAC;QACAC;;IAGA,MAAM,CAACE,UAAUC,YAAY,GAAGC,OAAMC,QAAQ,CAAC;IAC/C,MAAMC,aAAa5B,SAAS;IAC5B,MAAM6B,YAAY7B,SAAS;IAC3B,MAAMS,YAAYmB,aAAa,UAAUlB;IAEzC,MAAMoB,WAAWC,IAAAA,wBAAW;IAE5B,MAAMC,YAAYC,IAAAA,0BAAY,EAACjB;IAE/B,MAAMkB,UAAU1B,0BACd,qBAAC2B,wBAAW;QACVC,OAAOJ;QACPb,SAAS;QACTZ,UAAUA;QACV8B,mBAAmBZ;QACnBrB,cAAcA;OAEba,gBAED;IAEJ,IAAIqB;IACJ,IAAIV,YAAY;QACd,MAAMW,gBAAmC;YACvC3B;YACAC;YACAE;YACAD;YACAP;YACAI;QACF;QACA2B,yBAAW,qBAACE,0BAAY;YAACrB,SAAS;WAAgCoB;IACpE;IAEA,MAAME,qBACJ,AAACjC,aAAa,CAACoB,cAAgBC,aAAa,CAACN,UAAUmB,OAAO,IAAKnC;IACrE,MAAMoC,YAAY,CAACF,sBAAsB,CAACjB;IAE1C,MAAMoB,cAAcC,IAAAA,gBAAU,cAE5BrB,kCACAM,aAAa,0BACbD,oCACApB,cAAc,mCACdF;IAGF,MAAMuC,kBAAmC;QACvCH,WAAWA;QACXI,UAAUJ,aAAa,CAACd;OACrBN;QACHJ,SAAS;QACTV,WAAWA;QACXJ,sBACE,qBAACqB,OAAMsB,QAAQ,QACZxC,aAAasB,aAAa,SAASI,SACnCN,cAAcU,UACdjC;QAGLC,qBACE,qBAACoB,OAAMsB,QAAQ,QACZxC,aAAasB,aAAa,SAASI,SACnC5B;;IAKP,IAAIiB,UAAUmB,OAAO,EAAE;QACrBI,gBAAgBvC,QAAQ,GAAGkC;IAC7B;IAEA,IAAIZ,WAAW;QACb,qBACE,qBAACoB,oBAAS;YACR9B,WAAW0B,IAAAA,gBAAU,EAACD,aAAazB;YACnCC,OAAOA;YACPJ,YAAYgB;YACZ7B,mBAAmBA;YACnBF,UAAU,CAACiD,IAAMjD,SAASiD,GAAGlB,UAAUmB,OAAO;YAC9C9B,oBAAoBA;YACpBC,oBAAoBA;WAEnBQ,aAAa,QACZ,CAAC,EAAEsB,UAAU,EAAE;YACb,IAAIN,gBAAgBJ,OAAO,EAAE;gBAC3BI,gBAAgBvC,QAAQ,GAAG6C,cAAc,CAACN,gBAAgBvC,QAAQ;YACpE;YACA,qBAAO,qBAAC8C,sBAAU,EAAKP;QACzB,kBAEA,qBAACO,sBAAU,EAAKP;IAIxB;IAEA,qBACE,qBAACQ;QAAInC,WAAW0B,IAAAA,gBAAU,EAACD,aAAazB;QAAYC,OAAOA;QAAOmC,KAAKvB;qBACrE,qBAACqB,sBAAU,EAAKP;AAGtB;AAEA/C,KAAKyD,QAAQ,GAAGhB,0BAAY"}