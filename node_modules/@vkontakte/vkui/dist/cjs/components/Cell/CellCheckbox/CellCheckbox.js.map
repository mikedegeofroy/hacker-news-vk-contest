{"version":3,"sources":["../../../../../src/components/Cell/CellCheckbox/CellCheckbox.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Icon20CheckBoxOff,\n  Icon20CheckBoxOn,\n  Icon24CheckBoxOff,\n  Icon24CheckBoxOn,\n  Icon24CheckCircleOff,\n  Icon24CheckCircleOn,\n} from '@vkontakte/icons';\nimport { classNames } from '@vkontakte/vkjs';\nimport { usePlatform } from '../../../hooks/usePlatform';\nimport { HasRef, HasRootRef } from '../../../types';\nimport { AdaptiveIconRenderer } from '../../AdaptiveIconRenderer/AdaptiveIconRenderer';\nimport { VisuallyHidden } from '../../VisuallyHidden/VisuallyHidden';\nimport { CellProps } from '../Cell';\nimport styles from './CellCheckbox.module.css';\n\nconst CheckBoxOn = () => (\n  <AdaptiveIconRenderer IconCompact={Icon20CheckBoxOn} IconRegular={Icon24CheckBoxOn} />\n);\n\nconst CheckBoxOff = () => (\n  <AdaptiveIconRenderer IconCompact={Icon20CheckBoxOff} IconRegular={Icon24CheckBoxOff} />\n);\n\nfunction useTypeIcon(type: NonNullable<CellCheckboxProps['type']>) {\n  const platform = usePlatform();\n\n  if (type !== 'auto') {\n    return type;\n  }\n\n  if (platform === 'ios' || platform === 'vkcom') {\n    return 'circle';\n  }\n\n  return 'square';\n}\n\nexport interface CellCheckboxProps\n  extends Pick<CellProps, 'defaultChecked' | 'checked'>,\n    React.InputHTMLAttributes<HTMLInputElement>,\n    HasRootRef<HTMLSpanElement>,\n    HasRef<HTMLInputElement> {\n  /**\n   * Вид чекбокса. Если auto, то зависит от платформы.\n   */\n  type?: 'auto' | 'circle' | 'square';\n}\n\nexport const CellCheckbox = ({\n  getRootRef,\n  getRef,\n  className,\n  style,\n  type = 'auto',\n  ...restProps\n}: CellCheckboxProps) => {\n  const typeIcon = useTypeIcon(type);\n\n  const IconOff = typeIcon === 'circle' ? Icon24CheckCircleOff : CheckBoxOff;\n  const IconOn = typeIcon === 'circle' ? Icon24CheckCircleOn : CheckBoxOn;\n\n  return (\n    <span className={classNames(styles['CellCheckbox'], className)} style={style} ref={getRootRef}>\n      <VisuallyHidden\n        {...restProps}\n        Component=\"input\"\n        type=\"checkbox\"\n        className={styles['CellCheckbox__input']}\n        getRootRef={getRef}\n      />\n      <span\n        className={classNames(styles['CellCheckbox__icon'], styles['CellCheckbox__icon--off'])}\n        aria-hidden\n      >\n        <IconOff />\n      </span>\n      <span\n        className={classNames(styles['CellCheckbox__icon'], styles['CellCheckbox__icon--on'])}\n        aria-hidden\n      >\n        <IconOn />\n      </span>\n    </span>\n  );\n};\n"],"names":["CellCheckbox","CheckBoxOn","AdaptiveIconRenderer","IconCompact","Icon20CheckBoxOn","IconRegular","Icon24CheckBoxOn","CheckBoxOff","Icon20CheckBoxOff","Icon24CheckBoxOff","useTypeIcon","type","platform","usePlatform","getRootRef","getRef","className","style","restProps","typeIcon","IconOff","Icon24CheckCircleOff","IconOn","Icon24CheckCircleOn","span","classNames","ref","VisuallyHidden","Component","aria-hidden"],"mappings":";;;;+BAkDaA;;;eAAAA;;;;;;;iEAlDU;uBAQhB;sBACoB;6BACC;sCAES;gCACN;AAI/B,MAAMC,aAAa,kBACjB,qBAACC,0CAAoB;QAACC,aAAaC,uBAAgB;QAAEC,aAAaC,uBAAgB;;AAGpF,MAAMC,cAAc,kBAClB,qBAACL,0CAAoB;QAACC,aAAaK,wBAAiB;QAAEH,aAAaI,wBAAiB;;AAGtF,SAASC,YAAYC,IAA4C;IAC/D,MAAMC,WAAWC,IAAAA,wBAAW;IAE5B,IAAIF,SAAS,QAAQ;QACnB,OAAOA;IACT;IAEA,IAAIC,aAAa,SAASA,aAAa,SAAS;QAC9C,OAAO;IACT;IAEA,OAAO;AACT;AAaO,MAAMZ,eAAe;QAAC,EAC3Bc,UAAU,EACVC,MAAM,EACNC,SAAS,EACTC,KAAK,EACLN,OAAO,MAAM,EAEK,WADfO;QALHJ;QACAC;QACAC;QACAC;QACAN;;IAGA,MAAMQ,WAAWT,YAAYC;IAE7B,MAAMS,UAAUD,aAAa,WAAWE,2BAAoB,GAAGd;IAC/D,MAAMe,SAASH,aAAa,WAAWI,0BAAmB,GAAGtB;IAE7D,qBACE,qBAACuB;QAAKR,WAAWS,IAAAA,gBAAU,sBAAyBT;QAAYC,OAAOA;QAAOS,KAAKZ;qBACjF,qBAACa,8BAAc,8CACTT;QACJU,WAAU;QACVjB,MAAK;QACLK,SAAS;QACTF,YAAYC;uBAEd,qBAACS;QACCR,WAAWS,IAAAA,gBAAU;QACrBI,eAAAA;qBAEA,qBAACT,+BAEH,qBAACI;QACCR,WAAWS,IAAAA,gBAAU;QACrBI,eAAAA;qBAEA,qBAACP;AAIT"}