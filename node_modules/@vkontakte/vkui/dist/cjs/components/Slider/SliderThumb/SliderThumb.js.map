{"version":3,"sources":["../../../../../src/components/Slider/SliderThumb/SliderThumb.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useBooleanState } from '../../../hooks/useBooleanState';\nimport { useExternRef } from '../../../hooks/useExternRef';\nimport { useFocusVisible } from '../../../hooks/useFocusVisible';\nimport { useFocusVisibleClassName } from '../../../hooks/useFocusVisibleClassName';\nimport {\n  arrowMiddleware,\n  convertFloatingDataToReactCSSProperties,\n  flipMiddleware,\n  offsetMiddleware,\n  shiftMiddleware,\n  useFloating,\n} from '../../../lib/floating';\nimport type { HasDataAttribute, HasRootRef } from '../../../types';\nimport { TooltipBase } from '../../TooltipBase/TooltipBase';\nimport styles from './SliderThumb.module.css';\n\ninterface SliderThumbProps extends HasRootRef<HTMLSpanElement>, HasDataAttribute {\n  className?: string;\n  style?: React.CSSProperties;\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement> &\n    React.RefAttributes<HTMLInputElement> &\n    HasDataAttribute;\n  withTooltip?: boolean;\n}\n\nexport const SliderThumb = ({\n  className,\n  getRootRef,\n  inputProps,\n  withTooltip,\n  ...restProps\n}: SliderThumbProps) => {\n  const { focusVisible, onBlur, onFocus } = useFocusVisible(false);\n  const focusVisibleClassNames = useFocusVisibleClassName({\n    focusVisible,\n    mode: styles['SliderThumb--focus-visible'],\n  });\n  const [arrowRef, setArrowRef] = React.useState<HTMLDivElement | null>(null);\n\n  const memoizedMiddlewares = React.useMemo(() => {\n    return [\n      offsetMiddleware({\n        crossAxis: 0,\n        mainAxis: 15,\n      }),\n      flipMiddleware(),\n      shiftMiddleware({ padding: 8 }),\n      arrowMiddleware({\n        element: arrowRef,\n      }),\n    ];\n  }, [arrowRef]);\n\n  const {\n    x: floatingDataX,\n    y: floatingDataY,\n    placement: resolvedPlacement,\n    refs,\n    strategy: floatingPositionStrategy,\n    middlewareData: { arrow: arrowCoords },\n    update: updateTooltipPosition,\n  } = useFloating({\n    placement: 'top',\n    middleware: memoizedMiddlewares,\n  });\n\n  const {\n    value: isHovered,\n    setTrue: setHoveredTrue,\n    setFalse: setHoveredFalse,\n  } = useBooleanState(false);\n\n  const handleRootRef = useExternRef<HTMLSpanElement>(getRootRef, refs.setReference);\n\n  const shouldShowTooltip = withTooltip && (focusVisible || isHovered);\n\n  const inputValue = inputProps && inputProps.value;\n  React.useEffect(\n    function udpateTooltipPositionOnValueChange() {\n      if (shouldShowTooltip && inputValue !== 'undefined') {\n        updateTooltipPosition();\n      }\n    },\n    [inputValue, updateTooltipPosition, shouldShowTooltip],\n  );\n\n  return (\n    <React.Fragment>\n      <span\n        {...restProps}\n        ref={handleRootRef}\n        onMouseEnter={setHoveredTrue}\n        onMouseLeave={setHoveredFalse}\n        className={classNames(styles['SliderThumb'], focusVisibleClassNames, className)}\n      >\n        <input\n          {...inputProps}\n          type=\"range\"\n          className={styles['SliderThumb__nativeInput']}\n          aria-orientation=\"horizontal\"\n          onBlur={onBlur}\n          onFocus={onFocus}\n        />\n      </span>\n      {shouldShowTooltip && (\n        <TooltipBase\n          appearance=\"neutral\"\n          getRootRef={refs.setFloating}\n          style={convertFloatingDataToReactCSSProperties(\n            floatingPositionStrategy,\n            floatingDataX,\n            floatingDataY,\n          )}\n          arrowProps={{\n            coords: arrowCoords,\n            placement: resolvedPlacement,\n            getRootRef: setArrowRef,\n          }}\n          text={inputValue}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n"],"names":["SliderThumb","className","getRootRef","inputProps","withTooltip","restProps","focusVisible","onBlur","onFocus","useFocusVisible","focusVisibleClassNames","useFocusVisibleClassName","mode","arrowRef","setArrowRef","React","useState","memoizedMiddlewares","useMemo","offsetMiddleware","crossAxis","mainAxis","flipMiddleware","shiftMiddleware","padding","arrowMiddleware","element","x","floatingDataX","y","floatingDataY","placement","resolvedPlacement","refs","strategy","floatingPositionStrategy","middlewareData","arrow","arrowCoords","update","updateTooltipPosition","useFloating","middleware","value","isHovered","setTrue","setHoveredTrue","setFalse","setHoveredFalse","useBooleanState","handleRootRef","useExternRef","setReference","shouldShowTooltip","inputValue","useEffect","udpateTooltipPositionOnValueChange","Fragment","span","ref","onMouseEnter","onMouseLeave","classNames","input","type","aria-orientation","TooltipBase","appearance","setFloating","style","convertFloatingDataToReactCSSProperties","arrowProps","coords","text"],"mappings":";;;;+BA2BaA;;;eAAAA;;;;;;;iEA3BU;sBACI;iCACK;8BACH;iCACG;0CACS;0BAQlC;6BAEqB;AAYrB,MAAMA,cAAc;QAAC,EAC1BC,SAAS,EACTC,UAAU,EACVC,UAAU,EACVC,WAAW,EAEM,WADdC;QAJHJ;QACAC;QACAC;QACAC;;IAGA,MAAM,EAAEE,YAAY,EAAEC,MAAM,EAAEC,OAAO,EAAE,GAAGC,IAAAA,gCAAe,EAAC;IAC1D,MAAMC,yBAAyBC,IAAAA,kDAAwB,EAAC;QACtDL;QACAM,IAAI;IACN;IACA,MAAM,CAACC,UAAUC,YAAY,GAAGC,OAAMC,QAAQ,CAAwB;IAEtE,MAAMC,sBAAsBF,OAAMG,OAAO,CAAC;QACxC,OAAO;YACLC,IAAAA,0BAAgB,EAAC;gBACfC,WAAW;gBACXC,UAAU;YACZ;YACAC,IAAAA,wBAAc;YACdC,IAAAA,yBAAe,EAAC;gBAAEC,SAAS;YAAE;YAC7BC,IAAAA,yBAAe,EAAC;gBACdC,SAASb;YACX;SACD;IACH,GAAG;QAACA;KAAS;IAEb,MAAM,EACJc,GAAGC,aAAa,EAChBC,GAAGC,aAAa,EAChBC,WAAWC,iBAAiB,EAC5BC,IAAI,EACJC,UAAUC,wBAAwB,EAClCC,gBAAgB,EAAEC,OAAOC,WAAW,EAAE,EACtCC,QAAQC,qBAAqB,EAC9B,GAAGC,IAAAA,qBAAW,EAAC;QACdV,WAAW;QACXW,YAAYzB;IACd;IAEA,MAAM,EACJ0B,OAAOC,SAAS,EAChBC,SAASC,cAAc,EACvBC,UAAUC,eAAe,EAC1B,GAAGC,IAAAA,gCAAe,EAAC;IAEpB,MAAMC,gBAAgBC,IAAAA,0BAAY,EAAkBjD,YAAY+B,KAAKmB,YAAY;IAEjF,MAAMC,oBAAoBjD,eAAgBE,CAAAA,gBAAgBsC,SAAQ;IAElE,MAAMU,aAAanD,cAAcA,WAAWwC,KAAK;IACjD5B,OAAMwC,SAAS,CACb,SAASC;QACP,IAAIH,qBAAqBC,eAAe,aAAa;YACnDd;QACF;IACF,GACA;QAACc;QAAYd;QAAuBa;KAAkB;IAGxD,qBACE,qBAACtC,OAAM0C,QAAQ,sBACb,qBAACC,oDACKrD;QACJsD,KAAKT;QACLU,cAAcd;QACde,cAAcb;QACd/C,WAAW6D,IAAAA,gBAAU,qBAAwBpD,wBAAwBT;sBAErE,qBAAC8D,qDACK5D;QACJ6D,MAAK;QACL/D,SAAS;QACTgE,oBAAiB;QACjB1D,QAAQA;QACRC,SAASA;UAGZ6C,mCACC,qBAACa,wBAAW;QACVC,YAAW;QACXjE,YAAY+B,KAAKmC,WAAW;QAC5BC,OAAOC,IAAAA,iDAAuC,EAC5CnC,0BACAP,eACAE;QAEFyC,YAAY;YACVC,QAAQlC;YACRP,WAAWC;YACX9B,YAAYY;QACd;QACA2D,MAAMnB;;AAKhB"}