{"version":3,"sources":["../../../src/helpers/math.ts"],"sourcesContent":["export const clamp = (value: number, min: number, max: number) =>\n  Math.max(min, Math.min(value, max));\n\nexport function precisionRound(number: number, precision = 1) {\n  let factor = Math.pow(10, precision);\n  return Math.round(number * factor) / factor;\n}\n\n/**\n * Решение скопировано без изменений у MUI:\n * https://github.com/mui/material-ui/blob/v5.13.7/packages/mui-base/src/useSlider/useSlider.ts#L89-L105\n */\nfunction getDecimalPrecision(num: number) {\n  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.\n  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.\n  if (Math.abs(num) < 1) {\n    const parts = num.toExponential().split('e-');\n    const matissaDecimalPart = parts[0].split('.')[1];\n    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);\n  }\n\n  const decimalPart = num.toString().split('.')[1];\n  return decimalPart ? decimalPart.length : 0;\n}\n\nfunction roundValueToStep(value: number, step: number, min: number) {\n  const nearest = Math.round((value - min) / step) * step + min;\n  return Number(nearest.toFixed(getDecimalPrecision(step)));\n}\n\nfunction decimatedClamp(val: number, min: number, max: number, step?: number) {\n  if (step == null || step <= 0) {\n    return clamp(val, min, max);\n  }\n  const roundedValue = roundValueToStep(val, step, min);\n  return clamp(roundedValue, min, max);\n}\n\nexport function rescale(\n  value: number,\n  from: [number, number],\n  to: [number, number],\n  options: { step?: number } = {},\n) {\n  const scaled = ((value - from[0]) / (from[1] - from[0])) * (to[1] - to[0]) + to[0];\n  return decimatedClamp(scaled, to[0], to[1], options.step);\n}\n"],"names":["clamp","precisionRound","rescale","value","min","max","Math","number","precision","factor","pow","round","getDecimalPrecision","num","abs","parts","toExponential","split","matissaDecimalPart","length","parseInt","decimalPart","toString","roundValueToStep","step","nearest","Number","toFixed","decimatedClamp","val","roundedValue","from","to","options","scaled"],"mappings":";;;;;;;;;;;IAAaA,KAAK;eAALA;;IAGGC,cAAc;eAAdA;;IAmCAC,OAAO;eAAPA;;;AAtCT,MAAMF,QAAQ,CAACG,OAAeC,KAAaC,MAChDC,KAAKD,GAAG,CAACD,KAAKE,KAAKF,GAAG,CAACD,OAAOE;AAEzB,SAASJ,eAAeM,MAAc,EAAEC,YAAY,CAAC;IAC1D,IAAIC,SAASH,KAAKI,GAAG,CAAC,IAAIF;IAC1B,OAAOF,KAAKK,KAAK,CAACJ,SAASE,UAAUA;AACvC;AAEA;;;CAGC,GACD,SAASG,oBAAoBC,GAAW;IACtC,0FAA0F;IAC1F,kGAAkG;IAClG,IAAIP,KAAKQ,GAAG,CAACD,OAAO,GAAG;QACrB,MAAME,QAAQF,IAAIG,aAAa,GAAGC,KAAK,CAAC;QACxC,MAAMC,qBAAqBH,KAAK,CAAC,EAAE,CAACE,KAAK,CAAC,IAAI,CAAC,EAAE;QACjD,OAAO,AAACC,CAAAA,qBAAqBA,mBAAmBC,MAAM,GAAG,CAAA,IAAKC,SAASL,KAAK,CAAC,EAAE,EAAE;IACnF;IAEA,MAAMM,cAAcR,IAAIS,QAAQ,GAAGL,KAAK,CAAC,IAAI,CAAC,EAAE;IAChD,OAAOI,cAAcA,YAAYF,MAAM,GAAG;AAC5C;AAEA,SAASI,iBAAiBpB,KAAa,EAAEqB,IAAY,EAAEpB,GAAW;IAChE,MAAMqB,UAAUnB,KAAKK,KAAK,CAAC,AAACR,CAAAA,QAAQC,GAAE,IAAKoB,QAAQA,OAAOpB;IAC1D,OAAOsB,OAAOD,QAAQE,OAAO,CAACf,oBAAoBY;AACpD;AAEA,SAASI,eAAeC,GAAW,EAAEzB,GAAW,EAAEC,GAAW,EAAEmB,IAAa;IAC1E,IAAIA,QAAQ,QAAQA,QAAQ,GAAG;QAC7B,OAAOxB,MAAM6B,KAAKzB,KAAKC;IACzB;IACA,MAAMyB,eAAeP,iBAAiBM,KAAKL,MAAMpB;IACjD,OAAOJ,MAAM8B,cAAc1B,KAAKC;AAClC;AAEO,SAASH,QACdC,KAAa,EACb4B,IAAsB,EACtBC,EAAoB,EACpBC,UAA6B,CAAC,CAAC;IAE/B,MAAMC,SAAS,AAAE/B,CAAAA,QAAQ4B,IAAI,CAAC,EAAE,AAAD,IAAMA,CAAAA,IAAI,CAAC,EAAE,GAAGA,IAAI,CAAC,EAAE,AAAD,IAAOC,CAAAA,EAAE,CAAC,EAAE,GAAGA,EAAE,CAAC,EAAE,AAAD,IAAKA,EAAE,CAAC,EAAE;IAClF,OAAOJ,eAAeM,QAAQF,EAAE,CAAC,EAAE,EAAEA,EAAE,CAAC,EAAE,EAAEC,QAAQT,IAAI;AAC1D"}