{"version":3,"sources":["../../../src/lib/select.ts"],"sourcesContent":["import * as React from 'react';\nimport { SelectType } from '../components/Select/Select';\nimport { getTextFromChildren } from './children';\n\nexport type Option = {\n  value?: unknown;\n  label?: React.ReactNode;\n  [index: string]: any;\n};\n\nexport type GetOptionLabel<O extends Option> = (option: O) => O['label'];\n\nexport type FilterFn<O extends Option> = (\n  inputValue: string,\n  option: O,\n  getOptionsLabel?: GetOptionLabel<O>,\n) => boolean;\n\nfunction getOptionLabelDefault<O extends Option>(option: O): O['label'] {\n  return option.label;\n}\n\nexport function defaultFilterFn<O extends Option>(\n  ...args: Parameters<FilterFn<O>>\n): ReturnType<FilterFn<O>> {\n  const [rawSearchQuery = '', option, getOptionLabel] = args;\n  const foundRawLabel = getOptionLabel ? getOptionLabel(option) : getOptionLabelDefault(option);\n\n  if (foundRawLabel === undefined) {\n    return false;\n  }\n\n  const searchQuery = rawSearchQuery.toLocaleLowerCase();\n  const label = getTextFromChildren(foundRawLabel).toLocaleLowerCase();\n\n  if (label.startsWith(searchQuery)) {\n    return true;\n  }\n\n  const findAllIncludes = (target = '', search = '') => {\n    const includes = [];\n    let i = target.indexOf(search);\n    while (i !== -1) {\n      includes.push(i);\n      i = target.indexOf(search, i + 1);\n    }\n    return includes;\n  };\n\n  const includes = findAllIncludes(label, searchQuery);\n\n  if (includes.length) {\n    // Ищем вхождение перед началом которого не буква\n    const letterRegexp = new RegExp('\\\\p{L}', 'u');\n\n    for (const index of includes) {\n      if (!letterRegexp.test(label[index - 1])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport const getFormFieldModeFromSelectType = (selectType: SelectType = 'default') => {\n  return selectType === 'default' ? 'default' : 'plain';\n};\n"],"names":["defaultFilterFn","getFormFieldModeFromSelectType","getOptionLabelDefault","option","label","args","rawSearchQuery","getOptionLabel","foundRawLabel","undefined","searchQuery","toLocaleLowerCase","getTextFromChildren","startsWith","findAllIncludes","target","search","includes","i","indexOf","push","length","letterRegexp","RegExp","index","test","selectType"],"mappings":";;;;;;;;;;;IAsBgBA,eAAe;eAAfA;;IA2CHC,8BAA8B;eAA9BA;;;;iEAjEU;0BAEa;AAgBpC,SAASC,sBAAwCC,MAAS;IACxD,OAAOA,OAAOC,KAAK;AACrB;AAEO,SAASJ,gBACd,GAAGK,IAA6B;IAEhC,MAAM,CAACC,iBAAiB,EAAE,EAAEH,QAAQI,eAAe,GAAGF;IACtD,MAAMG,gBAAgBD,iBAAiBA,eAAeJ,UAAUD,sBAAsBC;IAEtF,IAAIK,kBAAkBC,WAAW;QAC/B,OAAO;IACT;IAEA,MAAMC,cAAcJ,eAAeK,iBAAiB;IACpD,MAAMP,QAAQQ,IAAAA,6BAAmB,EAACJ,eAAeG,iBAAiB;IAElE,IAAIP,MAAMS,UAAU,CAACH,cAAc;QACjC,OAAO;IACT;IAEA,MAAMI,kBAAkB,CAACC,SAAS,EAAE,EAAEC,SAAS,EAAE;QAC/C,MAAMC,WAAW,EAAE;QACnB,IAAIC,IAAIH,OAAOI,OAAO,CAACH;QACvB,MAAOE,MAAM,CAAC,EAAG;YACfD,SAASG,IAAI,CAACF;YACdA,IAAIH,OAAOI,OAAO,CAACH,QAAQE,IAAI;QACjC;QACA,OAAOD;IACT;IAEA,MAAMA,WAAWH,gBAAgBV,OAAOM;IAExC,IAAIO,SAASI,MAAM,EAAE;QACnB,iDAAiD;QACjD,MAAMC,eAAe,IAAIC,OAAO,UAAU;QAE1C,KAAK,MAAMC,SAASP,SAAU;YAC5B,IAAI,CAACK,aAAaG,IAAI,CAACrB,KAAK,CAACoB,QAAQ,EAAE,GAAG;gBACxC,OAAO;YACT;QACF;IACF;IAEA,OAAO;AACT;AAEO,MAAMvB,iCAAiC,CAACyB,aAAyB,SAAS;IAC/E,OAAOA,eAAe,YAAY,YAAY;AAChD"}