/// <reference types="@vkontakte/vkui-floating-ui/utils/dom" />
import * as React from 'react';
export { getWindow, getNodeScroll, isHTMLElement, isElement, } from '@vkontakte/vkui-floating-ui/utils/dom';
export { canUseDOM, canUseEventListeners, onDOMLoaded } from '@vkontakte/vkjs';
export interface DOMContextInterface {
    /**
     * @ignore
     */
    window?: Window;
    /**
     * @ignore
     */
    document?: Document;
}
export type DOMProps = DOMContextInterface;
export declare const getDOM: () => {
    window: (Window & typeof globalThis) | undefined;
    document: Document | undefined;
};
export declare const DOMContext: React.Context<DOMContextInterface>;
export declare const useDOM: () => DOMContextInterface;
/**
 * В случае, если используется DOMContext, при проверке 'node instanceOf Window' – Window может быть
 * другим объектом.
 */
export declare const isWindow: (node: Element | Window | VisualViewport | undefined | null) => node is Window;
export declare const isBody: (node: Element | Window | VisualViewport | undefined | null) => node is HTMLBodyElement;
export declare const isDocumentElement: (node: Element | Window | VisualViewport | undefined | null) => node is HTMLHtmlElement;
export declare function withDOM<Props>(Component: React.ComponentType<Props & DOMProps>): React.ComponentType<Props>;
export declare function blurActiveElement(document: Document | undefined): void;
export declare const TRANSFORM_DEFAULT_VALUES: string[];
export declare const WILL_CHANGE_DEFAULT_VALUES: string[];
export declare function getTransformedParentCoords(element: Element): {
    x: number;
    y: number;
};
export declare const getBoundingClientRect: (node: Element | Window, isFixedStrategy?: boolean) => DOMRect;
/**
 * Адаптер над getNearestOverflowAncestor из @floating-ui/utils/dom.
 *
 * document.body подменяем на window, т.к. на document.body нельзя применить скролл.
 */
export declare const getNearestOverflowAncestor: (childEl: Node) => HTMLElement | Window | null;
export declare const getScrollHeight: (node: Element | Window) => number;
export declare const getScrollRect: (node: Element | Window) => {
    relative: DOMRect;
    edges: {
        y: [number, number];
    };
};
export declare const getDocumentBody: (node?: any) => HTMLElement;
export declare const getActiveElementByAnotherElement: (el: Element | null) => Element | null;
export declare const contains: (parent?: Element | null, child?: Element | null) => boolean;
//# sourceMappingURL=dom.d.ts.map