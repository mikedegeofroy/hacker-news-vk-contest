{"version":3,"sources":["../../src/lib/utils.ts"],"sourcesContent":["import * as React from 'react';\n\nexport type ImgOnlyAttributes = {\n  [index in Exclude<\n    keyof React.ImgHTMLAttributes<HTMLImageElement>,\n    keyof React.HTMLAttributes<HTMLImageElement>\n  >]: React.ImgHTMLAttributes<HTMLImageElement>[index];\n};\n\nexport function debounce<A extends any[]>(fn: (...args: A) => void, delay: number) {\n  let timeout: any;\n\n  return (...args: A) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => fn(...args), delay);\n  };\n}\n\nexport function setRef<T>(element: T, ref?: React.Ref<T>): void {\n  if (ref) {\n    if (typeof ref === 'function') {\n      ref(element);\n    } else {\n      (ref as React.MutableRefObject<T>).current = element;\n    }\n  }\n}\n\nexport function multiRef<T>(...refs: Array<React.Ref<T> | undefined>): React.RefObject<T> {\n  let current: T | null = null;\n  return {\n    get current() {\n      return current;\n    },\n    set current(element) {\n      current = element;\n      refs.forEach((ref) => ref && setRef(element, ref));\n    },\n  };\n}\n\nexport const stopPropagation = <T extends React.SyntheticEvent>(event: T) =>\n  event.stopPropagation();\n\nexport function addClassNameToElement(element: HTMLElement, className: string) {\n  const elementClassName = element.getAttribute('class') || '';\n  const updatedClassName = `${elementClassName}${elementClassName ? ' ' : ''}${className}`;\n\n  element.setAttribute('class', updatedClassName);\n}\n\nexport function removeClassNameFromElement(element: HTMLElement, classNameToRemove: string) {\n  const classNamesArray = (element.getAttribute('class') || '').split(/\\s+/);\n  const elementIndexToRemove = classNamesArray.findIndex(\n    (className) => className === classNameToRemove,\n  );\n  if (elementIndexToRemove === -1) {\n    return;\n  }\n  classNamesArray.splice(elementIndexToRemove, 1);\n\n  element.setAttribute('class', classNamesArray.join(' '));\n}\n\ntype ExcludeKeysWithUndefined<T> = {\n  [P in keyof T]?: Exclude<T[P], undefined>;\n};\n\nexport const excludeKeysWithUndefined = <T extends Record<string | number | symbol, any>>(\n  obj: T,\n): ExcludeKeysWithUndefined<T> => {\n  const filteredObj: ExcludeKeysWithUndefined<T> = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && obj[key] !== undefined) {\n      filteredObj[key] = obj[key];\n    }\n  }\n  return filteredObj;\n};\n\nexport const isDOMTypeElement = <\n  P extends React.HTMLAttributes<T> | React.SVGAttributes<T>,\n  T extends Element,\n>(\n  element: React.ReactElement,\n): element is Omit<React.DOMElement<P, T>, 'ref'> & { ref?: React.Ref<T> | undefined } =>\n  typeof element.type === 'string';\n\nexport function isValidNotReactFragmentElement(\n  children: Parameters<typeof React.isValidElement>[0],\n): children is React.ReactElement<Record<PropertyKey, any>> {\n  return (\n    React.isValidElement(children) &&\n    // @ts-expect-error: TS2339 $$typeof всегда symbol, в отличии от type, благодаря этому пропускаем лишние проверки на тип.\n    children.$$typeof !== Symbol.for('react.fragment')\n  );\n}\n\nexport function isForwardRefElement<\n  P extends React.HTMLAttributes<T> | React.SVGAttributes<T>,\n  T extends Element,\n>(\n  children: Parameters<typeof React.isValidElement>[0],\n): children is Omit<React.DOMElement<P, T>, 'ref'> & { ref?: React.Ref<T> | undefined } {\n  if (!React.isValidElement(children)) {\n    return false;\n  }\n\n  // @ts-expect-error: TS2339 $$typeof всегда symbol, в отличии от type, благодаря этому пропускаем лишние проверки на тип.\n  // черпаем вдохновение из react-is https://github.com/facebook/react/blob/d48dbb824985166ecb7b2959db03090a8593dce0/packages/react-is/src/ReactIs.js#L119-L121\n  const typeOfOfType = children.type && children.type.$$typeof;\n  return typeOfOfType === Symbol.for('react.forward_ref');\n}\n"],"names":["React","debounce","fn","delay","timeout","args","clearTimeout","setTimeout","setRef","element","ref","current","multiRef","refs","forEach","stopPropagation","event","addClassNameToElement","className","elementClassName","getAttribute","updatedClassName","setAttribute","removeClassNameFromElement","classNameToRemove","classNamesArray","split","elementIndexToRemove","findIndex","splice","join","excludeKeysWithUndefined","obj","filteredObj","key","hasOwnProperty","undefined","isDOMTypeElement","type","isValidNotReactFragmentElement","children","isValidElement","$$typeof","Symbol","for","isForwardRefElement","typeOfOfType"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAS/B,OAAO,SAASC,SAA0BC,EAAwB,EAAEC,KAAa;IAC/E,IAAIC;IAEJ,OAAO,CAAC,GAAGC;QACTC,aAAaF;QACbA,UAAUG,WAAW,IAAML,MAAMG,OAAOF;IAC1C;AACF;AAEA,OAAO,SAASK,OAAUC,QAAU,EAAEC,GAAkB;IACtD,IAAIA,KAAK;QACP,IAAI,OAAOA,QAAQ,YAAY;YAC7BA,IAAID;QACN,OAAO;YACJC,IAAkCC,OAAO,GAAGF;QAC/C;IACF;AACF;AAEA,OAAO,SAASG,SAAY,GAAGC,IAAqC;IAClE,IAAIF,UAAoB;IACxB,OAAO;QACL,IAAIA,WAAU;YACZ,OAAOA;QACT;QACA,IAAIA,SAAQF,QAAS;YACnBE,UAAUF;YACVI,KAAKC,OAAO,CAAC,CAACJ,MAAQA,OAAOF,OAAOC,SAASC;QAC/C;IACF;AACF;AAEA,OAAO,MAAMK,kBAAkB,CAAiCC,QAC9DA,MAAMD,eAAe,GAAG;AAE1B,OAAO,SAASE,sBAAsBR,QAAoB,EAAES,SAAiB;IAC3E,MAAMC,mBAAmBV,SAAQW,YAAY,CAAC,YAAY;IAC1D,MAAMC,mBAAmB,CAAC,EAAEF,iBAAiB,EAAEA,mBAAmB,MAAM,GAAG,EAAED,UAAU,CAAC;IAExFT,SAAQa,YAAY,CAAC,SAASD;AAChC;AAEA,OAAO,SAASE,2BAA2Bd,QAAoB,EAAEe,iBAAyB;IACxF,MAAMC,kBAAkB,AAAChB,CAAAA,SAAQW,YAAY,CAAC,YAAY,EAAC,EAAGM,KAAK,CAAC;IACpE,MAAMC,uBAAuBF,gBAAgBG,SAAS,CACpD,CAACV,YAAcA,cAAcM;IAE/B,IAAIG,yBAAyB,CAAC,GAAG;QAC/B;IACF;IACAF,gBAAgBI,MAAM,CAACF,sBAAsB;IAE7ClB,SAAQa,YAAY,CAAC,SAASG,gBAAgBK,IAAI,CAAC;AACrD;AAMA,OAAO,MAAMC,2BAA2B,CACtCC;IAEA,MAAMC,cAA2C,CAAC;IAClD,IAAK,MAAMC,OAAOF,IAAK;QACrB,IAAIA,IAAIG,cAAc,CAACD,QAAQF,GAAG,CAACE,IAAI,KAAKE,WAAW;YACrDH,WAAW,CAACC,IAAI,GAAGF,GAAG,CAACE,IAAI;QAC7B;IACF;IACA,OAAOD;AACT,EAAE;AAEF,OAAO,MAAMI,mBAAmB,CAI9B5B,WAEA,OAAOA,SAAQ6B,IAAI,KAAK,SAAS;AAEnC,OAAO,SAASC,+BACdC,QAAoD;IAEpD,OACExC,MAAMyC,cAAc,CAACD,aACrB,yHAAyH;IACzHA,SAASE,QAAQ,KAAKC,OAAOC,GAAG,CAAC;AAErC;AAEA,OAAO,SAASC,oBAIdL,QAAoD;IAEpD,IAAI,CAACxC,MAAMyC,cAAc,CAACD,WAAW;QACnC,OAAO;IACT;IAEA,yHAAyH;IACzH,6JAA6J;IAC7J,MAAMM,eAAeN,SAASF,IAAI,IAAIE,SAASF,IAAI,CAACI,QAAQ;IAC5D,OAAOI,iBAAiBH,OAAOC,GAAG,CAAC;AACrC"}