{"version":3,"sources":["../../../../src/lib/floating/useFloatingWithInteractions/types.ts"],"sourcesContent":["import type {\n  Placement,\n  UseFloatingData,\n  UseFloatingMiddleware,\n  UseFloatingRefs,\n} from '../types/common';\n\nexport type InteractiveTriggerType = 'click' | 'hover' | 'focus';\n\nexport type ManualTriggerType = 'manual';\n\nexport type TriggerType = ManualTriggerType | InteractiveTriggerType | InteractiveTriggerType[];\n\nexport type ShownChangeReason =\n  | 'click-outside'\n  | 'escape-key'\n  | 'click'\n  | 'hover'\n  | 'focus'\n  | 'callback';\n\nexport type OnShownChange = (shown: boolean, reason?: ShownChangeReason) => void;\n\nexport interface UseFloatingWithInteractionsProps {\n  placement?: Placement;\n  middlewares?: UseFloatingMiddleware[];\n  /**\n   * Механика вызова всплывающего элемента.\n   *\n   * - `\"click\"` – показывается/скрывается только при нажатии.\n   * - `\"hover\"` – будет показываться/скрывается при наведении/отведении мыши.\n   * - `\"focus\"` – будет показываться/скрывается при фокусе/потере фокуса мыши.\n   * - `\"manual\"` – будет показываться/скрывается только через свойство `shown`. `onShownChange`\n   *    будет вызываться при нажатии за пределы целевого и всплывающего элементов, а также по кнопке\n   *    ESC.\n   *\n   * > ⚠️`\"hover\"` на тач-устройствах будет работать как `\"click\"`, с одним лишь нюансом, что\n   * > не будет закрываться при повторном нажатии на целевой элемент. Для закрытия необходимо нажать\n   * > на область вне целевого элемента и выпадающего окна.\n   */\n  trigger?: TriggerType;\n  /**\n   * Количество миллисекунд, после которых произойдёт показ/скрытие всплывающего элемента\n   * при наведении.\n   *\n   * > Чтобы задать разное время на показ и скрытие, передайте массив типа `[<показ>, <скрытие>]`.\n   *\n   * > Используется только для `trigger=\"hover\"`.\n   */\n  hoverDelay?: number | [number, number];\n  /**\n   * При `trigger=\"hover\"` закрывает всплывающий элемент при нажатии на целевой элемент.\n   */\n  closeAfterClick?: boolean;\n  /**\n   * Блокирует изменение состояния.\n   */\n  disabled?: boolean;\n  /**\n   * Отключает взаимодействие со всплывающим элементом.\n   */\n  disableInteractive?: boolean;\n  /**\n   * Отключает закрытие нажатием на область вне целевого и всплывающего элемента.\n   */\n  disableCloseOnClickOutside?: boolean;\n  /**\n   * Отключает закрытие нажатием на кнопку ESC.\n   */\n  disableCloseOnEscKey?: boolean;\n  /**\n   * Начальное состояние всплывающего элемента.\n   */\n  defaultShown?: boolean;\n  /**\n   * Если передан, то всплывающий элемент будет показано/скрыто в зависимости от значения свойства.\n   */\n  shown?: boolean;\n  /**\n   * Вызывается при каждом изменении видимости всплывающего элемента.\n   */\n  onShownChange?: OnShownChange;\n}\n\nexport type ReferenceProps<T = HTMLElement> = Omit<\n  React.HTMLAttributes<T>,\n  keyof React.DOMAttributes<T>\n> &\n  Pick<React.DOMAttributes<T>, 'onMouseOver' | 'onMouseLeave' | 'onClick' | 'onFocus' | 'onBlur'>;\n\nexport type FloatingProps<T = HTMLElement> = Omit<\n  React.HTMLAttributes<T>,\n  keyof React.DOMAttributes<T> | 'style'\n> & { style: React.CSSProperties } & Pick<\n    React.DOMAttributes<T>,\n    'onMouseOver' | 'onMouseLeave' | 'onClick' | 'onAnimationStart' | 'onAnimationEnd'\n  >;\n\nexport interface UseFloatingWithInteractionsReturn<T extends HTMLElement = HTMLElement> {\n  placement: Placement;\n  shown: boolean;\n  willBeHide: boolean;\n  refs: UseFloatingRefs<T>;\n  referenceProps: ReferenceProps<T>;\n  floatingProps: FloatingProps<T>;\n  middlewareData: UseFloatingData['middlewareData'];\n  onClose(this: void): void;\n  onEscapeKeyDown?(this: void): void;\n  onRestoreFocus(this: void): boolean;\n}\n"],"names":[],"mappings":"AAkGA,WAWC"}