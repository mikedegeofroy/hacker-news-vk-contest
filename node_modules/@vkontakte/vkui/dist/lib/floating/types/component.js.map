{"version":3,"sources":["../../../../src/lib/floating/types/component.ts"],"sourcesContent":["import * as React from 'react';\nimport type { UseFloatingMiddlewaresBootstrapOptions } from '../useFloatingMiddlewaresBootstrap';\nimport type {\n  UseFloatingWithInteractionsProps,\n  UseFloatingWithInteractionsReturn,\n} from '../useFloatingWithInteractions';\nimport { OnPlacementChange } from './common';\n\n/**\n * @private используйте алиасы, если для какого-то компонента нужно экспортировать тип\n */\nexport type FloatingContentRenderProp = (\n  props: Pick<UseFloatingWithInteractionsReturn, 'onClose'>,\n) => React.ReactNode;\n\n/**\n * Общий API для всплывающих элементов.\n *\n * @private\n */\nexport interface FloatingComponentProps\n  extends UseFloatingMiddlewaresBootstrapOptions,\n    Omit<UseFloatingWithInteractionsProps, 'placement' | 'middlewares'> {\n  /**\n   * Содержимое всплывающего окна.\n   *\n   * При передаче контента в виде [render prop](https://react.dev/reference/react/cloneElement#passing-data-with-a-render-prop),\n   * в аргументе функции можно получить метод `onClose`, с помощью которого можно программно закрывать\n   * всплывающее окно.\n   */\n  content?: React.ReactNode | FloatingContentRenderProp;\n  /**\n   * Целевой элемент. Всплывающее окно появится возле него.\n   *\n   * > ⚠️ Если это пользовательский компонент, то он должен:\n   * > 1. предоставлять параметры либо `getRootRef`, либо `ref` (cм. `React.forwardRef()`) для получения ссылки на DOM-узел;\n   * > 2. принимать DOM атрибуты и события.\n   */\n  children?: React.ReactElement;\n  /**\n   * Нужно ли при навигации с клавиатуры авто-фокусироваться на всплывающий элемент.\n   */\n  autoFocus?: boolean;\n  /**\n   * Нужно ли после закрытия всплывающего элемента возвращать фокус на предыдущий активный элемент.\n   */\n  restoreFocus?: boolean;\n  /**\n   * Перебивает zIndex заданный по умолчанию.\n   */\n  zIndex?: number | string;\n  /**\n   * По умолчанию используется document.body.\n   */\n  usePortal?: boolean | HTMLElement | React.RefObject<HTMLElement>;\n  /**\n   * В зависимости от области видимости, позиция может смениться на более оптимальную,\n   * чтобы всплывающий элемент вместился в эту область видимости.\n   */\n  onPlacementChange?: OnPlacementChange;\n}\n"],"names":["React"],"mappings":"AAAA,YAAYA,WAAW,QAAQ"}