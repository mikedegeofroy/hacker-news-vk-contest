import * as React from 'react';
import type { HasRootRef } from '../types';
type InjectProps<T> = Omit<React.HTMLAttributes<T>, keyof React.DOMAttributes<T>> & React.Attributes & {
    ref?: React.Ref<T>;
};
type ExpectedReactElement<T> = React.ReactElement<HasRootRef<T> & React.DOMAttributes<T>>;
type ChildrenElement<T> = ExpectedReactElement<T> | React.ReactText | React.ReactFragment | React.ReactPortal | boolean | null | undefined;
/**
 * –§—É–Ω–∫—Ü–∏—è –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–∫–∏–Ω—É—Ç—å –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π React-—ç–ª–µ–º–µ–Ω—Ç —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ DOM —ç—Ç–æ–≥–æ
 * —ç–ª–µ–º–µ–Ω—Ç–∞.
 *
 * @param children
 * @param injectProps
 * @param externRef ‚Äì –ø–æ–ª–µ–∑–µ–Ω –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å `ref` —ç–ª–µ–º–µ–Ω—Ç—É –≤—ã—à–µ.
 *
 * üëé –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `externRef`
 * ```ts
 * const { ref } = useSomeHook();
 * const [childRef, child] = usePatchChildrenRef(children);
 * React.useLayoutEffect(() => {
 *   ref.current = childRef.current; // –∏–ª–∏ ref.current(childRef.current)
 * }, [childRef]);
 * ```
 *
 * üëç –° –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `externRef`
 * ```ts
 * const { ref } = useSomeHook();
 * const [childRef, child] = usePatchChildrenRef(children, undefined, ref);
 * ```
 *
 * @private
 */
export declare const usePatchChildren: <ElementType extends HTMLElement = HTMLElement>(children?: ChildrenElement<ElementType>, injectProps?: InjectProps<ElementType> | undefined, externRef?: React.Ref<ElementType> | undefined) => [React.MutableRefObject<ElementType | null>, ChildrenElement<ElementType>];
export {};
//# sourceMappingURL=usePatchChildren.d.ts.map