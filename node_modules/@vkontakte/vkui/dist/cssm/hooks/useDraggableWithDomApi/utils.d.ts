import type { Direction, DraggingItem, PlaceholderItem, SiblingItem } from './types';
export declare const getTargetIsOverOrUnderElData: (clientY: number, elRect: DOMRect) => {
    isUnderEl: boolean;
    isOverEl: boolean;
};
export declare const setDraggingItemShiftStyles: (draggingEl: HTMLElement, nextShiftY: number) => void;
export declare const setSiblingItemsShiftStyles: ([{ el, draggingElRect: { height }, }, direction,]: [Omit<SiblingItem, 'shifted'>, Direction]) => void;
export declare const setInitialDraggingItemStyles: ({ el, draggingElRect }: DraggingItem) => void;
export declare const unsetInitialDraggingItemStyles: ({ el }: DraggingItem) => void;
export declare const setInitialPlaceholderItemStyles: ({ el, draggingElRect }: PlaceholderItem) => void;
export declare const unsetInitialPlaceholderItemStyles: ({ el }: PlaceholderItem) => void;
export declare const setInitialSiblingItemStyles: ({ el, shifted, draggingElRect }: SiblingItem) => void;
export declare const unsetInitialSiblingItemStyles: ({ el }: Omit<SiblingItem, 'shifted'>) => void;
//# sourceMappingURL=utils.d.ts.map