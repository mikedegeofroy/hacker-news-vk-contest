{"version":3,"sources":["../../../../src/components/ChipsInputBase/ChipsInputBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { isHTMLElement } from '@vkontakte/vkui-floating-ui/utils/dom';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { getHorizontalFocusGoTo, Keys } from '../../lib/accessibility';\nimport {\n  contains as checkTargetIsInputEl,\n  contains,\n  getActiveElementByAnotherElement,\n} from '../../lib/dom';\nimport { FormField } from '../FormField/FormField';\nimport { Text } from '../Typography/Text/Text';\nimport { DEFAULT_INPUT_VALUE, DEFAULT_VALUE, renderChipDefault } from './constants';\nimport {\n  getChipOptionIndexByHTMLElement,\n  getChipOptionIndexByValueProp,\n  getChipOptionValueByHTMLElement,\n  getNextChipOptionIndexByNavigateToProp,\n  isInputValueEmpty,\n} from './helpers';\nimport type { ChipOption, ChipOptionValue, ChipsInputBasePrivateProps, NavigateTo } from './types';\nimport styles from './ChipsInputBase.module.css';\n\nconst sizeYClassNames = {\n  none: styles['ChipsInputBase--sizeY-none'],\n  compact: styles['ChipsInputBase--sizeY-compact'],\n} as const;\n\nexport const ChipsInputBase = <O extends ChipOption>({\n  // FormFieldProps\n  getRootRef,\n  style,\n  className,\n  before,\n  after,\n  status,\n  mode,\n\n  // option\n  value = DEFAULT_VALUE,\n  onAddChipOption,\n  onRemoveChipOption: onRemoveChipOptionProp,\n  renderChip = renderChipDefault,\n\n  // input\n  getRef,\n  id: idProp,\n  inputValue = DEFAULT_INPUT_VALUE,\n  placeholder,\n  disabled,\n  readOnly,\n  addOnBlur,\n  onBlur,\n  onInputChange,\n  ...restProps\n}: ChipsInputBasePrivateProps<O>) => {\n  const { sizeY = 'none' } = useAdaptivity();\n  const idGenerated = React.useId();\n  const inputRef = useExternRef(getRef);\n  const listboxRef = React.useRef<HTMLDivElement>(null);\n\n  const valueLength = value.length;\n  const withPlaceholder = valueLength === 0;\n  const [lastFocusedChipOptionIndex, setLastFocusedChipOptionIndex] = React.useState(0);\n\n  const resetChipOptionFocusToInputEl = (inputEl: HTMLInputElement) => {\n    setLastFocusedChipOptionIndex(0);\n    inputEl.focus();\n  };\n\n  const moveFocusToChipOption = (\n    currentIndex: number,\n    navigateTo: NavigateTo,\n    listboxEl: HTMLElement,\n  ) => {\n    const index = getNextChipOptionIndexByNavigateToProp(currentIndex, navigateTo, valueLength);\n    // eslint-disable-next-line no-restricted-properties\n    const foundEl = listboxEl.querySelector<HTMLElement>(`[data-index=\"${index}\"]`);\n\n    if (foundEl) {\n      setLastFocusedChipOptionIndex(index);\n      foundEl.focus();\n    }\n  };\n\n  const removeChipOption = (o: O | ChipOptionValue, index: number) => {\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (!inputRef.current || !listboxRef.current) {\n      return;\n    }\n\n    if (valueLength > 1) {\n      if (index === valueLength - 1) {\n        moveFocusToChipOption(index, 'prev', listboxRef.current);\n      } else {\n        moveFocusToChipOption(index, 'next', listboxRef.current);\n      }\n    } else {\n      resetChipOptionFocusToInputEl(inputRef.current);\n    }\n\n    onRemoveChipOptionProp(o);\n  };\n\n  const handleListboxKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const targetEl = event.target;\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (event.defaultPrevented || !listboxRef.current || !isHTMLElement(targetEl)) {\n      return;\n    }\n\n    switch (event.key) {\n      case Keys.ENTER: {\n        if (\n          !readOnly &&\n          checkTargetIsInputEl(targetEl, inputRef.current) &&\n          inputRef.current &&\n          !isInputValueEmpty(inputRef.current)\n        ) {\n          event.preventDefault();\n          onAddChipOption(inputRef.current.value);\n        }\n        break;\n      }\n      case Keys.DELETE:\n      case Keys.BACKSPACE: {\n        if (!readOnly && valueLength > 0) {\n          if (!checkTargetIsInputEl(targetEl, inputRef.current)) {\n            event.preventDefault();\n            removeChipOption(\n              getChipOptionValueByHTMLElement(targetEl),\n              getChipOptionIndexByHTMLElement(targetEl),\n            );\n          } else if (event.key === Keys.BACKSPACE && isInputValueEmpty(inputRef.current)) {\n            event.preventDefault();\n            moveFocusToChipOption(\n              getChipOptionIndexByHTMLElement(targetEl),\n              'last',\n              listboxRef.current,\n            );\n          }\n        }\n        break;\n      }\n      case Keys.ARROW_UP:\n      case Keys.ARROW_LEFT:\n      case Keys.ARROW_DOWN:\n      case Keys.ARROW_RIGHT: {\n        if (valueLength !== 0 && !checkTargetIsInputEl(targetEl, inputRef.current)) {\n          event.preventDefault();\n          moveFocusToChipOption(\n            getChipOptionIndexByHTMLElement(targetEl),\n            getHorizontalFocusGoTo(event.key),\n            listboxRef.current,\n          );\n        }\n        break;\n      }\n    }\n  };\n\n  const handleInputBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (addOnBlur && !event.defaultPrevented && inputRef.current) {\n      onAddChipOption(inputRef.current.value);\n    }\n  };\n\n  const handleChipRemove = (event: React.MouseEvent, v: ChipOptionValue) => {\n    event.preventDefault();\n    event.stopPropagation();\n    removeChipOption(v, getChipOptionIndexByValueProp(v, value));\n  };\n\n  const handleRootClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (contains(event.currentTarget, getActiveElementByAnotherElement(event.currentTarget))) {\n      return;\n    }\n\n    if (valueLength > 0 && listboxRef.current) {\n      moveFocusToChipOption(0, 'first', listboxRef.current);\n    } else if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <FormField\n      Component=\"div\"\n      getRootRef={getRootRef}\n      style={style}\n      disabled={disabled}\n      before={before}\n      after={after}\n      status={status}\n      mode={mode}\n      className={className}\n      onClick={disabled ? undefined : handleRootClick}\n    >\n      <div\n        className={classNames(\n          styles['ChipsInputBase'],\n          sizeY !== 'regular' && sizeYClassNames[sizeY],\n          withPlaceholder && styles['ChipsInputBase--hasPlaceholder'],\n        )}\n        // для a11y\n        ref={listboxRef}\n        role=\"listbox\"\n        aria-orientation=\"horizontal\"\n        aria-disabled={disabled}\n        aria-readonly={readOnly}\n        onKeyDown={disabled ? undefined : handleListboxKeyDown}\n      >\n        {value.map((option, index) => (\n          <React.Fragment key={`${typeof option.value}-${option.label}`}>\n            {renderChip(\n              {\n                'Component': 'div',\n                'value': option.value,\n                'label': option.label,\n                'disabled': disabled,\n                'readOnly': readOnly,\n                'className': styles['ChipsInputBase__chip'],\n                'onRemove': handleChipRemove,\n                // чтобы можно было легче найти этот чип в DOM\n                'data-index': index,\n                'data-value': option.value,\n                // для a11y\n                'tabIndex': lastFocusedChipOptionIndex === index ? 0 : -1,\n                'role': 'option',\n                'aria-selected': true,\n                'aria-posinset': index + 1,\n                'aria-setsize': valueLength,\n              },\n              option,\n            )}\n          </React.Fragment>\n        ))}\n        <Text\n          autoCapitalize=\"none\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          {...restProps}\n          Component=\"input\"\n          type=\"text\"\n          id={idProp || `chips-input-base-generated-id-${idGenerated}`}\n          getRootRef={inputRef}\n          className={styles['ChipsInputBase__el']}\n          disabled={disabled}\n          readOnly={readOnly}\n          placeholder={withPlaceholder ? placeholder : undefined}\n          value={inputValue}\n          onChange={onInputChange}\n          onBlur={handleInputBlur}\n        />\n      </div>\n    </FormField>\n  );\n};\n"],"names":["React","classNames","isHTMLElement","useAdaptivity","useExternRef","getHorizontalFocusGoTo","Keys","contains","checkTargetIsInputEl","getActiveElementByAnotherElement","FormField","Text","DEFAULT_INPUT_VALUE","DEFAULT_VALUE","renderChipDefault","getChipOptionIndexByHTMLElement","getChipOptionIndexByValueProp","getChipOptionValueByHTMLElement","getNextChipOptionIndexByNavigateToProp","isInputValueEmpty","styles","sizeYClassNames","none","compact","ChipsInputBase","getRootRef","style","className","before","after","status","mode","value","onAddChipOption","onRemoveChipOption","onRemoveChipOptionProp","renderChip","getRef","id","idProp","inputValue","placeholder","disabled","readOnly","addOnBlur","onBlur","onInputChange","restProps","sizeY","idGenerated","useId","inputRef","listboxRef","useRef","valueLength","length","withPlaceholder","lastFocusedChipOptionIndex","setLastFocusedChipOptionIndex","useState","resetChipOptionFocusToInputEl","inputEl","focus","moveFocusToChipOption","currentIndex","navigateTo","listboxEl","index","foundEl","querySelector","removeChipOption","o","current","handleListboxKeyDown","event","targetEl","target","defaultPrevented","key","ENTER","preventDefault","DELETE","BACKSPACE","ARROW_UP","ARROW_LEFT","ARROW_DOWN","ARROW_RIGHT","handleInputBlur","handleChipRemove","v","stopPropagation","handleRootClick","currentTarget","Component","onClick","undefined","div","ref","role","aria-orientation","aria-disabled","aria-readonly","onKeyDown","map","option","Fragment","label","autoCapitalize","autoComplete","autoCorrect","spellCheck","type","onChange"],"mappings":"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"}