{"version":3,"sources":["../../../../src/components/ChipsInput/useChipsInput.ts"],"sourcesContent":["import * as React from 'react';\nimport { useCustomEnsuredControl, useEnsuredControl } from '../../hooks/useEnsuredControl';\nimport { simulateReactInput, type SimulateReactInputTargetState } from '../../lib/react';\nimport {\n  DEFAULT_INPUT_VALUE,\n  DEFAULT_VALUE,\n  getNewOptionDataDefault,\n  getOptionLabelDefault,\n  getOptionValueDefault,\n} from '../ChipsInputBase/constants';\nimport { isValueLikeChipOptionObject } from '../ChipsInputBase/helpers';\nimport type {\n  ChipOption,\n  ChipOptionValue,\n  GetNewOptionData,\n  GetOptionLabel,\n  GetOptionValue,\n  UseChipsInputBaseProps,\n} from '../ChipsInputBase/types';\n\nexport const transformValue = <O extends ChipOption>(\n  value: O[],\n  getOptionValue: GetOptionValue<O>,\n  getOptionLabel: GetOptionLabel<O>,\n) =>\n  value.map((option) => ({\n    ...option,\n    label: getOptionLabel(option),\n    value: getOptionValue(option),\n  }));\n\ninterface ToggleOption<O extends ChipOption> {\n  (optionForAdd: O | string, isNewValue: true): void;\n  (optionForRemove: O | ChipOptionValue, isNewValue: false): void;\n}\n\nexport interface UseChipsInputProps<O extends ChipOption = ChipOption>\n  extends UseChipsInputBaseProps<O> {\n  /**\n   * Селектор значения.\n   */\n  getOptionValue?: GetOptionValue<O>;\n  /**\n   * Селектор пользовательского представления.\n   */\n  getOptionLabel?: GetOptionLabel<O>;\n  /**\n   * Функция для создания новой опции.\n   */\n  getNewOptionData?: GetNewOptionData<O>;\n}\n\nexport const useChipsInput = <O extends ChipOption>({\n  // option\n  value: valueProp,\n  defaultValue = DEFAULT_VALUE,\n  onChange,\n  getOptionLabel = getOptionLabelDefault,\n  getOptionValue = getOptionValueDefault,\n  getNewOptionData = getNewOptionDataDefault,\n\n  // input\n  inputValue: inputValueProp,\n  defaultInputValue = DEFAULT_INPUT_VALUE,\n  onInputChange,\n\n  // other\n  disabled,\n}: UseChipsInputProps<O>) => {\n  const [value, setValue] = useCustomEnsuredControl({\n    disabled,\n    value: valueProp ? transformValue(valueProp, getOptionValue, getOptionLabel) : undefined,\n    defaultValue: transformValue(defaultValue, getOptionValue, getOptionLabel),\n    onChange,\n  });\n\n  const inputRef = React.useRef<HTMLInputElement & SimulateReactInputTargetState>(null);\n  const [inputValue, setInputChange] = useEnsuredControl({\n    disabled,\n    value: inputValueProp,\n    defaultValue: defaultInputValue,\n    onChange: onInputChange,\n  });\n\n  const toggleOption: ToggleOption<O> = React.useCallback(\n    (nextValueProp: O | ChipOptionValue, isNewValue: boolean) => {\n      setValue((prevValue) => {\n        const isLikeObjectOption = isValueLikeChipOptionObject(nextValueProp);\n        const resolvedOption = isLikeObjectOption\n          ? getNewOptionData(nextValueProp.value, nextValueProp.label)\n          : getNewOptionData(nextValueProp, typeof nextValueProp === 'string' ? nextValueProp : '');\n        const nextValue = prevValue.filter((option: O) => resolvedOption.value !== option.value);\n\n        if (isNewValue === true) {\n          nextValue.push(\n            isLikeObjectOption ? { ...nextValueProp, ...resolvedOption } : resolvedOption,\n          );\n        }\n\n        return nextValue;\n      });\n    },\n    [setValue, getNewOptionData],\n  );\n\n  const clearInput = React.useCallback(() => {\n    /* istanbul ignore if */\n    if (!inputRef.current) {\n      return;\n    }\n    simulateReactInput(inputRef.current, '');\n  }, [inputRef]);\n\n  const addOption = React.useCallback(\n    (newValue: O | string) => toggleOption(newValue, true),\n    [toggleOption],\n  );\n\n  const removeOption = React.useCallback(\n    (newValue: O | ChipOptionValue) => toggleOption(newValue, false),\n    [toggleOption],\n  );\n\n  const addOptionFromInput = React.useCallback(\n    (inputValue: string) => {\n      const label = inputValue.trim();\n      if (label) {\n        addOption(label);\n        clearInput();\n      }\n    },\n    [addOption, clearInput],\n  );\n\n  return {\n    value,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n\n    inputRef,\n    inputValue,\n    onInputChange: setInputChange,\n    clearInput,\n  };\n};\n"],"names":["React","useCustomEnsuredControl","useEnsuredControl","simulateReactInput","DEFAULT_INPUT_VALUE","DEFAULT_VALUE","getNewOptionDataDefault","getOptionLabelDefault","getOptionValueDefault","isValueLikeChipOptionObject","transformValue","value","getOptionValue","getOptionLabel","map","option","label","useChipsInput","valueProp","defaultValue","onChange","getNewOptionData","inputValue","inputValueProp","defaultInputValue","onInputChange","disabled","setValue","undefined","inputRef","useRef","setInputChange","toggleOption","useCallback","nextValueProp","isNewValue","prevValue","isLikeObjectOption","resolvedOption","nextValue","filter","push","clearInput","current","addOption","newValue","removeOption","addOptionFromInput","trim"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,uBAAuB,EAAEC,iBAAiB,QAAQ,gCAAgC;AAC3F,SAASC,kBAAkB,QAA4C,kBAAkB;AACzF,SACEC,mBAAmB,EACnBC,aAAa,EACbC,uBAAuB,EACvBC,qBAAqB,EACrBC,qBAAqB,QAChB,8BAA8B;AACrC,SAASC,2BAA2B,QAAQ,4BAA4B;AAUxE,OAAO,MAAMC,iBAAiB,CAC5BC,OACAC,gBACAC,iBAEAF,MAAMG,GAAG,CAAC,CAACC,SAAY,CAAA;YACrB,GAAGA,MAAM;YACTC,OAAOH,eAAeE;YACtBJ,OAAOC,eAAeG;QACxB,CAAA,GAAI;AAuBN,OAAO,MAAME,gBAAgB,CAAuB,EAClD,SAAS;AACTN,OAAOO,SAAS,EAChBC,eAAed,aAAa,EAC5Be,QAAQ,EACRP,iBAAiBN,qBAAqB,EACtCK,iBAAiBJ,qBAAqB,EACtCa,mBAAmBf,uBAAuB,EAE1C,QAAQ;AACRgB,YAAYC,cAAc,EAC1BC,oBAAoBpB,mBAAmB,EACvCqB,aAAa,EAEb,QAAQ;AACRC,QAAQ,EACc;IACtB,MAAM,CAACf,OAAOgB,SAAS,GAAG1B,wBAAwB;QAChDyB;QACAf,OAAOO,YAAYR,eAAeQ,WAAWN,gBAAgBC,kBAAkBe;QAC/ET,cAAcT,eAAeS,cAAcP,gBAAgBC;QAC3DO;IACF;IAEA,MAAMS,WAAW7B,MAAM8B,MAAM,CAAmD;IAChF,MAAM,CAACR,YAAYS,eAAe,GAAG7B,kBAAkB;QACrDwB;QACAf,OAAOY;QACPJ,cAAcK;QACdJ,UAAUK;IACZ;IAEA,MAAMO,eAAgChC,MAAMiC,WAAW,CACrD,CAACC,eAAoCC;QACnCR,SAAS,CAACS;YACR,MAAMC,qBAAqB5B,4BAA4ByB;YACvD,MAAMI,iBAAiBD,qBACnBhB,iBAAiBa,cAAcvB,KAAK,EAAEuB,cAAclB,KAAK,IACzDK,iBAAiBa,eAAe,OAAOA,kBAAkB,WAAWA,gBAAgB;YACxF,MAAMK,YAAYH,UAAUI,MAAM,CAAC,CAACzB,SAAcuB,eAAe3B,KAAK,KAAKI,OAAOJ,KAAK;YAEvF,IAAIwB,eAAe,MAAM;gBACvBI,UAAUE,IAAI,CACZJ,qBAAqB;oBAAE,GAAGH,aAAa;oBAAE,GAAGI,cAAc;gBAAC,IAAIA;YAEnE;YAEA,OAAOC;QACT;IACF,GACA;QAACZ;QAAUN;KAAiB;IAG9B,MAAMqB,aAAa1C,MAAMiC,WAAW,CAAC;QACnC,sBAAsB,GACtB,IAAI,CAACJ,SAASc,OAAO,EAAE;YACrB;QACF;QACAxC,mBAAmB0B,SAASc,OAAO,EAAE;IACvC,GAAG;QAACd;KAAS;IAEb,MAAMe,YAAY5C,MAAMiC,WAAW,CACjC,CAACY,WAAyBb,aAAaa,UAAU,OACjD;QAACb;KAAa;IAGhB,MAAMc,eAAe9C,MAAMiC,WAAW,CACpC,CAACY,WAAkCb,aAAaa,UAAU,QAC1D;QAACb;KAAa;IAGhB,MAAMe,qBAAqB/C,MAAMiC,WAAW,CAC1C,CAACX;QACC,MAAMN,QAAQM,WAAW0B,IAAI;QAC7B,IAAIhC,OAAO;YACT4B,UAAU5B;YACV0B;QACF;IACF,GACA;QAACE;QAAWF;KAAW;IAGzB,OAAO;QACL/B;QACAiC;QACAG;QACAD;QAEAjB;QACAP;QACAG,eAAeM;QACfW;IACF;AACF,EAAE"}