import * as React from 'react';
import { HasRef, HasRootRef, LiteralUnion } from '../../../types';
import type { ImageBaseSize } from '../../ImageBase/ImageBase';
import { TappableProps } from '../../Tappable/Tappable';
import { SubheadProps } from '../../Typography/Subhead/Subhead';
export interface HorizontalCellShowMoreProps extends Omit<TappableProps, 'getRootRef' | 'size'>, HasRef<HTMLElement>, HasRootRef<HTMLDivElement> {
    /**
     * Задаёт высоту компонента. Должeн соответствовать размеру картинок
     * внутри соседних `HorizontalCell` компонентов.
     *
     * Используйте размеры заданные дизайн-системой (см. типы).
     *
     * > ⚠️ Использование кастомного размера – это пограничный кейс.
     *
     * Игнорируется если `size='s'`.
     */
    height?: LiteralUnion<ImageBaseSize, number>;
    /**
     * Задаёт размер компонента. Аналогичен такому же пропу у [HorizontalCell](https://vkcom.github.io/VKUI/#/HorizontalCellShowMore?id=props).
     * Должен соответствовать значению пропа `size` соседних `HorizontalCell`.
     */
    size?: 's' | 'm' | 'l';
    /**
     * Предназначен для отрисовки текста.
     * По умолчанию для `size='s'` содержит текст `Все` для других размеров `Показать все`.
     * */
    children?: SubheadProps['children'];
    /**
     * Позволяет компенсировать особый правый отступ у предшевствующего элементa `HorizontalCell`,
     * в том случае, если тот элемент последний в родителе.
     * Если `HorizontalCellShowMore` находится на одном уровне с остальными `HorizontalCell`, то этот проп использовать не нужно.
     */
    compensateLastCellIndent?: boolean;
}
export declare const HorizontalCellShowMore: ({ className, style, getRef, getRootRef, compensateLastCellIndent, height, size, children, ...restProps }: HorizontalCellShowMoreProps) => React.JSX.Element;
//# sourceMappingURL=HorizontalCellShowMore.d.ts.map