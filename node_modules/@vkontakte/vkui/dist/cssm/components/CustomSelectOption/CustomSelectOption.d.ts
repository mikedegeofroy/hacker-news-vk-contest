import * as React from 'react';
import { HTMLAttributesWithRootRef } from '../../types';
export interface CustomSelectOptionProps extends HTMLAttributesWithRootRef<HTMLDivElement> {
    /**
     * Добавляет описание под основным блоком.
     */
    description?: React.ReactNode;
    /**
     * Вставляет элемент в начало блока перед основным контентом.
     * Например, можно передать компонент `Avatar`, `Icon<Name>` или другие изображения.
     */
    before?: React.ReactNode;
    /**
     * Вставляет элемент в конец блока после основного контента.
     * Например, можно передать компонент `Avatar`, `Icon<Name>` или другие изображения.
     */
    after?: React.ReactNode;
    /**
     * Позволяет создавать вложенность.
     */
    hierarchy?: number;
    /**
     * Включает состояние выбранного элемента списка.
     */
    selected?: boolean;
    /**
     * Включает состояние наведения.
     */
    hovered?: boolean;
    /**
     * Включает состояние фокуса.
     */
    focused?: boolean;
    /**
     * Блокирует весь блок.
     *
     * > ⚠️  Важно: если CustomSelectOption используется внутри [Select](https://vkcom.github.io/VKUI/#/Select), [CustomSelect](https://vkcom.github.io/VKUI/#/CustomSelect) или [ChipsSelect](https://vkcom.github.io/VKUI/#/ChipsSelect), то свойство явно должно выставляться только через структуру `options`.
     * > Запрещается выставлять `disabled` проп опциям в обход `options`, иначе [CustomSelect](https://vkcom.github.io/VKUI/#/CustomSelect) и [ChipsSelect](https://vkcom.github.io/VKUI/#/ChipsSelect) не будут знать об актуальном состоянии
     * опции.
     */
    disabled?: boolean;
}
/**
 * @see https://vkcom.github.io/VKUI/#/CustomSelectOption
 */
export declare const CustomSelectOption: ({ children, hierarchy, hovered: hoveredProp, selected, before, after, description, disabled, style: styleProp, className, onClick, ...restProps }: CustomSelectOptionProps) => React.JSX.Element;
//# sourceMappingURL=CustomSelectOption.d.ts.map