{"version":3,"sources":["../../../../src/components/ChipsSelect/ChipsSelect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { useGlobalOnClickOutside } from '../../hooks/useGlobalOnClickOutside';\nimport { Keys } from '../../lib/accessibility';\nimport type { Placement } from '../../lib/floating';\nimport { defaultFilterFn } from '../../lib/select';\nimport { ChipsInputBase } from '../ChipsInputBase/ChipsInputBase';\nimport {\n  getNewOptionDataDefault,\n  getOptionLabelDefault,\n  getOptionValueDefault,\n  renderChipDefault,\n} from '../ChipsInputBase/constants';\nimport type { ChipOption, ChipsInputBaseProps } from '../ChipsInputBase/types';\nimport { CustomSelectDropdown } from '../CustomSelectDropdown/CustomSelectDropdown';\nimport {\n  CustomSelectOption,\n  type CustomSelectOptionProps,\n} from '../CustomSelectOption/CustomSelectOption';\nimport { DropdownIcon } from '../DropdownIcon/DropdownIcon';\nimport type { FormFieldProps } from '../FormField/FormField';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport {\n  DEFAULT_EMPTY_TEXT,\n  DEFAULT_SELECTED_BEHAVIOR,\n  FOCUS_ACTION_NEXT,\n  FOCUS_ACTION_PREV,\n  isCreateNewOptionPreset,\n  isEmptyOptionPreset,\n  isNotServicePreset,\n  renderOptionDefault,\n} from './constants';\nimport type { FocusActionType, OptionPreset } from './types';\nimport { useChipsSelect, type UseChipsSelectProps } from './useChipsSelect';\nimport styles from './ChipsSelect.module.css';\n\nconst stylesDropdownVerticalPlacement = {\n  top: styles['ChipsSelect--pop-up'],\n  bottom: styles['ChipsSelect--pop-down'],\n} as const;\n\nconst findIndexAfter = <O extends ChipOption>(\n  options: Array<OptionPreset<O>> = [],\n  startIndex = -1,\n) => {\n  if (startIndex >= options.length - 1) {\n    return -1;\n  }\n  return options.findIndex(\n    (option, i) => i > startIndex && (!isNotServicePreset(option) || !option.disabled),\n  );\n};\n\nconst findIndexBefore = <O extends ChipOption>(\n  options: Array<OptionPreset<O>> = [],\n  endIndex: number = options.length,\n) => {\n  let result = -1;\n  if (endIndex <= 0) {\n    return result;\n  }\n  for (let i = endIndex - 1; i >= 0; i--) {\n    let option = options[i];\n\n    if (!isNotServicePreset(option) || !option.disabled) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nexport interface ChipsSelectProps<O extends ChipOption>\n  extends ChipsInputBaseProps<O>,\n    UseChipsSelectProps<O>,\n    Pick<FormFieldProps, 'status' | 'mode' | 'before'> {\n  placement?: 'top' | 'bottom';\n  /**\n   * Отрисовка Spinner вместо списка опций в выпадающем списке\n   */\n  fetching?: boolean;\n  /**\n   * Закрытие выпадающего списка после выбора элемента\n   */\n  closeAfterSelect?: boolean;\n  /**\n   * Ширина раскрывающегося списка зависит от контента\n   */\n  dropdownAutoWidth?: boolean;\n  /**\n   * Принудительно использовать портал.\n   */\n  forceDropdownPortal?: boolean;\n  /**\n   * Передача `data-testid`.\n   */\n  dropdownTestId?: string;\n  /**\n   * Иконка раскрывающегося списка\n   */\n  icon?: React.ReactNode;\n  /**\n   * Добавляет значение в список на событие `onBlur` (использовать вместе с `creatable`)\n   */\n  addOnBlur?: boolean;\n  /**\n   * Отключает максимальную высоту по умолчанию\n   */\n  noMaxHeight?: boolean;\n\n  renderOption?(props: CustomSelectOptionProps, option: O): React.ReactNode;\n  /**\n   * Событие срабатывающее перед onChange\n   */\n  onChangeStart?(event: React.MouseEvent | React.KeyboardEvent, option: O): void;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/ChipsSelect\n */\nexport const ChipsSelect = <Option extends ChipOption>({\n  // FormFieldProps\n  id: labelledbyId,\n  getRootRef,\n  className,\n  status = 'default',\n  icon: dropdownIconProp,\n  onChangeStart,\n\n  // CustomSelectDropdownProps\n  options: optionsProp,\n  placement: placementProp = 'bottom',\n  closeAfterSelect = true,\n  selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n  emptyText = DEFAULT_EMPTY_TEXT,\n  creatable = false,\n  fetching = false,\n  dropdownAutoWidth,\n  forceDropdownPortal,\n  noMaxHeight = false,\n  filterFn = defaultFilterFn,\n  dropdownTestId,\n\n  // ChipsInputProps\n  getRef,\n  value: valueProp,\n  defaultValue,\n  inputValue: inputValueProp,\n  defaultInputValue,\n  disabled,\n  readOnly,\n  getOptionValue = getOptionValueDefault,\n  getOptionLabel = getOptionLabelDefault,\n  getNewOptionData = getNewOptionDataDefault,\n  renderChip = renderChipDefault,\n  renderOption = renderOptionDefault,\n  onChange,\n  onFocus: onFocusProp,\n  onInputChange: onInputChangeProp,\n  onBlur: onBlurProp,\n  onKeyDown: onKeyDownProp,\n  ...restProps\n}: ChipsSelectProps<Option>) => {\n  const {\n    // Связано с ChipsInputProps\n    // option\n    value,\n    addOptionFromInput,\n    addOption,\n    removeOption,\n    // input\n    inputRef: inputRefHook,\n    inputValue,\n    clearInput,\n    onInputChange,\n\n    // Связано с CustomSelectDropdownProps\n    options,\n    opened,\n    setOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex,\n  } = useChipsSelect({\n    // option\n    value: valueProp,\n    defaultValue,\n    onChange,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n\n    // input\n    inputValue: inputValueProp,\n    defaultInputValue,\n    onInputChange: onInputChangeProp,\n\n    // dropdown\n    options: optionsProp,\n    emptyText,\n    creatable,\n    filterFn,\n    selectedBehavior,\n\n    // other\n    disabled,\n  });\n\n  // Связано с ChipsInputProps\n  const rootRef = useExternRef(getRootRef);\n  const inputRef = useExternRef(getRef, inputRefHook);\n\n  // Связано с CustomSelectDropdownProps\n  const [dropdownVerticalPlacement, setDropdownVerticalPlacement] = React.useState<\n    Extract<Placement, 'top' | 'bottom'> | undefined\n  >(placementProp);\n  const dropdownId = React.useId();\n  const dropdownCurrentItemId =\n    focusedOptionIndex !== null ? `${dropdownId}-${focusedOptionIndex}` : undefined;\n  const dropdownScrollBoxRef = React.useRef<HTMLDivElement>(null);\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onFocusProp) {\n      onFocusProp(event);\n    }\n\n    if (!readOnly) {\n      setOpened(true);\n      setFocusedOptionIndex(null);\n    }\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onBlurProp) {\n      onBlurProp(event);\n    }\n\n    // Не добавляем значение, если его нужно выбрать строго из списка\n    if (!readOnly && !event.defaultPrevented && !creatable) {\n      event.preventDefault();\n    }\n  };\n\n  const chipsSelectOptions = React.useRef<HTMLElement[]>([]).current;\n\n  const scrollToElement = (index: number, center = false) => {\n    const dropdown = dropdownScrollBoxRef.current;\n    const item = chipsSelectOptions[index];\n\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (!item || !dropdown) {\n      return;\n    }\n\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n\n    /* istanbul ignore next: нет представления как воспроизвести */\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  };\n\n  const focusOptionByIndex = (index: number, oldIndex: number | null) => {\n    const length = options.length;\n\n    if (index < 0) {\n      index = length - 1;\n    } else if (index >= length) {\n      index = 0;\n    }\n\n    if (index === oldIndex) {\n      /* istanbul ignore next: нет представления как воспроизвести */\n      return;\n    }\n\n    const option = options[index];\n\n    if (isNotServicePreset(option) && option.disabled) {\n      return;\n    }\n\n    scrollToElement(index);\n    setFocusedOptionIndex(index);\n  };\n\n  const focusOption = (nextIndex: number | null, type: FocusActionType) => {\n    let index = nextIndex === null ? -1 : nextIndex;\n\n    if (type === FOCUS_ACTION_NEXT) {\n      const nextIndex = findIndexAfter(options, index);\n      index = nextIndex === -1 ? findIndexAfter(options) : nextIndex; // Следующий за index или первый валидный до index\n    } else if (type === FOCUS_ACTION_PREV) {\n      const beforeIndex = findIndexBefore(options, index);\n      index = beforeIndex === -1 ? findIndexBefore(options) : beforeIndex; // Предшествующий index или последний валидный после index\n    }\n\n    focusOptionByIndex(index, focusedOptionIndex);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (onKeyDownProp) {\n      onKeyDownProp(event);\n    }\n\n    if (event.defaultPrevented || readOnly) {\n      return;\n    }\n\n    switch (event.key) {\n      case Keys.ARROW_UP:\n      case Keys.ARROW_DOWN:\n        event.preventDefault();\n\n        if (!opened) {\n          setOpened(true);\n          focusOption(null, FOCUS_ACTION_NEXT);\n        } else {\n          focusOption(\n            focusedOptionIndex,\n            event.key === Keys.ARROW_UP ? FOCUS_ACTION_PREV : FOCUS_ACTION_NEXT,\n          );\n        }\n        break;\n      case Keys.ENTER: {\n        if (!opened) {\n          break;\n        }\n        if (focusedOptionIndex != null) {\n          const foundOption = options[focusedOptionIndex];\n          if (foundOption && isNotServicePreset(foundOption)) {\n            event.preventDefault();\n\n            if (onChangeStart) {\n              onChangeStart(event, foundOption);\n            }\n\n            addOption(foundOption);\n            setFocusedOptionIndex(null);\n            clearInput();\n            if (closeAfterSelect) {\n              setOpened(false);\n            }\n\n            break;\n          }\n        }\n\n        if (!creatable) {\n          event.preventDefault();\n        }\n        break;\n      }\n      case Keys.ESCAPE:\n      case Keys.TAB:\n        if (opened) {\n          setOpened(false);\n        }\n    }\n  };\n\n  React.useEffect(() => {\n    if (focusedOptionIndex === null) {\n      setFocusedOption(null);\n    } else {\n      const foundFocusedOptionIndex = options[focusedOptionIndex];\n\n      if (foundFocusedOptionIndex && isNotServicePreset(foundFocusedOptionIndex)) {\n        setFocusedOption(foundFocusedOptionIndex);\n      }\n    }\n  }, [options, focusedOptionIndex, setFocusedOption]);\n\n  const onDropdownPlacementChange = React.useCallback((placement: Placement) => {\n    /* istanbul ignore next:  */\n    if (placement.startsWith('top')) {\n      setDropdownVerticalPlacement('top');\n    } else if (placement.startsWith('bottom')) {\n      setDropdownVerticalPlacement('bottom');\n    }\n  }, []);\n\n  const onDropdownMouseLeave = React.useCallback(() => {\n    setFocusedOptionIndex(null);\n  }, [setFocusedOptionIndex]);\n\n  const handleClickOutside = React.useCallback(() => {\n    setOpened(false);\n  }, [setOpened]);\n\n  useGlobalOnClickOutside(\n    handleClickOutside,\n    opened ? rootRef : null,\n    opened ? dropdownScrollBoxRef : null,\n  );\n\n  return (\n    <>\n      <ChipsInputBase\n        {...restProps}\n        disabled={disabled}\n        readOnly={readOnly}\n        // FormFieldProps\n        id={labelledbyId}\n        getRootRef={rootRef}\n        className={classNames(\n          styles['ChipsSelect'],\n          opened &&\n            dropdownVerticalPlacement &&\n            stylesDropdownVerticalPlacement[dropdownVerticalPlacement],\n          className,\n        )}\n        status={status}\n        after={dropdownIconProp || <DropdownIcon opened={opened} />}\n        // option\n        value={value}\n        onAddChipOption={addOptionFromInput}\n        onRemoveChipOption={removeOption}\n        renderChip={renderChip}\n        // input\n        getRef={inputRef}\n        inputValue={inputValue}\n        onInputChange={onInputChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onKeyDown={handleKeyDown}\n        // a11y\n        role=\"combobox\"\n        aria-expanded={opened}\n        aria-autocomplete=\"list\"\n        aria-controls={opened ? dropdownId : undefined}\n        aria-activedescendant={opened ? dropdownCurrentItemId : undefined}\n        aria-haspopup=\"listbox\"\n      />\n      {opened && (\n        <CustomSelectDropdown\n          data-testid={dropdownTestId}\n          targetRef={rootRef}\n          placement={placementProp}\n          scrollBoxRef={dropdownScrollBoxRef}\n          onPlacementChange={onDropdownPlacementChange}\n          onMouseLeave={onDropdownMouseLeave}\n          fetching={fetching}\n          autoWidth={dropdownAutoWidth}\n          forcePortal={forceDropdownPortal}\n          noMaxHeight={noMaxHeight}\n          // a11y\n          id={dropdownId}\n          role=\"listbox\"\n          aria-labelledby={labelledbyId}\n        >\n          {options.map((option, index) => {\n            const dropdownItemId = `${dropdownId}-${index}`;\n\n            if (isEmptyOptionPreset(option)) {\n              return (\n                <Footnote key=\"empty-text\" className={styles['ChipsSelect__empty']}>\n                  {option.placeholder}\n                </Footnote>\n              );\n            }\n            if (isCreateNewOptionPreset(option)) {\n              return (\n                <CustomSelectOption\n                  key=\"create-new-option\"\n                  id={dropdownItemId}\n                  hovered={focusedOptionIndex === index}\n                  onMouseDown={() => addOptionFromInput(inputValue)}\n                  onMouseEnter={() => setFocusedOptionIndex(index)}\n                >\n                  {option.actionText}\n                </CustomSelectOption>\n              );\n            }\n            return (\n              <React.Fragment key={`${typeof option.value}-${option.label}`}>\n                {renderOption(\n                  {\n                    id: dropdownItemId,\n                    disabled: option.disabled,\n                    hovered: focusedOption\n                      ? getOptionValue(option) === getOptionValue(focusedOption)\n                      : false,\n                    children: option.label,\n                    selected: !!value.find(\n                      (selectedOption: Option) =>\n                        getOptionValue(selectedOption) === getOptionValue(option),\n                    ),\n                    getRootRef(node) {\n                      if (node) {\n                        chipsSelectOptions[index] = node;\n                      }\n                    },\n                    onMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n                      if (option.disabled) {\n                        return;\n                      }\n                      if (onChangeStart) {\n                        onChangeStart(event, option);\n                      }\n\n                      if (!event.defaultPrevented) {\n                        closeAfterSelect && setOpened(false);\n                        addOption(option);\n                        clearInput();\n                      }\n                    },\n                    onMouseEnter() {\n                      setFocusedOptionIndex(index);\n                    },\n                  },\n                  option,\n                )}\n              </React.Fragment>\n            );\n          })}\n        </CustomSelectDropdown>\n      )}\n    </>\n  );\n};\n"],"names":["React","classNames","useExternRef","useGlobalOnClickOutside","Keys","defaultFilterFn","ChipsInputBase","getNewOptionDataDefault","getOptionLabelDefault","getOptionValueDefault","renderChipDefault","CustomSelectDropdown","CustomSelectOption","DropdownIcon","Footnote","DEFAULT_EMPTY_TEXT","DEFAULT_SELECTED_BEHAVIOR","FOCUS_ACTION_NEXT","FOCUS_ACTION_PREV","isCreateNewOptionPreset","isEmptyOptionPreset","isNotServicePreset","renderOptionDefault","useChipsSelect","styles","stylesDropdownVerticalPlacement","top","bottom","findIndexAfter","options","startIndex","length","findIndex","option","i","disabled","findIndexBefore","endIndex","result","ChipsSelect","id","labelledbyId","getRootRef","className","status","icon","dropdownIconProp","onChangeStart","optionsProp","placement","placementProp","closeAfterSelect","selectedBehavior","emptyText","creatable","fetching","dropdownAutoWidth","forceDropdownPortal","noMaxHeight","filterFn","dropdownTestId","getRef","value","valueProp","defaultValue","inputValue","inputValueProp","defaultInputValue","readOnly","getOptionValue","getOptionLabel","getNewOptionData","renderChip","renderOption","onChange","onFocus","onFocusProp","onInputChange","onInputChangeProp","onBlur","onBlurProp","onKeyDown","onKeyDownProp","restProps","addOptionFromInput","addOption","removeOption","inputRef","inputRefHook","clearInput","opened","setOpened","focusedOption","focusedOptionIndex","setFocusedOption","setFocusedOptionIndex","rootRef","dropdownVerticalPlacement","setDropdownVerticalPlacement","useState","dropdownId","useId","dropdownCurrentItemId","undefined","dropdownScrollBoxRef","useRef","handleFocus","event","handleBlur","defaultPrevented","preventDefault","chipsSelectOptions","current","scrollToElement","index","center","dropdown","item","dropdownHeight","offsetHeight","scrollTop","itemTop","offsetTop","itemHeight","focusOptionByIndex","oldIndex","focusOption","nextIndex","type","beforeIndex","handleKeyDown","key","ARROW_UP","ARROW_DOWN","ENTER","foundOption","ESCAPE","TAB","useEffect","foundFocusedOptionIndex","onDropdownPlacementChange","useCallback","startsWith","onDropdownMouseLeave","handleClickOutside","after","onAddChipOption","onRemoveChipOption","role","aria-expanded","aria-autocomplete","aria-controls","aria-activedescendant","aria-haspopup","data-testid","targetRef","scrollBoxRef","onPlacementChange","onMouseLeave","autoWidth","forcePortal","aria-labelledby","map","dropdownItemId","placeholder","hovered","onMouseDown","onMouseEnter","actionText","Fragment","label","children","selected","find","selectedOption","node"],"mappings":"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"}