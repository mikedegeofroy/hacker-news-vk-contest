import * as React from 'react';
import { HTMLAttributesWithRootRef } from '../../types';
import { type TouchEvent } from '../Touch/Touch';
export interface SliderBaseProps extends Omit<HTMLAttributesWithRootRef<HTMLDivElement>, 'value' | 'defaultValue' | 'onChange'> {
    min?: number;
    max?: number;
    step?: number;
    disabled?: boolean;
    /**
     * Тоже самое, что и `aria-label`, но на вход можно получать индекс текущего ползунка и в зависимости от этого выдавать разный текст.
     *
     * > Перебивает `aria-label`.
     */
    getAriaLabel?(index: number): string;
    /**
     * В отличие от `aria-valuetext`, позволяет более гибко форматировать текст в зависимости от значения ползунка.
     *
     * Полезно при использовании компонента как неконтролируемого.
     *
     * > Перебивает `aria-valuetext`.
     */
    getAriaValueText?(value: number, index: number): string;
    withTooltip?: boolean;
}
export interface SliderProps extends SliderBaseProps {
    multiple?: false;
    value?: number;
    defaultValue?: number;
    onChange?(value: number, event: TouchEvent | React.ChangeEvent): void;
}
export interface SliderMultipleProps extends SliderBaseProps {
    multiple: true;
    value?: [number, number];
    defaultValue?: [number, number];
    onChange?(value: [number, number], event: TouchEvent | React.ChangeEvent): void;
}
/**
 * @see https://vkcom.github.io/VKUI/#/Slider
 */
export declare const Slider: ({ step, min, max, value: valueProp, multiple: multipleProp, defaultValue, disabled, className, getRootRef, getAriaLabel, getAriaValueText, onChange, withTooltip, ...restProps }: SliderProps | SliderMultipleProps) => React.JSX.Element;
//# sourceMappingURL=Slider.d.ts.map