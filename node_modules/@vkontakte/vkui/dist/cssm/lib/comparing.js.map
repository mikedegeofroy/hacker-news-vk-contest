{"version":3,"sources":["../../../src/lib/comparing.ts"],"sourcesContent":["/**\n * Определяет, является ли значение не `undefined`\n *\n * ## Пример\n *\n * ```ts\n * import { strict as assert } from 'node:assert';\n *\n * assert.equal(isNotUndefined(\"Some string\"), true);\n * assert.equal(isNotUndefined(undefined), false);\n * ```\n */\nfunction isNotUndefined<T>(value: T | undefined): value is T {\n  return value !== undefined;\n}\n\n/**\n * Фильтрует `undefined` значения и возвращает результат выполнение `fn`. Если\n * значений не существует, вернется значение по умолчанию `defaultValue`.\n */\nfunction fnArgsOr<T, U>(fn: (...args: T[]) => U, args: Array<T | undefined>, defaultValue: U): U {\n  const definedArgs = args.filter(isNotUndefined);\n  if (definedArgs.length) {\n    return fn(...definedArgs);\n  }\n\n  return defaultValue;\n}\n\n/**\n * Функция для определения минимального числа. Если чисел не существует,\n * вернется значение по умолчанию `defaultValue`.\n *\n * ## Пример\n *\n * ```js\n * import { strict as assert } from 'node:assert';\n *\n * const defaultValue = 24;\n * assert.equal(minOr([48, 10, 12], defaultValue), 10);\n * assert.equal(minOr([undefined], defaultValue), 24);\n * ```\n */\nexport function minOr(args: Array<number | undefined>, defaultValue: number): number {\n  return fnArgsOr(Math.min, args, defaultValue);\n}\n"],"names":["isNotUndefined","value","undefined","fnArgsOr","fn","args","defaultValue","definedArgs","filter","length","minOr","Math","min"],"mappings":"AAAA;;;;;;;;;;;CAWC,GACD,SAASA,eAAkBC,KAAoB;IAC7C,OAAOA,UAAUC;AACnB;AAEA;;;CAGC,GACD,SAASC,SAAeC,EAAuB,EAAEC,IAA0B,EAAEC,YAAe;IAC1F,MAAMC,cAAcF,KAAKG,MAAM,CAACR;IAChC,IAAIO,YAAYE,MAAM,EAAE;QACtB,OAAOL,MAAMG;IACf;IAEA,OAAOD;AACT;AAEA;;;;;;;;;;;;;CAaC,GACD,OAAO,SAASI,MAAML,IAA+B,EAAEC,YAAoB;IACzE,OAAOH,SAASQ,KAAKC,GAAG,EAAEP,MAAMC;AAClC"}