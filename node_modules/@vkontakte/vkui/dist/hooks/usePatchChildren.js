import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import * as React from 'react';
import { getMergedSameEventsByProps } from '../helpers/getMergedSameEventsByProps';
import { isDOMTypeElement, isForwardRefElement, isValidNotReactFragmentElement } from '../lib/utils';
import { warnOnce } from '../lib/warnOnce';
import { useEffectDev } from './useEffectDev';
import { useExternRef } from './useExternRef';
const warn = warnOnce('usePatchChildrenRef');
/**
 * –§—É–Ω–∫—Ü–∏—è –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–∫–∏–Ω—É—Ç—å –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π React-—ç–ª–µ–º–µ–Ω—Ç —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ DOM —ç—Ç–æ–≥–æ
 * —ç–ª–µ–º–µ–Ω—Ç–∞.
 *
 * @param children
 * @param injectProps
 * @param externRef ‚Äì –ø–æ–ª–µ–∑–µ–Ω –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å `ref` —ç–ª–µ–º–µ–Ω—Ç—É –≤—ã—à–µ.
 *
 * üëé –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `externRef`
 * ```ts
 * const { ref } = useSomeHook();
 * const [childRef, child] = usePatchChildrenRef(children);
 * React.useLayoutEffect(() => {
 *   ref.current = childRef.current; // –∏–ª–∏ ref.current(childRef.current)
 * }, [childRef]);
 * ```
 *
 * üëç –° –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `externRef`
 * ```ts
 * const { ref } = useSomeHook();
 * const [childRef, child] = usePatchChildrenRef(children, undefined, ref);
 * ```
 *
 * @private
 */ export const usePatchChildren = (children, injectProps, externRef)=>{
    const isValidElementResult = isValidNotReactFragmentElement(children);
    const isDOMTypeElementResult = isValidElementResult && isDOMTypeElement(children);
    const isForwardedRefElementResult = isValidElementResult && isForwardRefElement(children);
    const shouldUseRef = isDOMTypeElementResult || isForwardedRefElementResult;
    const childRef = useExternRef(shouldUseRef ? children.ref : isValidElementResult ? children.props.getRootRef : undefined, externRef);
    const mergedEventsByInjectProps = getMergedSameEventsByProps(injectProps ? injectProps : {}, isValidElementResult ? children.props : {});
    const props = shouldUseRef ? _object_spread({
        ref: childRef
    }, injectProps, mergedEventsByInjectProps) : isValidElementResult ? _object_spread({
        getRootRef: childRef
    }, injectProps, mergedEventsByInjectProps) : undefined;
    useEffectDev(()=>{
        if (!childRef.current) {
            warn('–ö–∞–∂–µ—Ç—Å—è, –≤ children –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ getRootRef. –ú—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π dom-—ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞', 'error');
        }
    }, [
        isValidElementResult ? children.type : null,
        childRef
    ]);
    return [
        childRef,
        isValidElementResult ? React.cloneElement(children, props) : children
    ];
};

//# sourceMappingURL=usePatchChildren.js.map