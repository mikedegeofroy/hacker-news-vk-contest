"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    animate: function() {
        return animate;
    },
    animationEvent: function() {
        return animationEvent;
    },
    cancelWaitAnimationEnd: function() {
        return cancelWaitAnimationEnd;
    },
    cancelWaitTransitionEnd: function() {
        return cancelWaitTransitionEnd;
    },
    transitionEvent: function() {
        return transitionEvent;
    },
    waitAnimationEnd: function() {
        return waitAnimationEnd;
    },
    waitTransitionEnd: function() {
        return waitTransitionEnd;
    }
});
var _dom = require("./dom");
/**
 * Функция для js анимации
 * @param {number} duration
 * @param {function} timing тайминг функция анимации
 * @param {function} draw коллбэк, в который прокидывается прогресс [0, 1]
 * @returns {void}
 */ function animate(param) {
    var duration = param.duration, timing = param.timing, draw = param.draw;
    if (!_dom.canUseDOM) {
        return;
    }
    var start = window.performance.now();
    // eslint-disable-next-line no-shadow
    window.requestAnimationFrame(function animate(time) {
        var timeFraction = (time - start) / duration;
        if (timeFraction > 1) {
            timeFraction = 1;
        }
        var progress = timing(timeFraction);
        draw(progress);
        if (timeFraction < 1) {
            window.requestAnimationFrame(animate);
        }
    });
}
// WebKitAnimationEvent и WebKitTransitionEvent не существуют в глобальном контексте
var animationEvent = /*#__PURE__*/ function() {
    var obj = {
        supported: false,
        name: "animationend"
    };
    if (_dom.canUseDOM) {
        if (typeof AnimationEvent !== "undefined") {
            obj.supported = true;
        } else if (typeof WebKitAnimationEvent !== "undefined") {
            obj.supported = true;
            // webkitAnimationEnd не входит в перечисление событий, но соответствует animationend
            obj.name = "webkitAnimationEnd";
        }
    }
    return obj;
}();
var transitionEvent = /*#__PURE__*/ function() {
    var obj = {
        supported: false,
        name: "transitionend"
    };
    if (_dom.canUseDOM) {
        if (typeof TransitionEvent !== "undefined") {
            obj.supported = true;
        } else if (typeof WebKitTransitionEvent !== "undefined") {
            obj.supported = true;
            // webkitTransitionEnd не входит в перечисление событий, но соответствует transitionend
            obj.name = "webkitTransitionEnd";
        }
    }
    return obj;
}();
/**
 * Ожидание окончания анимации на элементе
 *
 * @param listener коллбэк окончания ожидания
 * @param fallbackTime сколько ждать в мс если событие не поддерживается
 * @param el элемент
 */ function waitAnimationEnd(listener, fallbackTime, el) {
    if (_dom.canUseEventListeners) {
        if (animationEvent.supported && el) {
            el.addEventListener(animationEvent.name, listener);
        } else {
            return window.setTimeout(listener, fallbackTime);
        }
    }
}
/**
 * Прекращение ожидания окончания анимации на элементе
 *
 * @param listener коллбэк окончания ожидания
 * @param handle то, что вернулось из ```waitAnimationEnd```
 * @param el элемент
 */ function cancelWaitAnimationEnd(listener, handle, el) {
    if (_dom.canUseEventListeners) {
        if (animationEvent.supported && el) {
            el.removeEventListener(animationEvent.name, listener);
        } else {
            window.clearTimeout(handle);
        }
    }
}
/**
 * Ожидание окончания анимации перехода на элементе
 *
 * @param listener коллбэк окончания ожидания
 * @param fallbackTime сколько ждать в мс если событие не поддерживается
 * @param el элемент
 */ function waitTransitionEnd(el, listener, fallbackTime) {
    if (_dom.canUseEventListeners) {
        if (transitionEvent.supported && el) {
            el.addEventListener(transitionEvent.name, listener);
        } else {
            return window.setTimeout(listener, fallbackTime);
        }
    }
}
/**
 * Прекращение ожидания окончания анимации перехода на элементе
 *
 * @param listener коллбэк окончания ожидания
 * @param handle то, что вернулось из ```waitTransitionEnd```
 * @param el элемент
 */ function cancelWaitTransitionEnd(listener, handle, el) {
    if (_dom.canUseEventListeners) {
        if (transitionEvent.supported && el) {
            el.removeEventListener(transitionEvent.name, listener);
        } else {
            window.clearTimeout(handle);
        }
    }
}

//# sourceMappingURL=animate.js.map