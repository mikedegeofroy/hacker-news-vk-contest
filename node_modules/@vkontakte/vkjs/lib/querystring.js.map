{"version":3,"sources":["../src/querystring.ts"],"sourcesContent":["export interface ParsedQuery<T = string> {\n  [key: string]: T | T[] | null;\n}\n\nfunction parse(input: string | any): ParsedQuery {\n  if (typeof input !== 'string') {\n    return {};\n  }\n\n  const query = input.trim().replace(/^[?#&]/, '');\n  if (!query) {\n    return {};\n  }\n\n  const str = query.substring(query.indexOf('?') + 1);\n\n  return str.split('&').reduce((acc: ParsedQuery, item: string) => {\n    const param = item.split('=');\n\n    if (param[1]) {\n      acc[decodeURIComponent(param[0])] = decodeURIComponent(param[1].replace(/\\+/g, ' '));\n    }\n\n    return acc;\n  }, {});\n}\n\ntype StringifyQueryItem = string | boolean | number | null | undefined;\n\ntype StringifyQuery = Record<string, StringifyQueryItem | readonly StringifyQueryItem[]>;\n\ninterface StringifyOptions {\n  /**\n   * URL encode the keys and values\n   *\n   * @default true\n   */\n  encode?: boolean;\n\n  /**\n   * Skip keys with `null` as the value.\n   * Keys with `undefined` as the value are always ignored.\n   *\n   * @default true\n   */\n  skipNull?: true;\n}\n\nfunction stringify(data: StringifyQuery, options: StringifyOptions = {}): string {\n  if (typeof data !== 'object' || data === null) {\n    return '';\n  }\n\n  options = {\n    encode: true,\n    ...options,\n  };\n\n  const encode = (value: any): string => {\n    return options.encode ? encodeURIComponent(value) : String(value);\n  };\n\n  return Object.keys(data)\n    .reduce<string[]>((acc, key) => {\n      const value = data[key];\n\n      if (value === undefined) {\n        return acc;\n      }\n\n      if (value === null) {\n        if (!options.skipNull) {\n          acc.push([encode(key), ''].join('='));\n        }\n\n        return acc;\n      }\n\n      if (Array.isArray(value)) {\n        value\n          .map((arrayItem) => {\n            acc.push(`${encode(key)}[]=${encode(arrayItem)}`);\n          })\n          .join();\n        return acc;\n      }\n\n      acc.push([encode(key), encode(value)].join('='));\n      return acc;\n    }, [])\n    .join('&');\n}\n\nexport const querystring = {\n  parse,\n  stringify,\n};\n"],"names":["querystring","parse","input","query","trim","replace","str","substring","indexOf","split","reduce","acc","item","param","decodeURIComponent","stringify","data","options","encode","value","encodeURIComponent","String","Object","keys","key","undefined","skipNull","push","join","Array","isArray","map","arrayItem"],"mappings":";;;;+BA6FaA;;;eAAAA;;;;AAzFb,SAASC,MAAMC,KAAmB;IAChC,IAAI,OAAOA,UAAU,UAAU;QAC7B,OAAO,CAAC;IACV;IAEA,IAAMC,QAAQD,MAAME,IAAI,GAAGC,OAAO,CAAC,UAAU;IAC7C,IAAI,CAACF,OAAO;QACV,OAAO,CAAC;IACV;IAEA,IAAMG,MAAMH,MAAMI,SAAS,CAACJ,MAAMK,OAAO,CAAC,OAAO;IAEjD,OAAOF,IAAIG,KAAK,CAAC,KAAKC,MAAM,CAAC,SAACC,KAAkBC;QAC9C,IAAMC,QAAQD,KAAKH,KAAK,CAAC;QAEzB,IAAII,KAAK,CAAC,EAAE,EAAE;YACZF,GAAG,CAACG,mBAAmBD,KAAK,CAAC,EAAE,EAAE,GAAGC,mBAAmBD,KAAK,CAAC,EAAE,CAACR,OAAO,CAAC,OAAO;QACjF;QAEA,OAAOM;IACT,GAAG,CAAC;AACN;AAOE;;;;GAIC,GAGD;;;;;GAKC,GAIH,SAASI,UAAUC,IAAoB;QAAEC,UAAAA,iEAA4B,CAAC;IACpE,IAAI,OAAOD,SAAS,YAAYA,SAAS,MAAM;QAC7C,OAAO;IACT;IAEAC,UAAU;QACRC,QAAQ;OACLD;IAGL,IAAMC,SAAS,SAACC;QACd,OAAOF,QAAQC,MAAM,GAAGE,mBAAmBD,SAASE,OAAOF;IAC7D;IAEA,OAAOG,OAAOC,IAAI,CAACP,MAChBN,MAAM,CAAW,SAACC,KAAKa;QACtB,IAAML,QAAQH,IAAI,CAACQ,IAAI;QAEvB,IAAIL,UAAUM,WAAW;YACvB,OAAOd;QACT;QAEA,IAAIQ,UAAU,MAAM;YAClB,IAAI,CAACF,QAAQS,QAAQ,EAAE;gBACrBf,IAAIgB,IAAI,CAAC;oBAACT,OAAOM;oBAAM;iBAAG,CAACI,IAAI,CAAC;YAClC;YAEA,OAAOjB;QACT;QAEA,IAAIkB,MAAMC,OAAO,CAACX,QAAQ;YACxBA,MACGY,GAAG,CAAC,SAACC;gBACJrB,IAAIgB,IAAI,CAAC,AAAC,GAAmBT,OAAjBA,OAAOM,MAAK,OAAuB,OAAlBN,OAAOc;YACtC,GACCJ,IAAI;YACP,OAAOjB;QACT;QAEAA,IAAIgB,IAAI,CAAC;YAACT,OAAOM;YAAMN,OAAOC;SAAO,CAACS,IAAI,CAAC;QAC3C,OAAOjB;IACT,GAAG,EAAE,EACJiB,IAAI,CAAC;AACV;AAEO,IAAM5B,cAAc;IACzBC,OAAAA;IACAc,WAAAA;AACF"}