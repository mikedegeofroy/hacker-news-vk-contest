{"version":3,"sources":["../../src/getPhotoSize.ts"],"sourcesContent":["export interface PhotoSizeLike {\n  width: number;\n  height: number;\n  url?: string;\n  src?: string;\n}\n\nexport interface PhotoSize {\n  url: string;\n  width: number;\n  height: number;\n}\n\nfunction prepareSize(size: PhotoSizeLike): PhotoSize {\n  return {\n    url: size.url || size.src || '',\n    width: size.width,\n    height: size.height,\n  };\n}\n\nfunction computeSize(\n  sizes: PhotoSizeLike[],\n  minWidth: number,\n  minHeight: number | null = null,\n): PhotoSizeLike {\n  // Do nothing if sizes contains only 1 item\n  if (sizes.length === 1) {\n    return sizes[0];\n  }\n\n  // Sorting in ascending order\n  const sorted = [...sizes].sort((a, b) => {\n    if (a.width < b.width) {\n      return -1;\n    }\n\n    if (a.width === b.width) {\n      return a.height > b.height ? 1 : -1;\n    }\n\n    return 1;\n  });\n\n  const matchesByWidth = sorted.filter((size) => size.width >= minWidth);\n  if (!matchesByWidth.length) {\n    // Biggest size\n    return sorted[sorted.length - 1];\n  }\n\n  if (!minHeight) {\n    return matchesByWidth[0];\n  }\n\n  // Searching by height\n  for (let i = 0; i < matchesByWidth.length; i++) {\n    const size = matchesByWidth[i];\n    if (size.height >= minHeight) {\n      return size;\n    }\n  }\n\n  // Sorting by height in ascending order\n  const sortedByHeight = matchesByWidth.sort((a, b) => (a.height > b.height ? 1 : -1));\n\n  return sortedByHeight[sortedByHeight.length - 1];\n}\n\n/**\n * Searches for the smallest (?) suitable image from the sizes array.\n *\n * Or more precise, it returns:\n *   – if no suitable sizes (>= minWidth И >= minHeight): the biggest from all sizes;\n *   – there are any suitable (>= minWidth И >= minHeight): the smallest of the matching sizes;\n *\n * Returns null only in case of an empty/invalid array. The returned size can be smaller than minWidth or minHeight.\n *\n * The function doesn't take into about the retina screen (window.devicePixelRatio), so you have to calculate the right width/height from the outside to support it.\n *\n * WARN:\n * - does not reckon for letter-sizes (PhotosPhotoSizesType).\n * - does not know how to search for the \"nearest\" size, or the maximum image (there is a hack with the `Infinity` pass).\n *\n * @example\n *   getPhotoSize([{ width: 1, height: 1 }, { width: 3, height: 3 }], 1) // => 1,1\n *   getPhotoSize([{ width: 1, height: 1 }, { width: 3, height: 3 }], 2) // => 3,3\n *   getPhotoSize([{ width: 1, height: 1 }, { width: 3, height: 3 }], 4) // => 3,3\n *\n * See more examples in tests\n */\nexport function getPhotoSize(\n  sizes: PhotoSizeLike[],\n  minWidth: number,\n  minHeight: number | null = null,\n): PhotoSize | null {\n  if (!Array.isArray(sizes) || !sizes.length) {\n    return null;\n  }\n\n  const size = computeSize(sizes, minWidth, minHeight);\n\n  return prepareSize(size);\n}\n"],"names":["prepareSize","size","url","src","width","height","computeSize","sizes","minWidth","minHeight","length","sorted","sort","a","b","matchesByWidth","filter","i","sortedByHeight","getPhotoSize","Array","isArray"],"mappings":";AAaA,SAASA,YAAYC,IAAmB;IACtC,OAAO;QACLC,KAAKD,KAAKC,GAAG,IAAID,KAAKE,GAAG,IAAI;QAC7BC,OAAOH,KAAKG,KAAK;QACjBC,QAAQJ,KAAKI,MAAM;IACrB;AACF;AAEA,SAASC,YACPC,KAAsB,EACtBC,QAAgB;QAChBC,YAAAA,iEAA2B;IAE3B,2CAA2C;IAC3C,IAAIF,MAAMG,MAAM,KAAK,GAAG;QACtB,OAAOH,KAAK,CAAC,EAAE;IACjB;IAEA,6BAA6B;IAC7B,IAAMI,SAAS,AAAC,qBAAGJ,OAAOK,IAAI,CAAC,SAACC,GAAGC;QACjC,IAAID,EAAET,KAAK,GAAGU,EAAEV,KAAK,EAAE;YACrB,OAAO,CAAC;QACV;QAEA,IAAIS,EAAET,KAAK,KAAKU,EAAEV,KAAK,EAAE;YACvB,OAAOS,EAAER,MAAM,GAAGS,EAAET,MAAM,GAAG,IAAI,CAAC;QACpC;QAEA,OAAO;IACT;IAEA,IAAMU,iBAAiBJ,OAAOK,MAAM,CAAC,SAACf;eAASA,KAAKG,KAAK,IAAII;;IAC7D,IAAI,CAACO,eAAeL,MAAM,EAAE;QAC1B,eAAe;QACf,OAAOC,MAAM,CAACA,OAAOD,MAAM,GAAG,EAAE;IAClC;IAEA,IAAI,CAACD,WAAW;QACd,OAAOM,cAAc,CAAC,EAAE;IAC1B;IAEA,sBAAsB;IACtB,IAAK,IAAIE,IAAI,GAAGA,IAAIF,eAAeL,MAAM,EAAEO,IAAK;QAC9C,IAAMhB,OAAOc,cAAc,CAACE,EAAE;QAC9B,IAAIhB,KAAKI,MAAM,IAAII,WAAW;YAC5B,OAAOR;QACT;IACF;IAEA,uCAAuC;IACvC,IAAMiB,iBAAiBH,eAAeH,IAAI,CAAC,SAACC,GAAGC;eAAOD,EAAER,MAAM,GAAGS,EAAET,MAAM,GAAG,IAAI,CAAC;;IAEjF,OAAOa,cAAc,CAACA,eAAeR,MAAM,GAAG,EAAE;AAClD;AAEA;;;;;;;;;;;;;;;;;;;;;CAqBC,GACD,OAAO,SAASS,aACdZ,KAAsB,EACtBC,QAAgB;QAChBC,YAAAA,iEAA2B;IAE3B,IAAI,CAACW,MAAMC,OAAO,CAACd,UAAU,CAACA,MAAMG,MAAM,EAAE;QAC1C,OAAO;IACT;IAEA,IAAMT,OAAOK,YAAYC,OAAOC,UAAUC;IAE1C,OAAOT,YAAYC;AACrB"}