import { canUseDOM } from "./dom";
export var IPHONE_SAFARI_BOTTOM_BAR = 45;
export var IPHONE_X_SAFARI_BOTTOM_BAR = 85;
export var IPHONE_KEYBOARD_REJECT_OFFSET = 180;
// 44 iPhone, 55 iPad, iPad Pro 69
export var IOS_NO_KEYBOARD_ALLOWED_OFFSET = 70;
export function detectIOS(ua) {
    if (!ua) {
        ua = canUseDOM ? navigator.userAgent : "";
    }
    ua = ua.toLowerCase();
    var isIPadOS = checkIPadOS(ua);
    var isIPad = isIPadOS || ua.includes("ipad");
    var isIPhone = !isIPad && ua.search(/iphone|ipod/) !== -1;
    var isIOS = isIPhone || isIPad;
    var iosVersion = isIOS && ua.match(/os ([\d_]+) like mac os x/i);
    var iosMajor = 0;
    var iosMinor = 0;
    if (isIPadOS) {
        iosMajor = 13;
        iosMinor = 0;
    } else if (iosVersion) {
        iosVersion = iosVersion[1].split("_");
        iosMajor = +iosVersion[0];
        iosMinor = +iosVersion[1];
    }
    iosVersion = null;
    var isScrollBasedViewport = iosMajor < 13 && !(iosMajor === 11 && iosMinor < 3);
    var isWKWebView = isIOS && checkWKWebView(ua);
    var isIPhoneX = false;
    if (canUseDOM) {
        isIPhoneX = isIOS && screen.width === 375 && screen.height === 812 && window.devicePixelRatio === 3;
    }
    var isIOSChrome = ua.search(/crios/i) !== -1;
    return {
        isIPad: isIPad,
        isIPhone: isIPhone,
        isIOS: isIOS,
        isIPadOS: isIPadOS,
        iosMajor: iosMajor,
        iosMinor: iosMinor,
        isWKWebView: isWKWebView,
        isScrollBasedViewport: isScrollBasedViewport,
        isIPhoneX: isIPhoneX,
        isIOSChrome: isIOSChrome
    };
}
var detect = /*#__PURE__*/ detectIOS();
export var isIPad = /*#__PURE__*/ function() {
    return detect.isIPad;
}();
export var isIPhone = /*#__PURE__*/ function() {
    return detect.isIPhone;
}();
export var isIOS = /*#__PURE__*/ function() {
    return detect.isIOS;
}();
export var isIPadOS = /*#__PURE__*/ function() {
    return detect.isIPadOS;
}();
export var iosMajor = /*#__PURE__*/ function() {
    return detect.iosMajor;
}();
export var iosMinor = /*#__PURE__*/ function() {
    return detect.iosMinor;
}();
export var isWKWebView = /*#__PURE__*/ function() {
    return detect.isWKWebView;
}();
export var isScrollBasedViewport = /*#__PURE__*/ function() {
    return detect.isScrollBasedViewport;
}();
export var isIPhoneX = /*#__PURE__*/ function() {
    return detect.isIPhoneX;
}();
export var isIOSChrome = /*#__PURE__*/ function() {
    return detect.isIOSChrome;
}();
export function isLandscapePhone() {
    return Math.abs(window.orientation) === 90 && !isIPad;
}
// Reference:
// https://stackoverflow.com/questions/28795476/detect-if-page-is-loaded-inside-wkwebview-in-javascript/30495399#30495399
function checkWKWebView(ua) {
    if (!canUseDOM) {
        return false;
    }
    var webkit = window.webkit;
    if (webkit && webkit.messageHandlers) {
        return true;
    }
    var lte9 = /constructor/i.test(String(window.HTMLElement));
    var idb = !!window.indexedDB;
    if (ua.includes("safari") && ua.includes("version") && !navigator.standalone) {} else // Safari (WKWebView/Nitro since 6+)
    if (!idb && lte9 || !(window.statusbar && window.statusbar.visible)) {} else // UIWebView
    if (!lte9 || idb) {
        // WKWebView
        return true;
    }
    return false;
}
/**
 * В Safari на iPadOS поле User Agent содержит почти такую же информацию, что и в Safari на MacOS.
 * Из-за чего мы не можем ориентироваться на User Agent.
 *
 * Вместо этого мы пробуем определять есть ли событие 'ontouchend' в объекте document.
 *
 * см. https://developer.apple.com/forums/thread/119186?answerId=705140022#705140022
 */ export function checkIPadOS(ua) {
    if (!canUseDOM) {
        return false;
    }
    var isNotIOS = !/ipPad|iPhone|iPod/i.test(ua);
    var isMacOS = /Mac OS/i.test(ua);
    return isNotIOS && isMacOS && "ontouchend" in document;
}

//# sourceMappingURL=IOSDetections.js.map