import { _ as _to_consumable_array } from "@swc/helpers/_/_to_consumable_array";
function prepareSize(size) {
    return {
        url: size.url || size.src || "",
        width: size.width,
        height: size.height
    };
}
function computeSize(sizes, minWidth) {
    var minHeight = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    // Do nothing if sizes contains only 1 item
    if (sizes.length === 1) {
        return sizes[0];
    }
    // Sorting in ascending order
    var sorted = _to_consumable_array(sizes).sort(function(a, b) {
        if (a.width < b.width) {
            return -1;
        }
        if (a.width === b.width) {
            return a.height > b.height ? 1 : -1;
        }
        return 1;
    });
    var matchesByWidth = sorted.filter(function(size) {
        return size.width >= minWidth;
    });
    if (!matchesByWidth.length) {
        // Biggest size
        return sorted[sorted.length - 1];
    }
    if (!minHeight) {
        return matchesByWidth[0];
    }
    // Searching by height
    for(var i = 0; i < matchesByWidth.length; i++){
        var size = matchesByWidth[i];
        if (size.height >= minHeight) {
            return size;
        }
    }
    // Sorting by height in ascending order
    var sortedByHeight = matchesByWidth.sort(function(a, b) {
        return a.height > b.height ? 1 : -1;
    });
    return sortedByHeight[sortedByHeight.length - 1];
}
/**
 * Searches for the smallest (?) suitable image from the sizes array.
 *
 * Or more precise, it returns:
 *   – if no suitable sizes (>= minWidth И >= minHeight): the biggest from all sizes;
 *   – there are any suitable (>= minWidth И >= minHeight): the smallest of the matching sizes;
 *
 * Returns null only in case of an empty/invalid array. The returned size can be smaller than minWidth or minHeight.
 *
 * The function doesn't take into about the retina screen (window.devicePixelRatio), so you have to calculate the right width/height from the outside to support it.
 *
 * WARN:
 * - does not reckon for letter-sizes (PhotosPhotoSizesType).
 * - does not know how to search for the "nearest" size, or the maximum image (there is a hack with the `Infinity` pass).
 *
 * @example
 *   getPhotoSize([{ width: 1, height: 1 }, { width: 3, height: 3 }], 1) // => 1,1
 *   getPhotoSize([{ width: 1, height: 1 }, { width: 3, height: 3 }], 2) // => 3,3
 *   getPhotoSize([{ width: 1, height: 1 }, { width: 3, height: 3 }], 4) // => 3,3
 *
 * See more examples in tests
 */ export function getPhotoSize(sizes, minWidth) {
    var minHeight = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    if (!Array.isArray(sizes) || !sizes.length) {
        return null;
    }
    var size = computeSize(sizes, minWidth, minHeight);
    return prepareSize(size);
}

//# sourceMappingURL=getPhotoSize.js.map