{"version":3,"sources":["../../../src/html/escape.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/quotes */\nimport { Replacer } from '../lib/replacer';\nimport { fromCodePoint, getCodePointAt, numericUnicodeMap } from '../lib/codepoints';\nimport { Dictionary } from '../types';\nimport { buildFullNamedEntities, fullNamedEntities } from './entity';\n\nconst escapeReplacer = /*#__PURE__*/ new Replacer({\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  \"'\": '&#39;',\n  '\"': '&quot;',\n});\n\nconst unescapeReplacer = /*#__PURE__*/ new Replacer({\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': \"'\",\n  '&#39;': \"'\",\n  '&quot;': '\"',\n  '&#34;': '\"',\n});\n\nconst namedEntities: Record<string, string> = {\n  'amp;': '&',\n  'lt;': '<',\n  'gt;': '>',\n  'quot;': '\"',\n  'apos;': `'`,\n};\n\n/**\n * Safely escape HTML entities such as `&`, `<`, `>`, `\"`, and `'`\n * @param {string} input\n */\nexport function escape(input: string): string {\n  return escapeReplacer.replace(input);\n}\n\n/**\n * Unescape HTML entities such as `&`, `<`, `>`, `\"`, and `'`\n * @param {string} input\n */\nexport function unescape(input: string): string {\n  return unescapeReplacer.replace(input);\n}\n\nexport const outOfBoundsChar = /*#__PURE__*/ String.fromCharCode(65533);\n\nconst ENCODE_REGEX =\n  /(?:[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\n\nexport function encodeHTMLEntities(input: string): string {\n  if (input == null) {\n    return '';\n  }\n\n  return input.replace(ENCODE_REGEX, (entity) => {\n    const code = entity.length > 1 ? getCodePointAt(entity, 0) : entity.charCodeAt(0);\n    return '&#' + String(code) + ';';\n  });\n}\n\nconst DECODE_REGEX = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);?/g;\n\nfunction decodeString(input: string, entities: Record<string, string>): string {\n  if (typeof input !== 'string' || !input) {\n    return '';\n  }\n\n  return input.replace(DECODE_REGEX, (entity) => {\n    if (entity[1] === '#') {\n      // We need to have at least \"&#.\".\n      if (entity.length <= 3) {\n        return entity;\n      }\n\n      const secondChar = entity.charAt(2);\n      const code =\n        secondChar === 'x' || secondChar === 'X'\n          ? parseInt(entity.substr(3).toLowerCase(), 16)\n          : parseInt(entity.substr(2));\n\n      if (code >= 0x10ffff) {\n        return outOfBoundsChar;\n      }\n\n      if (code > 65535) {\n        return fromCodePoint(code);\n      }\n\n      return String.fromCharCode(numericUnicodeMap[code] || code);\n    }\n\n    return entities[entity.slice(1)] || entity;\n  });\n}\n\nexport function decodeHTMLEntitiesDeep<T>(input: T): T {\n  if (typeof input === 'string') {\n    return decodeHTMLEntities(input) as unknown as T;\n  }\n\n  if (typeof input === 'object') {\n    const correctType = Object.prototype.toString.apply(input);\n\n    if (correctType === '[object Array]') {\n      return (input as unknown[]).map((item) => {\n        return decodeHTMLEntitiesDeep(item);\n      }) as T;\n    }\n\n    if (correctType === '[object Object]') {\n      const response: Dictionary<unknown> = {};\n      Object.keys(input as Dictionary<unknown>).forEach((item) => {\n        response[decodeHTMLEntities(item)] = decodeHTMLEntitiesDeep(\n          (input as Dictionary<unknown>)[item],\n        );\n      });\n\n      return response as unknown as T;\n    }\n  }\n\n  return input;\n}\n\n/**\n * `decodeHTMLEntities` декодирует зарезервированные HTML-сущности.\n *\n * Если нужна возможность декодировать все сущности, используйте\n * {@link decodeHTMLFullEntities}\n *\n * @param input текст который необходимо декодировать\n * @param entities кастомный словарь сущностей `{'lt;': '<'}`\n */\nexport function decodeHTMLEntities(input: string, entities = namedEntities): string {\n  return decodeString(input, entities);\n}\n\n/**\n * `decodeHTMLFullEntities` декодирует все HTML-сущности.\n *\n * Если вам нужно декодировать не все сущности, используйте\n * {@link decodeHTMLEntities} и кастомный словарь.\n *\n * @param input текст который необходимо декодировать\n */\nexport function decodeHTMLFullEntities(input: string): string {\n  buildFullNamedEntities();\n\n  return decodeString(input, fullNamedEntities);\n}\n"],"names":["Replacer","fromCodePoint","getCodePointAt","numericUnicodeMap","buildFullNamedEntities","fullNamedEntities","escapeReplacer","unescapeReplacer","namedEntities","escape","input","replace","unescape","outOfBoundsChar","String","fromCharCode","ENCODE_REGEX","encodeHTMLEntities","entity","code","length","charCodeAt","DECODE_REGEX","decodeString","entities","secondChar","charAt","parseInt","substr","toLowerCase","slice","decodeHTMLEntitiesDeep","decodeHTMLEntities","correctType","Object","prototype","toString","apply","map","item","response","keys","forEach","decodeHTMLFullEntities"],"mappings":"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"}