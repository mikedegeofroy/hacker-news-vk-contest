{"version":3,"sources":["../../src/arrays.ts"],"sourcesContent":["import { uniqueArrayFallback } from './internal/uniqueArray';\n\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @param arrayLength\n * @param startIndex\n */\nexport function createArray(arrayLength: number, startIndex = 0): number[] {\n  return new Array(arrayLength).fill(null).map((_, index) => startIndex + index);\n}\n\n/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n\n  return uniqueArrayFallback(array);\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  return array\n    .map<[number, T]>((a) => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map<T>((a) => a[1]);\n}\n\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (!size) {\n    return [array];\n  }\n\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (!array2.includes(item)) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"],"names":["uniqueArrayFallback","createArray","arrayLength","startIndex","Array","fill","map","_","index","sumArray","array","isArray","length","reduce","previous","current","averageArray","uniqueArray","Set","from","shuffleArray","a","Math","random","sort","b","chunkArray","size","head","slice","tail","omitFromArray","value","indexOf","difference","array1","array2","res","item","includes","push"],"mappings":";AAAA,SAASA,mBAAmB,QAAQ,yBAAyB;AAE7D;;;;;CAKC,GACD,OAAO,SAASC,YAAYC,WAAmB;QAAEC,aAAAA,iEAAa;IAC5D,OAAO,IAAIC,MAAMF,aAAaG,IAAI,CAAC,MAAMC,GAAG,CAAC,SAACC,GAAGC;eAAUL,aAAaK;;AAC1E;AAEA;;CAEC,GACD,OAAO,SAASC,SAASC,KAAe;IACtC,IAAI,CAACN,MAAMO,OAAO,CAACD,UAAU,CAACA,MAAME,MAAM,EAAE;QAC1C,OAAO;IACT;IACA,OAAOF,MAAMG,MAAM,CAAC,SAACC,UAAUC;eAAYA,UAAUD;;AACvD;AAEA;;CAEC,GACD,OAAO,SAASE,aAAaN,KAAe;IAC1C,IAAI,CAACN,MAAMO,OAAO,CAACD,UAAU,CAACA,MAAME,MAAM,EAAE;QAC1C,OAAO;IACT;IACA,OAAOH,SAASC,SAASA,MAAME,MAAM;AACvC;AAEA;;CAEC,GACD,OAAO,SAASK,YAAeP,KAAU;IACvC,IAAI,CAACN,MAAMO,OAAO,CAACD,UAAU,CAACA,MAAME,MAAM,EAAE;QAC1C,OAAO,EAAE;IACX;IAEA,IAAI,OAAOM,QAAQ,aAAa;QAC9B,OAAOd,MAAMe,IAAI,CAAC,IAAID,IAAIR;IAC5B;IAEA,OAAOV,oBAAoBU;AAC7B;AAEA;;CAEC,GACD,OAAO,SAASU,aAAgBV,KAAU;IACxC,OAAOA,MACJJ,GAAG,CAAc,SAACe;eAAM;YAACC,KAAKC,MAAM;YAAIF;SAAE;OAC1CG,IAAI,CAAC,SAACH,GAAGI;eAAMJ,CAAC,CAAC,EAAE,GAAGI,CAAC,CAAC,EAAE;OAC1BnB,GAAG,CAAI,SAACe;eAAMA,CAAC,CAAC,EAAE;;AACvB;AAEA;;CAEC,GACD,OAAO,SAASK,WAAchB,KAAU,EAAEiB,IAAY;IACpD,IAAI,CAACvB,MAAMO,OAAO,CAACD,UAAU,CAACA,MAAME,MAAM,EAAE;QAC1C,OAAO,EAAE;IACX;IAEA,IAAI,CAACe,MAAM;QACT,OAAO;YAACjB;SAAM;IAChB;IAEA,IAAMkB,OAAOlB,MAAMmB,KAAK,CAAC,GAAGF;IAC5B,IAAMG,OAAOpB,MAAMmB,KAAK,CAACF;IAEzB,OAAO;QAACC;KAAgC,CAAjC,OAAO,qBAAGF,WAAWI,MAAMH;AACpC;AAEA;;;;;;;;CAQC,GACD,OAAO,SAASI;QAAiBrB,QAAAA,iEAAa,EAAE,EAAEsB;IAChD,IAAMxB,QAAQE,MAAMuB,OAAO,CAACD;IAE5B,IAAIxB,QAAQ,GAAG;QACb,OAAOE;IACT,OAAO;QACL,OAAO,AAAC,qBAAGA,MAAMmB,KAAK,CAAC,GAAGrB,eAAQ,qBAAGE,MAAMmB,KAAK,CAACrB,QAAQ;IAC3D;AACF;AAEA;;;;;;;;;CASC,GACD,OAAO,SAAS0B;QAAcC,SAAAA,iEAAc,EAAE,EAAEC,SAAAA,iEAAc,EAAE;IAC9D,OAAOD,OAAOtB,MAAM,CAAM,SAACwB,KAAKC;QAC9B,IAAI,CAACF,OAAOG,QAAQ,CAACD,OAAO;YAC1BD,IAAIG,IAAI,CAACF;QACX;QACA,OAAOD;IACT,GAAG,EAAE;AACP"}