{"version":3,"sources":["../../src/date.ts"],"sourcesContent":["import { leadingZero } from './numbers';\n\nexport const SECONDS_IN_THE_DAY = 86400;\nconst MILLISECONDS_IN_THE_DAY = SECONDS_IN_THE_DAY * 1000;\n\n/**\n * Проверяет, что переданная дата является сегодняшним днём\n */\nexport function isDateToday(date: Date): boolean {\n  const now = new Date();\n  const d = now.getDate();\n  const m = now.getMonth();\n  const y = now.getFullYear();\n\n  return date.getFullYear() === y && date.getMonth() === m && date.getDate() === d;\n}\n\n/**\n * Проверяет, что переданная дата - вчерашний день\n */\nexport function isDateYesterday(date: Date): boolean {\n  const yesterdayDate = new Date(date.getTime() + MILLISECONDS_IN_THE_DAY);\n  return isDateToday(yesterdayDate);\n}\n\n/**\n * Проверяет, что переданная дата - завтрашний день\n */\nexport function isDateTomorrow(date: Date): boolean {\n  const tomorrowDate = new Date(date.getTime() - MILLISECONDS_IN_THE_DAY);\n  return isDateToday(tomorrowDate);\n}\n\n/**\n * Проверяет что переданные даты находятся в одном дне\n */\nexport function isSameDate(d1: Date, d2: Date): boolean {\n  return (\n    d1.getDate() === d2.getDate() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getFullYear() === d2.getFullYear()\n  );\n}\n\n/**\n * Возвращает новую дату — начало переданного дня\n */\nexport function getBeginningOfDay(date: Date) {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate();\n\n  return new Date(year, month, day, 0, 0, 0, 0);\n}\n\nexport function isLeapYear(year: number) {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n}\n\n/**\n * Возвращает кол-во дней в месяце (последнее число месяца)\n */\nexport function getLastDayOfMonth(year: number, month: number): number {\n  if (+month === 2) {\n    return isLeapYear(year) ? 29 : 28;\n  } else if (month > 0 && ((month < 8 && month % 2 === 0) || (month > 7 && month % 2 === 1))) {\n    return 30;\n  }\n  return 31;\n}\n\n/**\n * Ближайший понедельник в прошлом относительно date\n */\nexport function getStartOfWeek(date: Date): Date {\n  const weekDay = date.getDay();\n  if (weekDay === 0) {\n    return addDays(date, -6);\n  }\n  return addDays(date, -weekDay + 1);\n}\n\n/**\n * Добавляет дни к дате и возвращает новый объект\n */\nexport function addDays(date: Date, dayCount: number): Date {\n  const modified = new Date(date.getTime());\n  modified.setDate(modified.getDate() + dayCount);\n  return modified;\n}\n\n/**\n * Создаёт дату из Unix Timestamp\n */\nexport function createDateFromUnixTimestamp(timestamp: number): Date {\n  return new Date(timestamp * 1000);\n}\n\n/**\n * Возвращает Unix Timestamp из даты\n */\nexport function getUnixTimestampFromDate(date: Date): number {\n  return Math.floor(date.getTime() / 1000);\n}\n\n/**\n * Возвращает дату в формате YYYY-MM-DD\n */\nexport function convertDateToInputFormat(date: Date): string {\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  const year = date.getFullYear();\n\n  return [year, leadingZero(month), leadingZero(day)].join('-');\n}\n"],"names":["leadingZero","SECONDS_IN_THE_DAY","MILLISECONDS_IN_THE_DAY","isDateToday","date","now","Date","d","getDate","m","getMonth","y","getFullYear","isDateYesterday","yesterdayDate","getTime","isDateTomorrow","tomorrowDate","isSameDate","d1","d2","getBeginningOfDay","year","month","day","isLeapYear","getLastDayOfMonth","getStartOfWeek","weekDay","getDay","addDays","dayCount","modified","setDate","createDateFromUnixTimestamp","timestamp","getUnixTimestampFromDate","Math","floor","convertDateToInputFormat","join"],"mappings":"AAAA,SAASA,WAAW,QAAQ,YAAY;AAExC,OAAO,IAAMC,qBAAqB,MAAM;AACxC,IAAMC,0BAA0BD,qBAAqB;AAErD;;CAEC,GACD,OAAO,SAASE,YAAYC,IAAU;IACpC,IAAMC,MAAM,IAAIC;IAChB,IAAMC,IAAIF,IAAIG,OAAO;IACrB,IAAMC,IAAIJ,IAAIK,QAAQ;IACtB,IAAMC,IAAIN,IAAIO,WAAW;IAEzB,OAAOR,KAAKQ,WAAW,OAAOD,KAAKP,KAAKM,QAAQ,OAAOD,KAAKL,KAAKI,OAAO,OAAOD;AACjF;AAEA;;CAEC,GACD,OAAO,SAASM,gBAAgBT,IAAU;IACxC,IAAMU,gBAAgB,IAAIR,KAAKF,KAAKW,OAAO,KAAKb;IAChD,OAAOC,YAAYW;AACrB;AAEA;;CAEC,GACD,OAAO,SAASE,eAAeZ,IAAU;IACvC,IAAMa,eAAe,IAAIX,KAAKF,KAAKW,OAAO,KAAKb;IAC/C,OAAOC,YAAYc;AACrB;AAEA;;CAEC,GACD,OAAO,SAASC,WAAWC,EAAQ,EAAEC,EAAQ;IAC3C,OACED,GAAGX,OAAO,OAAOY,GAAGZ,OAAO,MAC3BW,GAAGT,QAAQ,OAAOU,GAAGV,QAAQ,MAC7BS,GAAGP,WAAW,OAAOQ,GAAGR,WAAW;AAEvC;AAEA;;CAEC,GACD,OAAO,SAASS,kBAAkBjB,IAAU;IAC1C,IAAMkB,OAAOlB,KAAKQ,WAAW;IAC7B,IAAMW,QAAQnB,KAAKM,QAAQ;IAC3B,IAAMc,MAAMpB,KAAKI,OAAO;IAExB,OAAO,IAAIF,KAAKgB,MAAMC,OAAOC,KAAK,GAAG,GAAG,GAAG;AAC7C;AAEA,OAAO,SAASC,WAAWH,IAAY;IACrC,OAAO,AAACA,OAAO,MAAM,KAAKA,OAAO,QAAQ,KAAMA,OAAO,QAAQ;AAChE;AAEA;;CAEC,GACD,OAAO,SAASI,kBAAkBJ,IAAY,EAAEC,KAAa;IAC3D,IAAI,CAACA,UAAU,GAAG;QAChB,OAAOE,WAAWH,QAAQ,KAAK;IACjC,OAAO,IAAIC,QAAQ,KAAM,CAAA,AAACA,QAAQ,KAAKA,QAAQ,MAAM,KAAOA,QAAQ,KAAKA,QAAQ,MAAM,CAAC,GAAI;QAC1F,OAAO;IACT;IACA,OAAO;AACT;AAEA;;CAEC,GACD,OAAO,SAASI,eAAevB,IAAU;IACvC,IAAMwB,UAAUxB,KAAKyB,MAAM;IAC3B,IAAID,YAAY,GAAG;QACjB,OAAOE,QAAQ1B,MAAM,CAAC;IACxB;IACA,OAAO0B,QAAQ1B,MAAM,CAACwB,UAAU;AAClC;AAEA;;CAEC,GACD,OAAO,SAASE,QAAQ1B,IAAU,EAAE2B,QAAgB;IAClD,IAAMC,WAAW,IAAI1B,KAAKF,KAAKW,OAAO;IACtCiB,SAASC,OAAO,CAACD,SAASxB,OAAO,KAAKuB;IACtC,OAAOC;AACT;AAEA;;CAEC,GACD,OAAO,SAASE,4BAA4BC,SAAiB;IAC3D,OAAO,IAAI7B,KAAK6B,YAAY;AAC9B;AAEA;;CAEC,GACD,OAAO,SAASC,yBAAyBhC,IAAU;IACjD,OAAOiC,KAAKC,KAAK,CAAClC,KAAKW,OAAO,KAAK;AACrC;AAEA;;CAEC,GACD,OAAO,SAASwB,yBAAyBnC,IAAU;IACjD,IAAMoB,MAAMpB,KAAKI,OAAO;IACxB,IAAMe,QAAQnB,KAAKM,QAAQ,KAAK;IAChC,IAAMY,OAAOlB,KAAKQ,WAAW;IAE7B,OAAO;QAACU;QAAMtB,YAAYuB;QAAQvB,YAAYwB;KAAK,CAACgB,IAAI,CAAC;AAC3D"}