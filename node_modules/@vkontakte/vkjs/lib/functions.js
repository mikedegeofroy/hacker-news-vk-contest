"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    debounce: function() {
        return debounce;
    },
    noop: function() {
        return noop;
    },
    once: function() {
        return once;
    },
    throttle: function() {
        return throttle;
    }
});
var noop = function() {};
// eslint-disable-line @typescript-eslint/no-empty-function
function throttle(fn) {
    var threshold = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50, scope = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : typeof window !== "undefined" ? window : undefined;
    var prevDate = Date.now() - threshold;
    var timeoutId;
    var throttledFn = function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var timeLeft = prevDate + threshold - Date.now();
        clearTimeout(timeoutId);
        if (timeLeft > 0) {
            timeoutId = setTimeout(function() {
                prevDate = Date.now();
                fn.apply(scope, args);
            }, timeLeft);
            return;
        }
        prevDate = Date.now();
        fn.apply(scope, args);
    };
    throttledFn.cancel = function() {
        clearTimeout(timeoutId);
    };
    return throttledFn;
}
function debounce(fn, delay) {
    var context = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : typeof window !== "undefined" ? window : undefined;
    var timeoutId;
    var args;
    var later = function() {
        return fn.apply(context, args);
    };
    var debouncedFn = function() {
        for(var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++){
            a[_key] = arguments[_key];
        }
        args = a;
        clearTimeout(timeoutId);
        timeoutId = setTimeout(later, delay);
    };
    debouncedFn.cancel = function() {
        clearTimeout(timeoutId);
    };
    return debouncedFn;
}
function once(fn) {
    var called = false;
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        if (called) {
            return;
        }
        called = true;
        return fn.apply(this, args);
    };
}

//# sourceMappingURL=functions.js.map