"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    localStorage: function() {
        return localStorage;
    },
    sessionStorage: function() {
        return sessionStorage;
    }
});
var _class_call_check = require("@swc/helpers/_/_class_call_check");
var _create_class = require("@swc/helpers/_/_create_class");
var _define_property = require("@swc/helpers/_/_define_property");
var _instanceof = require("@swc/helpers/_/_instanceof");
var CustomStorage = /*#__PURE__*/ function() {
    "use strict";
    function CustomStorage() {
        var _this = this;
        _class_call_check._(this, CustomStorage);
        _define_property._(this, "data", {});
        _define_property._(this, "getItem", function(key) {
            return _this.data.hasOwnProperty(key) ? _this.data[key] : null;
        });
        _define_property._(this, "keys", function() {
            return Object.keys(_this.data);
        });
    }
    _create_class._(CustomStorage, [
        {
            key: "setItem",
            value: function setItem(key, val) {
                this.data[key] = String(val);
            }
        },
        {
            key: "removeItem",
            value: function removeItem(id) {
                delete this.data[id];
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.data = {};
            }
        },
        {
            key: "length",
            get: function get() {
                return Object.keys(this.data).length;
            }
        },
        {
            key: "key",
            value: function key(index) {
                return Object.keys(this.data)[index];
            }
        }
    ]);
    return CustomStorage;
}();
var dummyKey = "vk-ls-dummy";
var dummyContent = "test";
var ls;
function getLocalStorage() {
    if (ls) {
        return ls;
    }
    try {
        // Проверяем, нет ли в FF или Safari cross domain security restrictions
        window.localStorage.setItem(dummyKey, dummyContent);
        if (dummyContent !== window.localStorage.getItem(dummyKey)) {
            throw new Error("localStorage is broken");
        }
        window.localStorage.removeItem(dummyKey);
        ls = window.localStorage;
    } catch (e) {
        ls = new CustomStorage();
    }
    return ls;
}
/**
 * Обертка над localStorage для кода, который может использоваться на других сайтах
 * Firefox блокирует доступ к localStorage для скриптов с других доменов
 */ var localStorage = {
    setItem: function(key, val) {
        return getLocalStorage().setItem(key, val);
    },
    getItem: function(key) {
        return getLocalStorage().getItem(key);
    },
    removeItem: function(key) {
        return getLocalStorage().removeItem(key);
    },
    clear: function() {
        return getLocalStorage().clear();
    },
    length: function() {
        return getLocalStorage().length;
    },
    key: function(index) {
        return getLocalStorage().key(index);
    },
    keys: function keys() {
        var storage = getLocalStorage();
        if (_instanceof._(storage, CustomStorage)) {
            return storage.keys();
        } else {
            return Object.keys(storage);
        }
    },
    getPrefixedKeys: function(prefix) {
        return localStorage.keys().filter(function(key) {
            return key.startsWith(prefix);
        });
    }
};
var sessionStorageCache;
function getSessionStorage() {
    if (sessionStorageCache) {
        return sessionStorageCache;
    }
    try {
        // Проверяем, нет ли в FF или Safari cross domain security restrictions
        window.sessionStorage.setItem(dummyKey, dummyContent);
        if (dummyContent !== window.sessionStorage.getItem(dummyKey)) {
            throw new Error("sessionStorage is broken");
        }
        window.sessionStorage.removeItem(dummyKey);
        sessionStorageCache = window.sessionStorage;
    } catch (e) {
        sessionStorageCache = new CustomStorage();
    }
    return sessionStorageCache;
}
var sessionStorage = {
    setItem: function(key, val) {
        return getSessionStorage().setItem(key, val);
    },
    getItem: function(key) {
        return getSessionStorage().getItem(key);
    },
    removeItem: function(key) {
        return getSessionStorage().removeItem(key);
    },
    clear: function() {
        return getSessionStorage().clear();
    },
    length: function() {
        return getSessionStorage().length;
    },
    key: function(index) {
        return getSessionStorage().key(index);
    },
    keys: function keys() {
        var storage = getSessionStorage();
        if (_instanceof._(storage, CustomStorage)) {
            return storage.keys();
        } else {
            return Object.keys(storage);
        }
    },
    getPrefixedKeys: function(prefix) {
        return sessionStorage.keys().filter(function(key) {
            return key.startsWith(prefix);
        });
    }
};

//# sourceMappingURL=storage.js.map