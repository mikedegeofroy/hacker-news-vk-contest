import { useLayoutEffect, useEffect, useState } from 'react';
import vkBridge from '@vkontakte/vk-bridge';

var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;

var initialState = {
    type: null,
    viewportWidth: 0,
    viewportHeight: 0,
};
var useAdaptivity = function () {
    var _a = useState(initialState), bridgeAdaptivity = _a[0], setBridgeAdaptivity = _a[1];
    useIsomorphicLayoutEffect(function () {
        var updateAdaptivity = function (data) {
            if (!('viewport_width' in data) || !('viewport_height' in data)) {
                return;
            }
            var newAdaptivity = resolveAdaptivity(data);
            if (newAdaptivity) {
                setBridgeAdaptivity(newAdaptivity);
            }
        };
        var handleBridgeEvent = function (event) {
            var _a = event.detail, type = _a.type, data = _a.data;
            if (type !== 'VKWebAppUpdateConfig') {
                return;
            }
            updateAdaptivity(data);
        };
        vkBridge.subscribe(handleBridgeEvent);
        vkBridge.send('VKWebAppGetConfig').then(updateAdaptivity).catch(console.error);
        return function () {
            vkBridge.unsubscribe(handleBridgeEvent);
        };
    }, []);
    return bridgeAdaptivity;
};
function resolveAdaptivity(data) {
    var adaptivity = data.adaptivity, viewport_width = data.viewport_width, viewport_height = data.viewport_height;
    var bridgeAdaptivity = {
        type: null,
        viewportWidth: isFinite(viewport_width) ? Number(viewport_width) : 0,
        viewportHeight: isFinite(viewport_height) ? Number(viewport_height) : 0,
    };
    switch (adaptivity) {
        case 'force_mobile':
        case 'force_mobile_compact':
        case 'adaptive':
            bridgeAdaptivity.type = adaptivity;
    }
    return bridgeAdaptivity;
}

/**
 * Note: it works only for "embedded" app mode.
 */
var useAppearance = function () {
    var _a = useState(null), appearance = _a[0], setAppearance = _a[1];
    useIsomorphicLayoutEffect(function () {
        if (!vkBridge.isEmbedded()) {
            return;
        }
        var updateAppearance = function (data) {
            var initialAppearance = resolveAppearance(data);
            if (initialAppearance) {
                setAppearance(initialAppearance);
            }
        };
        var handleBridgeEvent = function (event) {
            var _a = event.detail, type = _a.type, data = _a.data;
            if (type !== 'VKWebAppUpdateConfig' || !('appearance' in data) || !('scheme' in data)) {
                return;
            }
            updateAppearance(data);
        };
        vkBridge.subscribe(handleBridgeEvent);
        vkBridge.send('VKWebAppGetConfig').then(updateAppearance).catch(console.error);
        return function () { return vkBridge.unsubscribe(handleBridgeEvent); };
    }, []);
    return appearance;
};
function resolveAppearance(_a) {
    var scheme = _a.scheme, appearance = _a.appearance;
    if (appearance) {
        return appearance;
    }
    return scheme === 'space_gray' || scheme === 'vkcom_dark' ? 'dark' : 'light';
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */


var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var VIRTUAL_KEYBOARD_HEIGHT = 150;
var BOTTOM_INSET_FOR_VIRTUAL_KEYBOARD = 0;
var useInsets = function () {
    var _a = useState(null), insets = _a[0], setInsets = _a[1];
    useIsomorphicLayoutEffect(function () {
        var handleBridgeEvent = function (event) {
            var insets = resolveInsets(event);
            if (insets) {
                setInsets(insets);
            }
        };
        vkBridge.subscribe(handleBridgeEvent);
        return function () {
            vkBridge.unsubscribe(handleBridgeEvent);
        };
    }, []);
    return insets;
};
function resolveInsets(event) {
    var _a = event.detail, type = _a.type, data = _a.data;
    switch (type) {
        case 'VKWebAppUpdateInsets': // TODO [>=3]: it is legacy, remove it
        case 'VKWebAppUpdateConfig':
            if (!('insets' in data)) {
                return null;
            }
            var insets = data.insets;
            if (insets) {
                return __assign(__assign({}, insets), { bottom: insets.bottom > VIRTUAL_KEYBOARD_HEIGHT
                        ? BOTTOM_INSET_FOR_VIRTUAL_KEYBOARD
                        : insets.bottom });
            }
    }
    return null;
}

/**
 * Dispatch device vibration if supported.
 *
 * Return `false` if not supported.
 */
function runTapticImpactOccurred(style) {
    if (vkBridge.supports('VKWebAppTapticImpactOccurred')) {
        vkBridge.send('VKWebAppTapticImpactOccurred', { style: style }).catch(function () { return undefined; });
        return true;
    }
    return false;
}

export { runTapticImpactOccurred, useAdaptivity, useAppearance, useInsets };
//# sourceMappingURL=index.es.js.map
