// node_modules/@vkontakte/vk-bridge/dist/index.es.js
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function createCounter() {
  return {
    current: 0,
    next: function() {
      return ++this.current;
    }
  };
}
function createRequestResolver(instanceId) {
  var counter = createCounter();
  var promiseControllers = {};
  return {
    /**
     * Adds new controller with resolve/reject methods.
     *
     * @param controller Object with `resolve` and `reject` functions
     * @param customId Custom `request_id`
     * @returns New request id of the added controller.
     */
    add: function(controller, customId) {
      var id = customId != null ? customId : "".concat(counter.next(), "_").concat(instanceId);
      promiseControllers[id] = controller;
      return id;
    },
    /**
     * Resolves/rejects an added promise by request id and the `isSuccess`
     * predicate.
     *
     * @param requestId Request ID.
     * @param data Data to pass to the resolve- or reject-function.
     * @param isSuccess Predicate to select the desired function.
     */
    resolve: function(requestId, data, isSuccess) {
      var requestPromise = promiseControllers[requestId];
      if (requestPromise) {
        if (isSuccess(data)) {
          requestPromise.resolve(data);
        } else {
          requestPromise.reject(data);
        }
        promiseControllers[requestId] = null;
      }
    }
  };
}
function promisifySend(sendEvent, subscribe, instanceId) {
  var requestResolver = createRequestResolver(instanceId);
  subscribe(function(event) {
    if (!event.detail || !event.detail.data || typeof event.detail.data !== "object") {
      return;
    }
    if ("request_id" in event.detail.data) {
      var _a = event.detail.data, requestId = _a.request_id, data = __rest(_a, ["request_id"]);
      if (requestId) {
        requestResolver.resolve(requestId, data, function(data2) {
          return !("error_type" in data2);
        });
      }
    }
  });
  return function promisifiedSend(method, props) {
    if (props === void 0) {
      props = {};
    }
    return new Promise(function(resolve, reject) {
      var requestId = requestResolver.add({ resolve, reject }, props.request_id);
      sendEvent(method, __assign(__assign({}, props), { request_id: requestId }));
    });
  };
}
function createInstanceId() {
  var allNumbersAndLetters = 36;
  var positionAfterZeroAnDot = 2;
  var keyLength = 3;
  return Math.random().toString(allNumbersAndLetters).substring(positionAfterZeroAnDot, positionAfterZeroAnDot + keyLength);
}
var IS_CLIENT_SIDE = typeof window !== "undefined";
var IS_ANDROID_WEBVIEW = Boolean(IS_CLIENT_SIDE && window.AndroidBridge);
var IS_IOS_WEBVIEW = Boolean(IS_CLIENT_SIDE && window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.VKWebAppClose);
var IS_REACT_NATIVE_WEBVIEW = Boolean(IS_CLIENT_SIDE && window.ReactNativeWebView && typeof window.ReactNativeWebView.postMessage === "function");
var IS_WEB = IS_CLIENT_SIDE && !IS_ANDROID_WEBVIEW && !IS_IOS_WEBVIEW;
var IS_MVK = IS_WEB && /(^\?|&)vk_platform=mobile_web(&|$)/.test(location.search);
var IS_DESKTOP_VK = IS_WEB && !IS_MVK;
var EVENT_TYPE = IS_WEB ? "message" : "VKWebAppEvent";
var DESKTOP_METHODS = __spreadArray([
  "VKWebAppInit",
  "VKWebAppGetCommunityAuthToken",
  "VKWebAppAddToCommunity",
  "VKWebAppAddToHomeScreenInfo",
  "VKWebAppClose",
  "VKWebAppCopyText",
  "VKWebAppCreateHash",
  "VKWebAppGetUserInfo",
  "VKWebAppSetLocation",
  "VKWebAppSendToClient",
  "VKWebAppGetClientVersion",
  "VKWebAppGetPhoneNumber",
  "VKWebAppGetEmail",
  "VKWebAppGetGroupInfo",
  "VKWebAppGetGeodata",
  "VKWebAppGetCommunityToken",
  "VKWebAppGetConfig",
  "VKWebAppGetLaunchParams",
  "VKWebAppSetTitle",
  "VKWebAppGetAuthToken",
  "VKWebAppCallAPIMethod",
  "VKWebAppJoinGroup",
  "VKWebAppLeaveGroup",
  "VKWebAppAllowMessagesFromGroup",
  "VKWebAppDenyNotifications",
  "VKWebAppAllowNotifications",
  "VKWebAppOpenPayForm",
  "VKWebAppOpenApp",
  "VKWebAppShare",
  "VKWebAppShowWallPostBox",
  "VKWebAppScroll",
  "VKWebAppShowOrderBox",
  "VKWebAppShowLeaderBoardBox",
  "VKWebAppShowInviteBox",
  "VKWebAppShowRequestBox",
  "VKWebAppAddToFavorites",
  "VKWebAppShowStoryBox",
  "VKWebAppStorageGet",
  "VKWebAppStorageGetKeys",
  "VKWebAppStorageSet",
  "VKWebAppFlashGetInfo",
  "VKWebAppSubscribeStoryApp",
  "VKWebAppOpenWallPost",
  "VKWebAppCheckAllowedScopes",
  "VKWebAppCheckBannerAd",
  "VKWebAppHideBannerAd",
  "VKWebAppShowBannerAd",
  "VKWebAppCheckNativeAds",
  "VKWebAppShowNativeAds",
  "VKWebAppRetargetingPixel",
  "VKWebAppConversionHit",
  "VKWebAppShowSubscriptionBox",
  "VKWebAppCheckSurvey",
  "VKWebAppShowSurvey",
  "VKWebAppScrollTop",
  "VKWebAppScrollTopStart",
  "VKWebAppScrollTopStop",
  "VKWebAppShowSlidesSheet",
  "VKWebAppTranslate",
  "VKWebAppRecommend",
  "VKWebAppAddToProfile"
], IS_DESKTOP_VK ? [
  "VKWebAppResizeWindow",
  "VKWebAppAddToMenu",
  "VKWebAppShowInstallPushBox",
  "VKWebAppGetFriends",
  "VKWebAppShowCommunityWidgetPreviewBox",
  "VKWebAppCallStart",
  "VKWebAppCallJoin",
  "VKWebAppCallGetStatus"
] : ["VKWebAppShowImages"], true);
var androidBridge = IS_CLIENT_SIDE ? window.AndroidBridge : void 0;
var iosBridge = IS_IOS_WEBVIEW ? window.webkit.messageHandlers : void 0;
var webBridge = IS_WEB ? parent : void 0;
function createVKBridge(version2) {
  var webFrameId = void 0;
  var subscribers = [];
  var instanceId = createInstanceId();
  function send(method, props) {
    if (androidBridge && androidBridge[method]) {
      androidBridge[method](JSON.stringify(props));
    } else if (iosBridge && iosBridge[method] && typeof iosBridge[method].postMessage === "function") {
      iosBridge[method].postMessage(props);
    } else if (IS_REACT_NATIVE_WEBVIEW) {
      window.ReactNativeWebView.postMessage(JSON.stringify({
        handler: method,
        params: props
      }));
    } else if (webBridge && typeof webBridge.postMessage === "function") {
      webBridge.postMessage({
        handler: method,
        params: props,
        type: "vk-connect",
        webFrameId,
        connectVersion: version2
      }, "*");
    }
  }
  function subscribe(listener) {
    subscribers.push(listener);
  }
  function unsubscribe(listener) {
    var index = subscribers.indexOf(listener);
    if (index > -1) {
      subscribers.splice(index, 1);
    }
  }
  function supports(method) {
    if (IS_ANDROID_WEBVIEW) {
      return !!(androidBridge && typeof androidBridge[method] === "function");
    } else if (IS_IOS_WEBVIEW) {
      return !!(iosBridge && iosBridge[method] && typeof iosBridge[method].postMessage === "function");
    } else if (IS_WEB) {
      return DESKTOP_METHODS.includes(method);
    }
    return false;
  }
  function isWebView() {
    return IS_IOS_WEBVIEW || IS_ANDROID_WEBVIEW;
  }
  function isIframe() {
    return IS_WEB && window.parent !== window;
  }
  function isEmbedded() {
    return isWebView() || isIframe();
  }
  function isStandalone() {
    return !isEmbedded();
  }
  function handleEvent(event) {
    if (IS_IOS_WEBVIEW || IS_ANDROID_WEBVIEW) {
      return __spreadArray([], subscribers, true).map(function(fn) {
        return fn.call(null, event);
      });
    }
    var bridgeEventData = event === null || event === void 0 ? void 0 : event.data;
    if (!IS_WEB || !bridgeEventData) {
      return;
    }
    if (IS_REACT_NATIVE_WEBVIEW && typeof bridgeEventData === "string") {
      try {
        bridgeEventData = JSON.parse(bridgeEventData);
      } catch (_a) {
      }
    }
    var type = bridgeEventData.type, data = bridgeEventData.data, frameId = bridgeEventData.frameId;
    if (!type) {
      return;
    }
    if (type === "VKWebAppSettings") {
      webFrameId = frameId;
      return;
    }
    __spreadArray([], subscribers, true).map(function(fn) {
      return fn({ detail: { type, data } });
    });
  }
  if (IS_REACT_NATIVE_WEBVIEW && /(android)/i.test(navigator.userAgent)) {
    document.addEventListener(EVENT_TYPE, handleEvent);
  } else if (typeof window !== "undefined" && "addEventListener" in window) {
    window.addEventListener(EVENT_TYPE, handleEvent);
  }
  var sendPromise = promisifySend(send, subscribe, instanceId);
  return {
    send: sendPromise,
    sendPromise,
    subscribe,
    unsubscribe,
    supports,
    isWebView,
    isIframe,
    isEmbedded,
    isStandalone
  };
}
var version = "2.14.1";
var EAdsFormats;
(function(EAdsFormats2) {
  EAdsFormats2["REWARD"] = "reward";
  EAdsFormats2["INTERSTITIAL"] = "interstitial";
})(EAdsFormats || (EAdsFormats = {}));
var BannerAdLayoutType;
(function(BannerAdLayoutType2) {
  BannerAdLayoutType2["RESIZE"] = "resize";
  BannerAdLayoutType2["OVERLAY"] = "overlay";
})(BannerAdLayoutType || (BannerAdLayoutType = {}));
var BannerAdLocation;
(function(BannerAdLocation2) {
  BannerAdLocation2["TOP"] = "top";
  BannerAdLocation2["BOTTOM"] = "bottom";
})(BannerAdLocation || (BannerAdLocation = {}));
var BannerAdAlign;
(function(BannerAdAlign2) {
  BannerAdAlign2["LEFT"] = "left";
  BannerAdAlign2["RIGHT"] = "right";
  BannerAdAlign2["CENTER"] = "center";
})(BannerAdAlign || (BannerAdAlign = {}));
var EGrantedPermission;
(function(EGrantedPermission2) {
  EGrantedPermission2["CAMERA"] = "camera";
  EGrantedPermission2["LOCATION"] = "location";
  EGrantedPermission2["PHOTO"] = "photo";
})(EGrantedPermission || (EGrantedPermission = {}));
var EGetLaunchParamsResponseLanguages;
(function(EGetLaunchParamsResponseLanguages2) {
  EGetLaunchParamsResponseLanguages2["RU"] = "ru";
  EGetLaunchParamsResponseLanguages2["UK"] = "uk";
  EGetLaunchParamsResponseLanguages2["UA"] = "ua";
  EGetLaunchParamsResponseLanguages2["EN"] = "en";
  EGetLaunchParamsResponseLanguages2["BE"] = "be";
  EGetLaunchParamsResponseLanguages2["KZ"] = "kz";
  EGetLaunchParamsResponseLanguages2["PT"] = "pt";
  EGetLaunchParamsResponseLanguages2["ES"] = "es";
})(EGetLaunchParamsResponseLanguages || (EGetLaunchParamsResponseLanguages = {}));
var EGetLaunchParamsResponseGroupRole;
(function(EGetLaunchParamsResponseGroupRole2) {
  EGetLaunchParamsResponseGroupRole2["ADMIN"] = "admin";
  EGetLaunchParamsResponseGroupRole2["EDITOR"] = "editor";
  EGetLaunchParamsResponseGroupRole2["MEMBER"] = "member";
  EGetLaunchParamsResponseGroupRole2["MODER"] = "moder";
  EGetLaunchParamsResponseGroupRole2["NONE"] = "none";
})(EGetLaunchParamsResponseGroupRole || (EGetLaunchParamsResponseGroupRole = {}));
var EGetLaunchParamsResponsePlatforms;
(function(EGetLaunchParamsResponsePlatforms2) {
  EGetLaunchParamsResponsePlatforms2["DESKTOP_WEB"] = "desktop_web";
  EGetLaunchParamsResponsePlatforms2["DESKTOP_WEB_MESSENGER"] = "desktop_web_messenger";
  EGetLaunchParamsResponsePlatforms2["DESKTOP_APP_MESSENGER"] = "desktop_app_messenger";
  EGetLaunchParamsResponsePlatforms2["MOBILE_WEB"] = "mobile_web";
  EGetLaunchParamsResponsePlatforms2["MOBILE_ANDROID"] = "mobile_android";
  EGetLaunchParamsResponsePlatforms2["MOBILE_ANDROID_MESSENGER"] = "mobile_android_messenger";
  EGetLaunchParamsResponsePlatforms2["MOBILE_IPHONE"] = "mobile_iphone";
  EGetLaunchParamsResponsePlatforms2["MOBILE_IPHONE_MESSENGER"] = "mobile_iphone_messenger";
  EGetLaunchParamsResponsePlatforms2["MOBILE_IPAD"] = "mobile_ipad";
})(EGetLaunchParamsResponsePlatforms || (EGetLaunchParamsResponsePlatforms = {}));
function applyMiddleware() {
  var middlewares = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    middlewares[_i] = arguments[_i];
  }
  if (middlewares.includes(void 0) || middlewares.includes(null)) {
    return applyMiddleware.apply(void 0, middlewares.filter(function(item) {
      return typeof item === "function";
    }));
  }
  return function(bridge2) {
    if (middlewares.length === 0) {
      return bridge2;
    }
    var send = function() {
      throw new Error("Sending events while constructing your middleware is not allowed. Other middleware would not be applied to this send.");
    };
    var middlewareAPI = {
      subscribe: bridge2.subscribe,
      send: function() {
        var args = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          args[_i2] = arguments[_i2];
        }
        return bridge2.send.apply(bridge2, args);
      }
    };
    var chain = middlewares.filter(function(item) {
      return typeof item === "function";
    }).map(function(middleware) {
      return middleware(middlewareAPI);
    }).reduce(function(a, b) {
      return function(send2) {
        return a(b(send2));
      };
    });
    send = chain(bridge2.send);
    return __assign(__assign({}, bridge2), { send });
  };
}
var parseURLSearchParamsForGetLaunchParams = function(searchParams) {
  var launchParams = {};
  try {
    var parsedSearchParams = new URLSearchParams(searchParams);
    var convertToggleStateFromStringToNumber_1 = function(value) {
      switch (value) {
        case "0":
          return 0;
        case "1":
          return 1;
        default:
          return void 0;
      }
    };
    parsedSearchParams.forEach(function(value, query) {
      switch (query) {
        case "vk_ts":
        case "vk_is_recommended":
        case "vk_profile_id":
        case "vk_has_profile_button":
        case "vk_testing_group_id":
        case "vk_user_id":
        case "vk_app_id":
        case "vk_group_id":
          launchParams[query] = Number(value);
          break;
        case "sign":
        case "vk_chat_id":
        case "vk_ref":
        case "vk_access_token_settings":
          launchParams[query] = value;
          break;
        case "odr_enabled":
          launchParams["odr_enabled"] = value === "1" ? 1 : void 0;
          break;
        case "vk_is_app_user":
        case "vk_are_notifications_enabled":
        case "vk_is_favorite": {
          launchParams[query] = convertToggleStateFromStringToNumber_1(value);
          break;
        }
        case "vk_language": {
          var validateVKLanguage = function(value2) {
            return Object.values(EGetLaunchParamsResponseLanguages).some(function(i) {
              return i === value2;
            });
          };
          launchParams["vk_language"] = validateVKLanguage(value) ? value : void 0;
          break;
        }
        case "vk_viewer_group_role": {
          var validateVKViewerGroupRole = function(value2) {
            return Object.values(EGetLaunchParamsResponseGroupRole).some(function(i) {
              return i === value2;
            });
          };
          launchParams["vk_viewer_group_role"] = validateVKViewerGroupRole(value) ? value : void 0;
          break;
        }
        case "vk_platform": {
          var validateVKPlatform = function(value2) {
            return Object.values(EGetLaunchParamsResponsePlatforms).some(function(i) {
              return i === value2;
            });
          };
          launchParams["vk_platform"] = validateVKPlatform(value) ? value : void 0;
          break;
        }
      }
    });
  } catch (e) {
    console.warn(e);
  }
  return launchParams;
};
var bridge = createVKBridge(version);

export {
  EAdsFormats,
  BannerAdLayoutType,
  BannerAdLocation,
  BannerAdAlign,
  EGrantedPermission,
  EGetLaunchParamsResponseLanguages,
  EGetLaunchParamsResponseGroupRole,
  EGetLaunchParamsResponsePlatforms,
  applyMiddleware,
  parseURLSearchParamsForGetLaunchParams,
  bridge
};
//# sourceMappingURL=chunk-TVEC24TU.js.map
