import {
  require_react
} from "./chunk-VBC23C2Q.js";
import {
  bridge
} from "./chunk-TVEC24TU.js";
import {
  __toESM
} from "./chunk-LQ2VYIYD.js";

// node_modules/@vkontakte/vk-bridge-react/dist/index.es.js
var import_react = __toESM(require_react());
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;
var initialState = {
  type: null,
  viewportWidth: 0,
  viewportHeight: 0
};
var useAdaptivity = function() {
  var _a = (0, import_react.useState)(initialState), bridgeAdaptivity = _a[0], setBridgeAdaptivity = _a[1];
  useIsomorphicLayoutEffect(function() {
    var updateAdaptivity = function(data) {
      if (!("viewport_width" in data) || !("viewport_height" in data)) {
        return;
      }
      var newAdaptivity = resolveAdaptivity(data);
      if (newAdaptivity) {
        setBridgeAdaptivity(newAdaptivity);
      }
    };
    var handleBridgeEvent = function(event) {
      var _a2 = event.detail, type = _a2.type, data = _a2.data;
      if (type !== "VKWebAppUpdateConfig") {
        return;
      }
      updateAdaptivity(data);
    };
    bridge.subscribe(handleBridgeEvent);
    bridge.send("VKWebAppGetConfig").then(updateAdaptivity).catch(console.error);
    return function() {
      bridge.unsubscribe(handleBridgeEvent);
    };
  }, []);
  return bridgeAdaptivity;
};
function resolveAdaptivity(data) {
  var adaptivity = data.adaptivity, viewport_width = data.viewport_width, viewport_height = data.viewport_height;
  var bridgeAdaptivity = {
    type: null,
    viewportWidth: isFinite(viewport_width) ? Number(viewport_width) : 0,
    viewportHeight: isFinite(viewport_height) ? Number(viewport_height) : 0
  };
  switch (adaptivity) {
    case "force_mobile":
    case "force_mobile_compact":
    case "adaptive":
      bridgeAdaptivity.type = adaptivity;
  }
  return bridgeAdaptivity;
}
var useAppearance = function() {
  var _a = (0, import_react.useState)(null), appearance = _a[0], setAppearance = _a[1];
  useIsomorphicLayoutEffect(function() {
    if (!bridge.isEmbedded()) {
      return;
    }
    var updateAppearance = function(data) {
      var initialAppearance = resolveAppearance(data);
      if (initialAppearance) {
        setAppearance(initialAppearance);
      }
    };
    var handleBridgeEvent = function(event) {
      var _a2 = event.detail, type = _a2.type, data = _a2.data;
      if (type !== "VKWebAppUpdateConfig" || !("appearance" in data) || !("scheme" in data)) {
        return;
      }
      updateAppearance(data);
    };
    bridge.subscribe(handleBridgeEvent);
    bridge.send("VKWebAppGetConfig").then(updateAppearance).catch(console.error);
    return function() {
      return bridge.unsubscribe(handleBridgeEvent);
    };
  }, []);
  return appearance;
};
function resolveAppearance(_a) {
  var scheme = _a.scheme, appearance = _a.appearance;
  if (appearance) {
    return appearance;
  }
  return scheme === "space_gray" || scheme === "vkcom_dark" ? "dark" : "light";
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var VIRTUAL_KEYBOARD_HEIGHT = 150;
var BOTTOM_INSET_FOR_VIRTUAL_KEYBOARD = 0;
var useInsets = function() {
  var _a = (0, import_react.useState)(null), insets = _a[0], setInsets = _a[1];
  useIsomorphicLayoutEffect(function() {
    var handleBridgeEvent = function(event) {
      var insets2 = resolveInsets(event);
      if (insets2) {
        setInsets(insets2);
      }
    };
    bridge.subscribe(handleBridgeEvent);
    return function() {
      bridge.unsubscribe(handleBridgeEvent);
    };
  }, []);
  return insets;
};
function resolveInsets(event) {
  var _a = event.detail, type = _a.type, data = _a.data;
  switch (type) {
    case "VKWebAppUpdateInsets":
    case "VKWebAppUpdateConfig":
      if (!("insets" in data)) {
        return null;
      }
      var insets = data.insets;
      if (insets) {
        return __assign(__assign({}, insets), { bottom: insets.bottom > VIRTUAL_KEYBOARD_HEIGHT ? BOTTOM_INSET_FOR_VIRTUAL_KEYBOARD : insets.bottom });
      }
  }
  return null;
}
function runTapticImpactOccurred(style) {
  if (bridge.supports("VKWebAppTapticImpactOccurred")) {
    bridge.send("VKWebAppTapticImpactOccurred", { style }).catch(function() {
      return void 0;
    });
    return true;
  }
  return false;
}
export {
  runTapticImpactOccurred,
  useAdaptivity,
  useAppearance,
  useInsets
};
//# sourceMappingURL=@vkontakte_vk-bridge-react.js.map
